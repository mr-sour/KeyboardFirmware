   1               		.file	"descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB100:
  15               		.file 1 "../../tmk_core/protocol/lufa/descriptor.c"
   1:../../tmk_core/protocol/lufa/descriptor.c **** /* 
   2:../../tmk_core/protocol/lufa/descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/protocol/lufa/descriptor.c ****  * This file is based on:
   4:../../tmk_core/protocol/lufa/descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:../../tmk_core/protocol/lufa/descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:../../tmk_core/protocol/lufa/descriptor.c ****  */
   7:../../tmk_core/protocol/lufa/descriptor.c **** 
   8:../../tmk_core/protocol/lufa/descriptor.c **** /*
   9:../../tmk_core/protocol/lufa/descriptor.c ****              LUFA Library
  10:../../tmk_core/protocol/lufa/descriptor.c ****      Copyright (C) Dean Camera, 2012.
  11:../../tmk_core/protocol/lufa/descriptor.c **** 
  12:../../tmk_core/protocol/lufa/descriptor.c ****   dean [at] fourwalledcubicle [dot] com
  13:../../tmk_core/protocol/lufa/descriptor.c ****            www.lufa-lib.org
  14:../../tmk_core/protocol/lufa/descriptor.c **** */
  15:../../tmk_core/protocol/lufa/descriptor.c **** 
  16:../../tmk_core/protocol/lufa/descriptor.c **** /*
  17:../../tmk_core/protocol/lufa/descriptor.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:../../tmk_core/protocol/lufa/descriptor.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:../../tmk_core/protocol/lufa/descriptor.c **** 
  20:../../tmk_core/protocol/lufa/descriptor.c ****   Permission to use, copy, modify, distribute, and sell this
  21:../../tmk_core/protocol/lufa/descriptor.c ****   software and its documentation for any purpose is hereby granted
  22:../../tmk_core/protocol/lufa/descriptor.c ****   without fee, provided that the above copyright notice appear in
  23:../../tmk_core/protocol/lufa/descriptor.c ****   all copies and that both that the copyright notice and this
  24:../../tmk_core/protocol/lufa/descriptor.c ****   permission notice and warranty disclaimer appear in supporting
  25:../../tmk_core/protocol/lufa/descriptor.c ****   documentation, and that the name of the author not be used in
  26:../../tmk_core/protocol/lufa/descriptor.c ****   advertising or publicity pertaining to distribution of the
  27:../../tmk_core/protocol/lufa/descriptor.c ****   software without specific, written prior permission.
  28:../../tmk_core/protocol/lufa/descriptor.c **** 
  29:../../tmk_core/protocol/lufa/descriptor.c ****   The author disclaim all warranties with regard to this
  30:../../tmk_core/protocol/lufa/descriptor.c ****   software, including all implied warranties of merchantability
  31:../../tmk_core/protocol/lufa/descriptor.c ****   and fitness.  In no event shall the author be liable for any
  32:../../tmk_core/protocol/lufa/descriptor.c ****   special, indirect or consequential damages or any damages
  33:../../tmk_core/protocol/lufa/descriptor.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:../../tmk_core/protocol/lufa/descriptor.c ****   in an action of contract, negligence or other tortious action,
  35:../../tmk_core/protocol/lufa/descriptor.c ****   arising out of or in connection with the use or performance of
  36:../../tmk_core/protocol/lufa/descriptor.c ****   this software.
  37:../../tmk_core/protocol/lufa/descriptor.c **** */
  38:../../tmk_core/protocol/lufa/descriptor.c **** 
  39:../../tmk_core/protocol/lufa/descriptor.c **** #include "util.h"
  40:../../tmk_core/protocol/lufa/descriptor.c **** #include "report.h"
  41:../../tmk_core/protocol/lufa/descriptor.c **** #include "descriptor.h"
  42:../../tmk_core/protocol/lufa/descriptor.c **** 
  43:../../tmk_core/protocol/lufa/descriptor.c **** 
  44:../../tmk_core/protocol/lufa/descriptor.c **** /*******************************************************************************
  45:../../tmk_core/protocol/lufa/descriptor.c ****  * HID Report Descriptors
  46:../../tmk_core/protocol/lufa/descriptor.c ****  ******************************************************************************/
  47:../../tmk_core/protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] =
  48:../../tmk_core/protocol/lufa/descriptor.c **** {
  49:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  50:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
  51:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  52:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
  53:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
  54:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
  55:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  56:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  57:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  58:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  59:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  60:../../tmk_core/protocol/lufa/descriptor.c **** 
  61:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  62:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  63:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),  /* reserved */
  64:../../tmk_core/protocol/lufa/descriptor.c **** 
  65:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
  66:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
  67:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
  68:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  69:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  70:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  71:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  72:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  73:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  74:../../tmk_core/protocol/lufa/descriptor.c **** 
  75:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Keyboard */
  76:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
  77:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF), /* Usage ID 0x00-0xFF */
  78:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  79:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF), /* needs 16 bit to indicate positive value */
  80:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  81:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  82:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  83:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
  84:../../tmk_core/protocol/lufa/descriptor.c **** };
  85:../../tmk_core/protocol/lufa/descriptor.c **** 
  86:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
  87:../../tmk_core/protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] =
  88:../../tmk_core/protocol/lufa/descriptor.c **** {
  89:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  90:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x02), /* Mouse */
  91:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  92:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE(8, 0x01), /* Pointer */
  93:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_COLLECTION(8, 0x00), /* Physical */
  94:../../tmk_core/protocol/lufa/descriptor.c **** 
  95:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09), /* Button */
  96:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01),  /* Button 1 */
  97:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x05),  /* Button 5 */
  98:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
  99:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 100:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x05),
 101:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 102:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 103:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 104:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x03),
 105:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 106:../../tmk_core/protocol/lufa/descriptor.c **** 
 107:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 108:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_USAGE(8, 0x30), /* Usage X */
 109:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_USAGE(8, 0x31), /* Usage Y */
 110:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 111:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 112:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 113:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 114:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 115:../../tmk_core/protocol/lufa/descriptor.c **** 
 116:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_USAGE(8, 0x38), /* Wheel */
 117:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 118:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 119:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 120:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 121:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 122:../../tmk_core/protocol/lufa/descriptor.c **** 
 123:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 124:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_USAGE(16, 0x0238), /* AC Pan (Horizontal wheel) */
 125:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 126:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 127:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 128:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 129:../../tmk_core/protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 130:../../tmk_core/protocol/lufa/descriptor.c **** 
 131:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_END_COLLECTION(0),
 132:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 133:../../tmk_core/protocol/lufa/descriptor.c **** };
 134:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 135:../../tmk_core/protocol/lufa/descriptor.c **** 
 136:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 137:../../tmk_core/protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ExtrakeyReport[] =
 138:../../tmk_core/protocol/lufa/descriptor.c **** {
 139:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 140:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x80), /* System Control */
 141:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 142:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 143:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0081),
 144:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00B7),
 145:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0081), /* System Power Down */
 146:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x00B7), /* System Display LCD Autoscale */
 147:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 148:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 149:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 150:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 151:../../tmk_core/protocol/lufa/descriptor.c **** 
 152:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 153:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x01), /* Consumer Control */
 154:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 155:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 156:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 157:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x029C),
 158:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0001), /* +10 */
 159:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x029C), /* AC Distribute Vertically */
 160:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 161:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 162:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 163:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 164:../../tmk_core/protocol/lufa/descriptor.c **** };
 165:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 166:../../tmk_core/protocol/lufa/descriptor.c **** 
 167:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 168:../../tmk_core/protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] =
 169:../../tmk_core/protocol/lufa/descriptor.c **** {
 170:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), /* Vendor Page(PJRC Teensy compatible) */
 171:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x74), /* Vendor Usage(PJRC Teensy compatible) */
 172:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 173:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE(8, 0x75), /* Vendor Usage 0x75 */
 174:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 175:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 176:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 177:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 178:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 179:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE(8, 0x76), /* Vendor Usage 0x76 */
 180:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 181:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 182:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 183:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 184:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 185:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 186:../../tmk_core/protocol/lufa/descriptor.c **** };
 187:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 188:../../tmk_core/protocol/lufa/descriptor.c **** 
 189:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 190:../../tmk_core/protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM NKROReport[] =
 191:../../tmk_core/protocol/lufa/descriptor.c **** {
 192:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 193:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
 194:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 195:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 196:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
 197:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
 198:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 199:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 200:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 201:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 202:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 203:../../tmk_core/protocol/lufa/descriptor.c **** 
 204:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
 205:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
 206:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
 207:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 208:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 209:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 210:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 211:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 212:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 213:../../tmk_core/protocol/lufa/descriptor.c **** 
 214:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 215:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Keyboard 0 */
 216:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, (NKRO_EPSIZE-1)*8-1), /* Keyboard Right GUI */
 217:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 218:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 219:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, (NKRO_EPSIZE-1)*8),
 220:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 221:../../tmk_core/protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 222:../../tmk_core/protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 223:../../tmk_core/protocol/lufa/descriptor.c **** };
 224:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 225:../../tmk_core/protocol/lufa/descriptor.c **** 
 226:../../tmk_core/protocol/lufa/descriptor.c **** /*******************************************************************************
 227:../../tmk_core/protocol/lufa/descriptor.c ****  * Device Descriptors
 228:../../tmk_core/protocol/lufa/descriptor.c ****  ******************************************************************************/
 229:../../tmk_core/protocol/lufa/descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
 230:../../tmk_core/protocol/lufa/descriptor.c **** {
 231:../../tmk_core/protocol/lufa/descriptor.c ****     .Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
 232:../../tmk_core/protocol/lufa/descriptor.c **** 
 233:../../tmk_core/protocol/lufa/descriptor.c ****     .USBSpecification       = VERSION_BCD(1,1,0),
 234:../../tmk_core/protocol/lufa/descriptor.c ****     .Class                  = USB_CSCP_NoDeviceClass,
 235:../../tmk_core/protocol/lufa/descriptor.c ****     .SubClass               = USB_CSCP_NoDeviceSubclass,
 236:../../tmk_core/protocol/lufa/descriptor.c ****     .Protocol               = USB_CSCP_NoDeviceProtocol,
 237:../../tmk_core/protocol/lufa/descriptor.c **** 
 238:../../tmk_core/protocol/lufa/descriptor.c ****     .Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
 239:../../tmk_core/protocol/lufa/descriptor.c **** 
 240:../../tmk_core/protocol/lufa/descriptor.c ****     /* specified in config.h */
 241:../../tmk_core/protocol/lufa/descriptor.c ****     .VendorID               = VENDOR_ID,
 242:../../tmk_core/protocol/lufa/descriptor.c ****     .ProductID              = PRODUCT_ID,
 243:../../tmk_core/protocol/lufa/descriptor.c ****     .ReleaseNumber          = DEVICE_VER,
 244:../../tmk_core/protocol/lufa/descriptor.c **** 
 245:../../tmk_core/protocol/lufa/descriptor.c ****     .ManufacturerStrIndex   = 0x01,
 246:../../tmk_core/protocol/lufa/descriptor.c ****     .ProductStrIndex        = 0x02,
 247:../../tmk_core/protocol/lufa/descriptor.c ****     .SerialNumStrIndex      = NO_DESCRIPTOR,
 248:../../tmk_core/protocol/lufa/descriptor.c **** 
 249:../../tmk_core/protocol/lufa/descriptor.c ****     .NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 250:../../tmk_core/protocol/lufa/descriptor.c **** };
 251:../../tmk_core/protocol/lufa/descriptor.c **** 
 252:../../tmk_core/protocol/lufa/descriptor.c **** /*******************************************************************************
 253:../../tmk_core/protocol/lufa/descriptor.c ****  * Configuration Descriptors
 254:../../tmk_core/protocol/lufa/descriptor.c ****  ******************************************************************************/
 255:../../tmk_core/protocol/lufa/descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 256:../../tmk_core/protocol/lufa/descriptor.c **** {
 257:../../tmk_core/protocol/lufa/descriptor.c ****     .Config =
 258:../../tmk_core/protocol/lufa/descriptor.c ****         {
 259:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type
 260:../../tmk_core/protocol/lufa/descriptor.c **** 
 261:../../tmk_core/protocol/lufa/descriptor.c ****             .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 262:../../tmk_core/protocol/lufa/descriptor.c ****             .TotalInterfaces        = TOTAL_INTERFACES,
 263:../../tmk_core/protocol/lufa/descriptor.c **** 
 264:../../tmk_core/protocol/lufa/descriptor.c ****             .ConfigurationNumber    = 1,
 265:../../tmk_core/protocol/lufa/descriptor.c ****             .ConfigurationStrIndex  = NO_DESCRIPTOR,
 266:../../tmk_core/protocol/lufa/descriptor.c **** 
 267:../../tmk_core/protocol/lufa/descriptor.c ****             .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 268:../../tmk_core/protocol/lufa/descriptor.c **** 
 269:../../tmk_core/protocol/lufa/descriptor.c ****             .MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
 270:../../tmk_core/protocol/lufa/descriptor.c ****         },
 271:../../tmk_core/protocol/lufa/descriptor.c **** 
 272:../../tmk_core/protocol/lufa/descriptor.c ****     /*
 273:../../tmk_core/protocol/lufa/descriptor.c ****      * Keyboard
 274:../../tmk_core/protocol/lufa/descriptor.c ****      */
 275:../../tmk_core/protocol/lufa/descriptor.c ****     .Keyboard_Interface =
 276:../../tmk_core/protocol/lufa/descriptor.c ****         {
 277:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 278:../../tmk_core/protocol/lufa/descriptor.c **** 
 279:../../tmk_core/protocol/lufa/descriptor.c ****             .InterfaceNumber        = KEYBOARD_INTERFACE,
 280:../../tmk_core/protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 281:../../tmk_core/protocol/lufa/descriptor.c **** 
 282:../../tmk_core/protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 283:../../tmk_core/protocol/lufa/descriptor.c **** 
 284:../../tmk_core/protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 285:../../tmk_core/protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 286:../../tmk_core/protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_KeyboardBootProtocol,
 287:../../tmk_core/protocol/lufa/descriptor.c **** 
 288:../../tmk_core/protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 289:../../tmk_core/protocol/lufa/descriptor.c ****         },
 290:../../tmk_core/protocol/lufa/descriptor.c **** 
 291:../../tmk_core/protocol/lufa/descriptor.c ****     .Keyboard_HID =
 292:../../tmk_core/protocol/lufa/descriptor.c ****         {
 293:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 294:../../tmk_core/protocol/lufa/descriptor.c **** 
 295:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 296:../../tmk_core/protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 297:../../tmk_core/protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 298:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 299:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(KeyboardReport)
 300:../../tmk_core/protocol/lufa/descriptor.c ****         },
 301:../../tmk_core/protocol/lufa/descriptor.c **** 
 302:../../tmk_core/protocol/lufa/descriptor.c ****     .Keyboard_INEndpoint =
 303:../../tmk_core/protocol/lufa/descriptor.c ****         {
 304:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 305:../../tmk_core/protocol/lufa/descriptor.c **** 
 306:../../tmk_core/protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 307:../../tmk_core/protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 308:../../tmk_core/protocol/lufa/descriptor.c ****             .EndpointSize           = KEYBOARD_EPSIZE,
 309:../../tmk_core/protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x0A
 310:../../tmk_core/protocol/lufa/descriptor.c ****         },
 311:../../tmk_core/protocol/lufa/descriptor.c **** 
 312:../../tmk_core/protocol/lufa/descriptor.c ****     /*
 313:../../tmk_core/protocol/lufa/descriptor.c ****      * Mouse
 314:../../tmk_core/protocol/lufa/descriptor.c ****      */
 315:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
 316:../../tmk_core/protocol/lufa/descriptor.c ****     .Mouse_Interface =
 317:../../tmk_core/protocol/lufa/descriptor.c ****         {
 318:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 319:../../tmk_core/protocol/lufa/descriptor.c **** 
 320:../../tmk_core/protocol/lufa/descriptor.c ****             .InterfaceNumber        = MOUSE_INTERFACE,
 321:../../tmk_core/protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 322:../../tmk_core/protocol/lufa/descriptor.c **** 
 323:../../tmk_core/protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 324:../../tmk_core/protocol/lufa/descriptor.c **** 
 325:../../tmk_core/protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 326:../../tmk_core/protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 327:../../tmk_core/protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_MouseBootProtocol,
 328:../../tmk_core/protocol/lufa/descriptor.c **** 
 329:../../tmk_core/protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 330:../../tmk_core/protocol/lufa/descriptor.c ****         },
 331:../../tmk_core/protocol/lufa/descriptor.c **** 
 332:../../tmk_core/protocol/lufa/descriptor.c ****     .Mouse_HID =
 333:../../tmk_core/protocol/lufa/descriptor.c ****         {
 334:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 335:../../tmk_core/protocol/lufa/descriptor.c **** 
 336:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 337:../../tmk_core/protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 338:../../tmk_core/protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 339:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 340:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(MouseReport)
 341:../../tmk_core/protocol/lufa/descriptor.c ****         },
 342:../../tmk_core/protocol/lufa/descriptor.c **** 
 343:../../tmk_core/protocol/lufa/descriptor.c ****     .Mouse_INEndpoint =
 344:../../tmk_core/protocol/lufa/descriptor.c ****         {
 345:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 346:../../tmk_core/protocol/lufa/descriptor.c **** 
 347:../../tmk_core/protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 348:../../tmk_core/protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 349:../../tmk_core/protocol/lufa/descriptor.c ****             .EndpointSize           = MOUSE_EPSIZE,
 350:../../tmk_core/protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x0A
 351:../../tmk_core/protocol/lufa/descriptor.c ****         },
 352:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 353:../../tmk_core/protocol/lufa/descriptor.c **** 
 354:../../tmk_core/protocol/lufa/descriptor.c ****     /*
 355:../../tmk_core/protocol/lufa/descriptor.c ****      * Extra
 356:../../tmk_core/protocol/lufa/descriptor.c ****      */
 357:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 358:../../tmk_core/protocol/lufa/descriptor.c ****     .Extrakey_Interface =
 359:../../tmk_core/protocol/lufa/descriptor.c ****         {
 360:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 361:../../tmk_core/protocol/lufa/descriptor.c **** 
 362:../../tmk_core/protocol/lufa/descriptor.c ****             .InterfaceNumber        = EXTRAKEY_INTERFACE,
 363:../../tmk_core/protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 364:../../tmk_core/protocol/lufa/descriptor.c **** 
 365:../../tmk_core/protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 366:../../tmk_core/protocol/lufa/descriptor.c **** 
 367:../../tmk_core/protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 368:../../tmk_core/protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 369:../../tmk_core/protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 370:../../tmk_core/protocol/lufa/descriptor.c **** 
 371:../../tmk_core/protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 372:../../tmk_core/protocol/lufa/descriptor.c ****         },
 373:../../tmk_core/protocol/lufa/descriptor.c **** 
 374:../../tmk_core/protocol/lufa/descriptor.c ****     .Extrakey_HID =
 375:../../tmk_core/protocol/lufa/descriptor.c ****         {
 376:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 377:../../tmk_core/protocol/lufa/descriptor.c **** 
 378:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 379:../../tmk_core/protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 380:../../tmk_core/protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 381:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 382:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(ExtrakeyReport)
 383:../../tmk_core/protocol/lufa/descriptor.c ****         },
 384:../../tmk_core/protocol/lufa/descriptor.c **** 
 385:../../tmk_core/protocol/lufa/descriptor.c ****     .Extrakey_INEndpoint =
 386:../../tmk_core/protocol/lufa/descriptor.c ****         {
 387:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 388:../../tmk_core/protocol/lufa/descriptor.c **** 
 389:../../tmk_core/protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | EXTRAKEY_IN_EPNUM),
 390:../../tmk_core/protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 391:../../tmk_core/protocol/lufa/descriptor.c ****             .EndpointSize           = EXTRAKEY_EPSIZE,
 392:../../tmk_core/protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x0A
 393:../../tmk_core/protocol/lufa/descriptor.c ****         },
 394:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 395:../../tmk_core/protocol/lufa/descriptor.c **** 
 396:../../tmk_core/protocol/lufa/descriptor.c ****     /*
 397:../../tmk_core/protocol/lufa/descriptor.c ****      * Console
 398:../../tmk_core/protocol/lufa/descriptor.c ****      */
 399:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 400:../../tmk_core/protocol/lufa/descriptor.c ****     .Console_Interface =
 401:../../tmk_core/protocol/lufa/descriptor.c ****         {
 402:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 403:../../tmk_core/protocol/lufa/descriptor.c **** 
 404:../../tmk_core/protocol/lufa/descriptor.c ****             .InterfaceNumber        = CONSOLE_INTERFACE,
 405:../../tmk_core/protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 406:../../tmk_core/protocol/lufa/descriptor.c **** 
 407:../../tmk_core/protocol/lufa/descriptor.c ****             .TotalEndpoints         = 2,
 408:../../tmk_core/protocol/lufa/descriptor.c **** 
 409:../../tmk_core/protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 410:../../tmk_core/protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 411:../../tmk_core/protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 412:../../tmk_core/protocol/lufa/descriptor.c **** 
 413:../../tmk_core/protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 414:../../tmk_core/protocol/lufa/descriptor.c ****         },
 415:../../tmk_core/protocol/lufa/descriptor.c **** 
 416:../../tmk_core/protocol/lufa/descriptor.c ****     .Console_HID =
 417:../../tmk_core/protocol/lufa/descriptor.c ****         {
 418:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 419:../../tmk_core/protocol/lufa/descriptor.c **** 
 420:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 421:../../tmk_core/protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 422:../../tmk_core/protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 423:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 424:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(ConsoleReport)
 425:../../tmk_core/protocol/lufa/descriptor.c ****         },
 426:../../tmk_core/protocol/lufa/descriptor.c **** 
 427:../../tmk_core/protocol/lufa/descriptor.c ****     .Console_INEndpoint =
 428:../../tmk_core/protocol/lufa/descriptor.c ****         {
 429:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 430:../../tmk_core/protocol/lufa/descriptor.c **** 
 431:../../tmk_core/protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 432:../../tmk_core/protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 433:../../tmk_core/protocol/lufa/descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 434:../../tmk_core/protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x01
 435:../../tmk_core/protocol/lufa/descriptor.c ****         },
 436:../../tmk_core/protocol/lufa/descriptor.c **** 
 437:../../tmk_core/protocol/lufa/descriptor.c ****     .Console_OUTEndpoint =
 438:../../tmk_core/protocol/lufa/descriptor.c ****         {
 439:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 440:../../tmk_core/protocol/lufa/descriptor.c **** 
 441:../../tmk_core/protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 442:../../tmk_core/protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 443:../../tmk_core/protocol/lufa/descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 444:../../tmk_core/protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x01
 445:../../tmk_core/protocol/lufa/descriptor.c ****         },
 446:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 447:../../tmk_core/protocol/lufa/descriptor.c **** 
 448:../../tmk_core/protocol/lufa/descriptor.c ****     /*
 449:../../tmk_core/protocol/lufa/descriptor.c ****      * NKRO
 450:../../tmk_core/protocol/lufa/descriptor.c ****      */
 451:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 452:../../tmk_core/protocol/lufa/descriptor.c ****     .NKRO_Interface =
 453:../../tmk_core/protocol/lufa/descriptor.c ****         {
 454:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 455:../../tmk_core/protocol/lufa/descriptor.c **** 
 456:../../tmk_core/protocol/lufa/descriptor.c ****             .InterfaceNumber        = NKRO_INTERFACE,
 457:../../tmk_core/protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 458:../../tmk_core/protocol/lufa/descriptor.c **** 
 459:../../tmk_core/protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 460:../../tmk_core/protocol/lufa/descriptor.c **** 
 461:../../tmk_core/protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 462:../../tmk_core/protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 463:../../tmk_core/protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 464:../../tmk_core/protocol/lufa/descriptor.c **** 
 465:../../tmk_core/protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 466:../../tmk_core/protocol/lufa/descriptor.c ****         },
 467:../../tmk_core/protocol/lufa/descriptor.c **** 
 468:../../tmk_core/protocol/lufa/descriptor.c ****     .NKRO_HID =
 469:../../tmk_core/protocol/lufa/descriptor.c ****         {
 470:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 471:../../tmk_core/protocol/lufa/descriptor.c **** 
 472:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 473:../../tmk_core/protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 474:../../tmk_core/protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 475:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 476:../../tmk_core/protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(NKROReport)
 477:../../tmk_core/protocol/lufa/descriptor.c ****         },
 478:../../tmk_core/protocol/lufa/descriptor.c **** 
 479:../../tmk_core/protocol/lufa/descriptor.c ****     .NKRO_INEndpoint =
 480:../../tmk_core/protocol/lufa/descriptor.c ****         {
 481:../../tmk_core/protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 482:../../tmk_core/protocol/lufa/descriptor.c **** 
 483:../../tmk_core/protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | NKRO_IN_EPNUM),
 484:../../tmk_core/protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 485:../../tmk_core/protocol/lufa/descriptor.c ****             .EndpointSize           = NKRO_EPSIZE,
 486:../../tmk_core/protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x01
 487:../../tmk_core/protocol/lufa/descriptor.c ****         },
 488:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 489:../../tmk_core/protocol/lufa/descriptor.c **** };
 490:../../tmk_core/protocol/lufa/descriptor.c **** 
 491:../../tmk_core/protocol/lufa/descriptor.c **** 
 492:../../tmk_core/protocol/lufa/descriptor.c **** /*******************************************************************************
 493:../../tmk_core/protocol/lufa/descriptor.c ****  * String Descriptors
 494:../../tmk_core/protocol/lufa/descriptor.c ****  ******************************************************************************/
 495:../../tmk_core/protocol/lufa/descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 496:../../tmk_core/protocol/lufa/descriptor.c **** {
 497:../../tmk_core/protocol/lufa/descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 498:../../tmk_core/protocol/lufa/descriptor.c **** 
 499:../../tmk_core/protocol/lufa/descriptor.c ****     .UnicodeString          = {LANGUAGE_ID_ENG}
 500:../../tmk_core/protocol/lufa/descriptor.c **** };
 501:../../tmk_core/protocol/lufa/descriptor.c **** 
 502:../../tmk_core/protocol/lufa/descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 503:../../tmk_core/protocol/lufa/descriptor.c **** {
 504:../../tmk_core/protocol/lufa/descriptor.c ****     /* subtract 1 for null terminator */
 505:../../tmk_core/protocol/lufa/descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(MANUFACTURER))-1), .Type = DTYPE_S
 506:../../tmk_core/protocol/lufa/descriptor.c **** 
 507:../../tmk_core/protocol/lufa/descriptor.c ****     .UnicodeString          = LSTR(MANUFACTURER)
 508:../../tmk_core/protocol/lufa/descriptor.c **** };
 509:../../tmk_core/protocol/lufa/descriptor.c **** 
 510:../../tmk_core/protocol/lufa/descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 511:../../tmk_core/protocol/lufa/descriptor.c **** {
 512:../../tmk_core/protocol/lufa/descriptor.c ****     /* subtract 1 for null terminator */
 513:../../tmk_core/protocol/lufa/descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(PRODUCT))-1), .Type = DTYPE_String
 514:../../tmk_core/protocol/lufa/descriptor.c **** 
 515:../../tmk_core/protocol/lufa/descriptor.c ****     .UnicodeString          = LSTR(PRODUCT)
 516:../../tmk_core/protocol/lufa/descriptor.c **** };
 517:../../tmk_core/protocol/lufa/descriptor.c **** 
 518:../../tmk_core/protocol/lufa/descriptor.c **** 
 519:../../tmk_core/protocol/lufa/descriptor.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 520:../../tmk_core/protocol/lufa/descriptor.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 521:../../tmk_core/protocol/lufa/descriptor.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 522:../../tmk_core/protocol/lufa/descriptor.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 523:../../tmk_core/protocol/lufa/descriptor.c ****  *  USB host.
 524:../../tmk_core/protocol/lufa/descriptor.c ****  */
 525:../../tmk_core/protocol/lufa/descriptor.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 526:../../tmk_core/protocol/lufa/descriptor.c ****                                     const uint8_t wIndex,
 527:../../tmk_core/protocol/lufa/descriptor.c ****                                     const void** const DescriptorAddress)
 528:../../tmk_core/protocol/lufa/descriptor.c **** {
  16               		.loc 1 528 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 529:../../tmk_core/protocol/lufa/descriptor.c ****     const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 529 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 530:../../tmk_core/protocol/lufa/descriptor.c ****     const uint8_t  DescriptorIndex  = (wValue & 0xFF);
 531:../../tmk_core/protocol/lufa/descriptor.c **** 
 532:../../tmk_core/protocol/lufa/descriptor.c ****     const void* Address = NULL;
 533:../../tmk_core/protocol/lufa/descriptor.c ****     uint16_t    Size    = NO_DESCRIPTOR;
 534:../../tmk_core/protocol/lufa/descriptor.c **** 
 535:../../tmk_core/protocol/lufa/descriptor.c ****     switch (DescriptorType)
  26               		.loc 1 535 0
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 00F4      		brsh .L4
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F0      		breq .L5
  34 0012 2230      		cpi r18,2
  35 0014 3105      		cpc r19,__zero_reg__
  36 0016 01F0      		breq .L6
  37               	.LVL1:
  38               	.L15:
  39 0018 80E0      		ldi r24,0
  40 001a 90E0      		ldi r25,0
  41 001c 20E0      		ldi r18,0
  42 001e 30E0      		ldi r19,0
  43 0020 00C0      		rjmp .L2
  44               	.LVL2:
  45               	.L4:
  46 0022 2132      		cpi r18,33
  47 0024 3105      		cpc r19,__zero_reg__
  48 0026 01F0      		breq .L7
  49 0028 2232      		cpi r18,34
  50 002a 3105      		cpc r19,__zero_reg__
  51 002c 01F4      		brne .L15
  52 002e 6530      		cpi r22,lo8(5)
  53 0030 00F4      		brsh .L15
  54 0032 70E0      		ldi r23,0
  55 0034 FB01      		movw r30,r22
  56 0036 EE0F      		lsl r30
  57 0038 FF1F      		rol r31
  58               	.LVL3:
  59 003a E050      		subi r30,lo8(-(CSWTCH.2))
  60 003c F040      		sbci r31,hi8(-(CSWTCH.2))
  61 003e 2081      		ld r18,Z
  62 0040 3181      		ldd r19,Z+1
  63 0042 6050      		subi r22,lo8(-(CSWTCH.3))
  64 0044 7040      		sbci r23,hi8(-(CSWTCH.3))
  65               	.LVL4:
  66 0046 FB01      		movw r30,r22
  67 0048 8081      		ld r24,Z
  68 004a 90E0      		ldi r25,0
  69 004c 00C0      		rjmp .L2
  70               	.LVL5:
  71               	.L5:
 536:../../tmk_core/protocol/lufa/descriptor.c ****     {
 537:../../tmk_core/protocol/lufa/descriptor.c ****         case DTYPE_Device:
 538:../../tmk_core/protocol/lufa/descriptor.c ****             Address = &DeviceDescriptor;
 539:../../tmk_core/protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
  72               		.loc 1 539 0
  73 004e 82E1      		ldi r24,lo8(18)
  74 0050 90E0      		ldi r25,0
  75               	.LVL6:
 538:../../tmk_core/protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
  76               		.loc 1 538 0
  77 0052 20E0      		ldi r18,lo8(DeviceDescriptor)
  78 0054 30E0      		ldi r19,hi8(DeviceDescriptor)
  79               	.LVL7:
  80               	.L2:
 540:../../tmk_core/protocol/lufa/descriptor.c ****             break;
 541:../../tmk_core/protocol/lufa/descriptor.c ****         case DTYPE_Configuration:
 542:../../tmk_core/protocol/lufa/descriptor.c ****             Address = &ConfigurationDescriptor;
 543:../../tmk_core/protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 544:../../tmk_core/protocol/lufa/descriptor.c ****             break;
 545:../../tmk_core/protocol/lufa/descriptor.c ****         case DTYPE_String:
 546:../../tmk_core/protocol/lufa/descriptor.c ****             switch (DescriptorIndex )
 547:../../tmk_core/protocol/lufa/descriptor.c ****             {
 548:../../tmk_core/protocol/lufa/descriptor.c ****                 case 0x00:
 549:../../tmk_core/protocol/lufa/descriptor.c ****                     Address = &LanguageString;
 550:../../tmk_core/protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 551:../../tmk_core/protocol/lufa/descriptor.c ****                     break;
 552:../../tmk_core/protocol/lufa/descriptor.c ****                 case 0x01:
 553:../../tmk_core/protocol/lufa/descriptor.c ****                     Address = &ManufacturerString;
 554:../../tmk_core/protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 555:../../tmk_core/protocol/lufa/descriptor.c ****                     break;
 556:../../tmk_core/protocol/lufa/descriptor.c ****                 case 0x02:
 557:../../tmk_core/protocol/lufa/descriptor.c ****                     Address = &ProductString;
 558:../../tmk_core/protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 559:../../tmk_core/protocol/lufa/descriptor.c ****                     break;
 560:../../tmk_core/protocol/lufa/descriptor.c ****             }
 561:../../tmk_core/protocol/lufa/descriptor.c ****             break;
 562:../../tmk_core/protocol/lufa/descriptor.c ****         case HID_DTYPE_HID:
 563:../../tmk_core/protocol/lufa/descriptor.c ****             switch (wIndex) {
 564:../../tmk_core/protocol/lufa/descriptor.c ****             case KEYBOARD_INTERFACE:
 565:../../tmk_core/protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Keyboard_HID;
 566:../../tmk_core/protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 567:../../tmk_core/protocol/lufa/descriptor.c ****                 break;
 568:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
 569:../../tmk_core/protocol/lufa/descriptor.c ****             case MOUSE_INTERFACE:
 570:../../tmk_core/protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Mouse_HID;
 571:../../tmk_core/protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 572:../../tmk_core/protocol/lufa/descriptor.c ****                 break;
 573:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 574:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 575:../../tmk_core/protocol/lufa/descriptor.c ****             case EXTRAKEY_INTERFACE:
 576:../../tmk_core/protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Extrakey_HID;
 577:../../tmk_core/protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 578:../../tmk_core/protocol/lufa/descriptor.c ****                 break;
 579:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 580:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 581:../../tmk_core/protocol/lufa/descriptor.c ****             case CONSOLE_INTERFACE:
 582:../../tmk_core/protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Console_HID;
 583:../../tmk_core/protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 584:../../tmk_core/protocol/lufa/descriptor.c ****                 break;
 585:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 586:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 587:../../tmk_core/protocol/lufa/descriptor.c ****             case NKRO_INTERFACE:
 588:../../tmk_core/protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.NKRO_HID;
 589:../../tmk_core/protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 590:../../tmk_core/protocol/lufa/descriptor.c ****                 break;
 591:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 592:../../tmk_core/protocol/lufa/descriptor.c ****             }
 593:../../tmk_core/protocol/lufa/descriptor.c ****             break;
 594:../../tmk_core/protocol/lufa/descriptor.c ****         case HID_DTYPE_Report:
 595:../../tmk_core/protocol/lufa/descriptor.c ****             switch (wIndex) {
 596:../../tmk_core/protocol/lufa/descriptor.c ****             case KEYBOARD_INTERFACE:
 597:../../tmk_core/protocol/lufa/descriptor.c ****                 Address = &KeyboardReport;
 598:../../tmk_core/protocol/lufa/descriptor.c ****                 Size    = sizeof(KeyboardReport);
 599:../../tmk_core/protocol/lufa/descriptor.c ****                 break;
 600:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
 601:../../tmk_core/protocol/lufa/descriptor.c ****             case MOUSE_INTERFACE:
 602:../../tmk_core/protocol/lufa/descriptor.c ****                 Address = &MouseReport;
 603:../../tmk_core/protocol/lufa/descriptor.c ****                 Size    = sizeof(MouseReport);
 604:../../tmk_core/protocol/lufa/descriptor.c ****                 break;
 605:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 606:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 607:../../tmk_core/protocol/lufa/descriptor.c ****             case EXTRAKEY_INTERFACE:
 608:../../tmk_core/protocol/lufa/descriptor.c ****                 Address = &ExtrakeyReport;
 609:../../tmk_core/protocol/lufa/descriptor.c ****                 Size    = sizeof(ExtrakeyReport);
 610:../../tmk_core/protocol/lufa/descriptor.c ****                 break;
 611:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 612:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 613:../../tmk_core/protocol/lufa/descriptor.c ****             case CONSOLE_INTERFACE:
 614:../../tmk_core/protocol/lufa/descriptor.c ****                 Address = &ConsoleReport;
 615:../../tmk_core/protocol/lufa/descriptor.c ****                 Size    = sizeof(ConsoleReport);
 616:../../tmk_core/protocol/lufa/descriptor.c ****                 break;
 617:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 618:../../tmk_core/protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 619:../../tmk_core/protocol/lufa/descriptor.c ****             case NKRO_INTERFACE:
 620:../../tmk_core/protocol/lufa/descriptor.c ****                 Address = &NKROReport;
 621:../../tmk_core/protocol/lufa/descriptor.c ****                 Size    = sizeof(NKROReport);
 622:../../tmk_core/protocol/lufa/descriptor.c ****                 break;
 623:../../tmk_core/protocol/lufa/descriptor.c **** #endif
 624:../../tmk_core/protocol/lufa/descriptor.c ****             }
 625:../../tmk_core/protocol/lufa/descriptor.c ****             break;
 626:../../tmk_core/protocol/lufa/descriptor.c ****     }
 627:../../tmk_core/protocol/lufa/descriptor.c **** 
 628:../../tmk_core/protocol/lufa/descriptor.c ****     *DescriptorAddress = Address;
  81               		.loc 1 628 0
  82 0056 FA01      		movw r30,r20
  83 0058 3183      		std Z+1,r19
  84 005a 2083      		st Z,r18
 629:../../tmk_core/protocol/lufa/descriptor.c ****     return Size;
 630:../../tmk_core/protocol/lufa/descriptor.c **** }
  85               		.loc 1 630 0
  86 005c 0895      		ret
  87               	.LVL8:
  88               	.L6:
 543:../../tmk_core/protocol/lufa/descriptor.c ****             break;
  89               		.loc 1 543 0
  90 005e 8DE8      		ldi r24,lo8(-115)
  91 0060 90E0      		ldi r25,0
  92               	.LVL9:
 542:../../tmk_core/protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  93               		.loc 1 542 0
  94 0062 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  95 0064 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 544:../../tmk_core/protocol/lufa/descriptor.c ****         case DTYPE_String:
  96               		.loc 1 544 0
  97 0066 00C0      		rjmp .L2
  98               	.LVL10:
  99               	.L3:
 546:../../tmk_core/protocol/lufa/descriptor.c ****             {
 100               		.loc 1 546 0
 101 0068 9927      		clr r25
 102               	.LVL11:
 103 006a 8130      		cpi r24,1
 104 006c 9105      		cpc r25,__zero_reg__
 105 006e 01F0      		breq .L9
 106 0070 00F0      		brlo .L10
 107 0072 0297      		sbiw r24,2
 108 0074 01F4      		brne .L15
 109               	.LVL12:
 110               	.LBB2:
 558:../../tmk_core/protocol/lufa/descriptor.c ****                     break;
 111               		.loc 1 558 0
 112 0076 E0E0      		ldi r30,lo8(ProductString)
 113 0078 F0E0      		ldi r31,hi8(ProductString)
 114 007a 00C0      		rjmp .L17
 115               	.LVL13:
 116               	.L10:
 117               	.LBE2:
 118               	.LBB3:
 550:../../tmk_core/protocol/lufa/descriptor.c ****                     break;
 119               		.loc 1 550 0
 120 007c E0E0      		ldi r30,lo8(LanguageString)
 121 007e F0E0      		ldi r31,hi8(LanguageString)
 122               	.LVL14:
 123               	.L17:
 124               	.LBE3:
 125               	.LBB4:
 558:../../tmk_core/protocol/lufa/descriptor.c ****                     break;
 126               		.loc 1 558 0
 127               	/* #APP */
 128               	 ;  558 "../../tmk_core/protocol/lufa/descriptor.c" 1
 129 0080 8491      		lpm r24, Z
 130               		
 131               	 ;  0 "" 2
 132               	.LVL15:
 133               	/* #NOAPP */
 134               	.LBE4:
 135 0082 90E0      		ldi r25,0
 136               	.LVL16:
 557:../../tmk_core/protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 137               		.loc 1 557 0
 138 0084 9F01      		movw r18,r30
 559:../../tmk_core/protocol/lufa/descriptor.c ****             }
 139               		.loc 1 559 0
 140 0086 00C0      		rjmp .L2
 141               	.LVL17:
 142               	.L9:
 143               	.LBB5:
 554:../../tmk_core/protocol/lufa/descriptor.c ****                     break;
 144               		.loc 1 554 0
 145 0088 E0E0      		ldi r30,lo8(ManufacturerString)
 146 008a F0E0      		ldi r31,hi8(ManufacturerString)
 147 008c 00C0      		rjmp .L17
 148               	.LVL18:
 149               	.L7:
 150 008e 6530      		cpi r22,lo8(5)
 151 0090 00F0      		brlo .+2
 152 0092 00C0      		rjmp .L15
 153 0094 E62F      		mov r30,r22
 154 0096 F0E0      		ldi r31,0
 155 0098 EE0F      		lsl r30
 156 009a FF1F      		rol r31
 157 009c E050      		subi r30,lo8(-(CSWTCH.1))
 158 009e F040      		sbci r31,hi8(-(CSWTCH.1))
 159 00a0 2081      		ld r18,Z
 160 00a2 3181      		ldd r19,Z+1
 161               	.LBE5:
 162 00a4 89E0      		ldi r24,lo8(9)
 163 00a6 90E0      		ldi r25,0
 164               	.LVL19:
 165 00a8 00C0      		rjmp .L2
 166               		.cfi_endproc
 167               	.LFE100:
 169               		.section	.rodata.CSWTCH.3,"a",@progbits
 172               	CSWTCH.3:
 173 0000 40        		.byte	64
 174 0001 4D        		.byte	77
 175 0002 36        		.byte	54
 176 0003 22        		.byte	34
 177 0004 39        		.byte	57
 178               		.section	.rodata.CSWTCH.2,"a",@progbits
 181               	CSWTCH.2:
 182 0000 0000      		.word	KeyboardReport
 183 0002 0000      		.word	MouseReport
 184 0004 0000      		.word	ExtrakeyReport
 185 0006 0000      		.word	ConsoleReport
 186 0008 0000      		.word	NKROReport
 187               		.section	.rodata.CSWTCH.1,"a",@progbits
 190               	CSWTCH.1:
 191 0000 0000      		.word	ConfigurationDescriptor+18
 192 0002 0000      		.word	ConfigurationDescriptor+43
 193 0004 0000      		.word	ConfigurationDescriptor+68
 194 0006 0000      		.word	ConfigurationDescriptor+93
 195 0008 0000      		.word	ConfigurationDescriptor+125
 196               	.global	ProductString
 197               		.section	.progmem.data.ProductString,"a",@progbits
 200               	ProductString:
 201 0000 0A        		.byte	10
 202 0001 03        		.byte	3
 203 0002 4700      		.string	"G"
 204 0004 4800      		.string	"H"
 205 0006 3600      		.string	"6"
 206 0008 3000      		.string	"0"
 207 000a 00        		.string	""
 208 000b 00        		.string	""
 209               	.global	ManufacturerString
 210               		.section	.progmem.data.ManufacturerString,"a",@progbits
 213               	ManufacturerString:
 214 0000 12        		.byte	18
 215 0001 03        		.byte	3
 216 0002 6700      		.string	"g"
 217 0004 6500      		.string	"e"
 218 0006 6500      		.string	"e"
 219 0008 6B00      		.string	"k"
 220 000a 6800      		.string	"h"
 221 000c 6100      		.string	"a"
 222 000e 6300      		.string	"c"
 223 0010 6B00      		.string	"k"
 224 0012 00        		.string	""
 225 0013 00        		.string	""
 226               	.global	LanguageString
 227               		.section	.progmem.data.LanguageString,"a",@progbits
 230               	LanguageString:
 231 0000 04        		.byte	4
 232 0001 03        		.byte	3
 233 0002 0904      		.word	1033
 234               	.global	ConfigurationDescriptor
 235               		.section	.progmem.data.ConfigurationDescriptor,"a",@progbits
 238               	ConfigurationDescriptor:
 239 0000 09        		.byte	9
 240 0001 02        		.byte	2
 241 0002 8D00      		.word	141
 242 0004 05        		.byte	5
 243 0005 01        		.byte	1
 244 0006 00        		.byte	0
 245 0007 A0        		.byte	-96
 246 0008 32        		.byte	50
 247 0009 09        		.byte	9
 248 000a 04        		.byte	4
 249 000b 00        		.byte	0
 250 000c 00        		.byte	0
 251 000d 01        		.byte	1
 252 000e 03        		.byte	3
 253 000f 01        		.byte	1
 254 0010 01        		.byte	1
 255 0011 00        		.byte	0
 256 0012 09        		.byte	9
 257 0013 21        		.byte	33
 258 0014 1101      		.word	273
 259 0016 00        		.byte	0
 260 0017 01        		.byte	1
 261 0018 22        		.byte	34
 262 0019 4000      		.word	64
 263 001b 07        		.byte	7
 264 001c 05        		.byte	5
 265 001d 81        		.byte	-127
 266 001e 03        		.byte	3
 267 001f 0800      		.word	8
 268 0021 0A        		.byte	10
 269 0022 09        		.byte	9
 270 0023 04        		.byte	4
 271 0024 01        		.byte	1
 272 0025 00        		.byte	0
 273 0026 01        		.byte	1
 274 0027 03        		.byte	3
 275 0028 01        		.byte	1
 276 0029 02        		.byte	2
 277 002a 00        		.byte	0
 278 002b 09        		.byte	9
 279 002c 21        		.byte	33
 280 002d 1101      		.word	273
 281 002f 00        		.byte	0
 282 0030 01        		.byte	1
 283 0031 22        		.byte	34
 284 0032 4D00      		.word	77
 285 0034 07        		.byte	7
 286 0035 05        		.byte	5
 287 0036 82        		.byte	-126
 288 0037 03        		.byte	3
 289 0038 0800      		.word	8
 290 003a 0A        		.byte	10
 291 003b 09        		.byte	9
 292 003c 04        		.byte	4
 293 003d 02        		.byte	2
 294 003e 00        		.byte	0
 295 003f 01        		.byte	1
 296 0040 03        		.byte	3
 297 0041 00        		.byte	0
 298 0042 00        		.byte	0
 299 0043 00        		.byte	0
 300 0044 09        		.byte	9
 301 0045 21        		.byte	33
 302 0046 1101      		.word	273
 303 0048 00        		.byte	0
 304 0049 01        		.byte	1
 305 004a 22        		.byte	34
 306 004b 3600      		.word	54
 307 004d 07        		.byte	7
 308 004e 05        		.byte	5
 309 004f 83        		.byte	-125
 310 0050 03        		.byte	3
 311 0051 0800      		.word	8
 312 0053 0A        		.byte	10
 313 0054 09        		.byte	9
 314 0055 04        		.byte	4
 315 0056 03        		.byte	3
 316 0057 00        		.byte	0
 317 0058 02        		.byte	2
 318 0059 03        		.byte	3
 319 005a 00        		.byte	0
 320 005b 00        		.byte	0
 321 005c 00        		.byte	0
 322 005d 09        		.byte	9
 323 005e 21        		.byte	33
 324 005f 1101      		.word	273
 325 0061 00        		.byte	0
 326 0062 01        		.byte	1
 327 0063 22        		.byte	34
 328 0064 2200      		.word	34
 329 0066 07        		.byte	7
 330 0067 05        		.byte	5
 331 0068 84        		.byte	-124
 332 0069 03        		.byte	3
 333 006a 2000      		.word	32
 334 006c 01        		.byte	1
 335 006d 07        		.byte	7
 336 006e 05        		.byte	5
 337 006f 04        		.byte	4
 338 0070 03        		.byte	3
 339 0071 2000      		.word	32
 340 0073 01        		.byte	1
 341 0074 09        		.byte	9
 342 0075 04        		.byte	4
 343 0076 04        		.byte	4
 344 0077 00        		.byte	0
 345 0078 01        		.byte	1
 346 0079 03        		.byte	3
 347 007a 00        		.byte	0
 348 007b 00        		.byte	0
 349 007c 00        		.byte	0
 350 007d 09        		.byte	9
 351 007e 21        		.byte	33
 352 007f 1101      		.word	273
 353 0081 00        		.byte	0
 354 0082 01        		.byte	1
 355 0083 22        		.byte	34
 356 0084 3900      		.word	57
 357 0086 07        		.byte	7
 358 0087 05        		.byte	5
 359 0088 85        		.byte	-123
 360 0089 03        		.byte	3
 361 008a 2000      		.word	32
 362 008c 01        		.byte	1
 363               	.global	DeviceDescriptor
 364               		.section	.progmem.data.DeviceDescriptor,"a",@progbits
 367               	DeviceDescriptor:
 368 0000 12        		.byte	18
 369 0001 01        		.byte	1
 370 0002 1001      		.word	272
 371 0004 00        		.byte	0
 372 0005 00        		.byte	0
 373 0006 00        		.byte	0
 374 0007 08        		.byte	8
 375 0008 EDFE      		.word	-275
 376 000a 6060      		.word	24672
 377 000c 0100      		.word	1
 378 000e 01        		.byte	1
 379 000f 02        		.byte	2
 380 0010 00        		.byte	0
 381 0011 01        		.byte	1
 382               	.global	NKROReport
 383               		.section	.progmem.data.NKROReport,"a",@progbits
 386               	NKROReport:
 387 0000 05        		.byte	5
 388 0001 01        		.byte	1
 389 0002 09        		.byte	9
 390 0003 06        		.byte	6
 391 0004 A1        		.byte	-95
 392 0005 01        		.byte	1
 393 0006 05        		.byte	5
 394 0007 07        		.byte	7
 395 0008 19        		.byte	25
 396 0009 E0        		.byte	-32
 397 000a 29        		.byte	41
 398 000b E7        		.byte	-25
 399 000c 15        		.byte	21
 400 000d 00        		.byte	0
 401 000e 25        		.byte	37
 402 000f 01        		.byte	1
 403 0010 95        		.byte	-107
 404 0011 08        		.byte	8
 405 0012 75        		.byte	117
 406 0013 01        		.byte	1
 407 0014 81        		.byte	-127
 408 0015 02        		.byte	2
 409 0016 05        		.byte	5
 410 0017 08        		.byte	8
 411 0018 19        		.byte	25
 412 0019 01        		.byte	1
 413 001a 29        		.byte	41
 414 001b 05        		.byte	5
 415 001c 95        		.byte	-107
 416 001d 05        		.byte	5
 417 001e 75        		.byte	117
 418 001f 01        		.byte	1
 419 0020 91        		.byte	-111
 420 0021 02        		.byte	2
 421 0022 95        		.byte	-107
 422 0023 01        		.byte	1
 423 0024 75        		.byte	117
 424 0025 03        		.byte	3
 425 0026 91        		.byte	-111
 426 0027 01        		.byte	1
 427 0028 05        		.byte	5
 428 0029 07        		.byte	7
 429 002a 19        		.byte	25
 430 002b 00        		.byte	0
 431 002c 29        		.byte	41
 432 002d F7        		.byte	-9
 433 002e 15        		.byte	21
 434 002f 00        		.byte	0
 435 0030 25        		.byte	37
 436 0031 01        		.byte	1
 437 0032 95        		.byte	-107
 438 0033 F8        		.byte	-8
 439 0034 75        		.byte	117
 440 0035 01        		.byte	1
 441 0036 81        		.byte	-127
 442 0037 02        		.byte	2
 443 0038 C0        		.byte	-64
 444               	.global	ConsoleReport
 445               		.section	.progmem.data.ConsoleReport,"a",@progbits
 448               	ConsoleReport:
 449 0000 06        		.byte	6
 450 0001 31        		.byte	49
 451 0002 FF        		.byte	-1
 452 0003 09        		.byte	9
 453 0004 74        		.byte	116
 454 0005 A1        		.byte	-95
 455 0006 01        		.byte	1
 456 0007 09        		.byte	9
 457 0008 75        		.byte	117
 458 0009 15        		.byte	21
 459 000a 00        		.byte	0
 460 000b 26        		.byte	38
 461 000c FF        		.byte	-1
 462 000d 00        		.byte	0
 463 000e 95        		.byte	-107
 464 000f 20        		.byte	32
 465 0010 75        		.byte	117
 466 0011 08        		.byte	8
 467 0012 81        		.byte	-127
 468 0013 02        		.byte	2
 469 0014 09        		.byte	9
 470 0015 76        		.byte	118
 471 0016 15        		.byte	21
 472 0017 00        		.byte	0
 473 0018 26        		.byte	38
 474 0019 FF        		.byte	-1
 475 001a 00        		.byte	0
 476 001b 95        		.byte	-107
 477 001c 20        		.byte	32
 478 001d 75        		.byte	117
 479 001e 08        		.byte	8
 480 001f 91        		.byte	-111
 481 0020 02        		.byte	2
 482 0021 C0        		.byte	-64
 483               	.global	ExtrakeyReport
 484               		.section	.progmem.data.ExtrakeyReport,"a",@progbits
 487               	ExtrakeyReport:
 488 0000 05        		.byte	5
 489 0001 01        		.byte	1
 490 0002 09        		.byte	9
 491 0003 80        		.byte	-128
 492 0004 A1        		.byte	-95
 493 0005 01        		.byte	1
 494 0006 85        		.byte	-123
 495 0007 02        		.byte	2
 496 0008 16        		.byte	22
 497 0009 81        		.byte	-127
 498 000a 00        		.byte	0
 499 000b 26        		.byte	38
 500 000c B7        		.byte	-73
 501 000d 00        		.byte	0
 502 000e 1A        		.byte	26
 503 000f 81        		.byte	-127
 504 0010 00        		.byte	0
 505 0011 2A        		.byte	42
 506 0012 B7        		.byte	-73
 507 0013 00        		.byte	0
 508 0014 75        		.byte	117
 509 0015 10        		.byte	16
 510 0016 95        		.byte	-107
 511 0017 01        		.byte	1
 512 0018 81        		.byte	-127
 513 0019 00        		.byte	0
 514 001a C0        		.byte	-64
 515 001b 05        		.byte	5
 516 001c 0C        		.byte	12
 517 001d 09        		.byte	9
 518 001e 01        		.byte	1
 519 001f A1        		.byte	-95
 520 0020 01        		.byte	1
 521 0021 85        		.byte	-123
 522 0022 03        		.byte	3
 523 0023 16        		.byte	22
 524 0024 01        		.byte	1
 525 0025 00        		.byte	0
 526 0026 26        		.byte	38
 527 0027 9C        		.byte	-100
 528 0028 02        		.byte	2
 529 0029 1A        		.byte	26
 530 002a 01        		.byte	1
 531 002b 00        		.byte	0
 532 002c 2A        		.byte	42
 533 002d 9C        		.byte	-100
 534 002e 02        		.byte	2
 535 002f 75        		.byte	117
 536 0030 10        		.byte	16
 537 0031 95        		.byte	-107
 538 0032 01        		.byte	1
 539 0033 81        		.byte	-127
 540 0034 00        		.byte	0
 541 0035 C0        		.byte	-64
 542               	.global	MouseReport
 543               		.section	.progmem.data.MouseReport,"a",@progbits
 546               	MouseReport:
 547 0000 05        		.byte	5
 548 0001 01        		.byte	1
 549 0002 09        		.byte	9
 550 0003 02        		.byte	2
 551 0004 A1        		.byte	-95
 552 0005 01        		.byte	1
 553 0006 09        		.byte	9
 554 0007 01        		.byte	1
 555 0008 A1        		.byte	-95
 556 0009 00        		.byte	0
 557 000a 05        		.byte	5
 558 000b 09        		.byte	9
 559 000c 19        		.byte	25
 560 000d 01        		.byte	1
 561 000e 29        		.byte	41
 562 000f 05        		.byte	5
 563 0010 15        		.byte	21
 564 0011 00        		.byte	0
 565 0012 25        		.byte	37
 566 0013 01        		.byte	1
 567 0014 95        		.byte	-107
 568 0015 05        		.byte	5
 569 0016 75        		.byte	117
 570 0017 01        		.byte	1
 571 0018 81        		.byte	-127
 572 0019 02        		.byte	2
 573 001a 95        		.byte	-107
 574 001b 01        		.byte	1
 575 001c 75        		.byte	117
 576 001d 03        		.byte	3
 577 001e 81        		.byte	-127
 578 001f 01        		.byte	1
 579 0020 05        		.byte	5
 580 0021 01        		.byte	1
 581 0022 09        		.byte	9
 582 0023 30        		.byte	48
 583 0024 09        		.byte	9
 584 0025 31        		.byte	49
 585 0026 15        		.byte	21
 586 0027 81        		.byte	-127
 587 0028 25        		.byte	37
 588 0029 7F        		.byte	127
 589 002a 95        		.byte	-107
 590 002b 02        		.byte	2
 591 002c 75        		.byte	117
 592 002d 08        		.byte	8
 593 002e 81        		.byte	-127
 594 002f 06        		.byte	6
 595 0030 09        		.byte	9
 596 0031 38        		.byte	56
 597 0032 15        		.byte	21
 598 0033 81        		.byte	-127
 599 0034 25        		.byte	37
 600 0035 7F        		.byte	127
 601 0036 95        		.byte	-107
 602 0037 01        		.byte	1
 603 0038 75        		.byte	117
 604 0039 08        		.byte	8
 605 003a 81        		.byte	-127
 606 003b 06        		.byte	6
 607 003c 05        		.byte	5
 608 003d 0C        		.byte	12
 609 003e 0A        		.byte	10
 610 003f 38        		.byte	56
 611 0040 02        		.byte	2
 612 0041 15        		.byte	21
 613 0042 81        		.byte	-127
 614 0043 25        		.byte	37
 615 0044 7F        		.byte	127
 616 0045 95        		.byte	-107
 617 0046 01        		.byte	1
 618 0047 75        		.byte	117
 619 0048 08        		.byte	8
 620 0049 81        		.byte	-127
 621 004a 06        		.byte	6
 622 004b C0        		.byte	-64
 623 004c C0        		.byte	-64
 624               	.global	KeyboardReport
 625               		.section	.progmem.data.KeyboardReport,"a",@progbits
 628               	KeyboardReport:
 629 0000 05        		.byte	5
 630 0001 01        		.byte	1
 631 0002 09        		.byte	9
 632 0003 06        		.byte	6
 633 0004 A1        		.byte	-95
 634 0005 01        		.byte	1
 635 0006 05        		.byte	5
 636 0007 07        		.byte	7
 637 0008 19        		.byte	25
 638 0009 E0        		.byte	-32
 639 000a 29        		.byte	41
 640 000b E7        		.byte	-25
 641 000c 15        		.byte	21
 642 000d 00        		.byte	0
 643 000e 25        		.byte	37
 644 000f 01        		.byte	1
 645 0010 95        		.byte	-107
 646 0011 08        		.byte	8
 647 0012 75        		.byte	117
 648 0013 01        		.byte	1
 649 0014 81        		.byte	-127
 650 0015 02        		.byte	2
 651 0016 95        		.byte	-107
 652 0017 01        		.byte	1
 653 0018 75        		.byte	117
 654 0019 08        		.byte	8
 655 001a 81        		.byte	-127
 656 001b 01        		.byte	1
 657 001c 05        		.byte	5
 658 001d 08        		.byte	8
 659 001e 19        		.byte	25
 660 001f 01        		.byte	1
 661 0020 29        		.byte	41
 662 0021 05        		.byte	5
 663 0022 95        		.byte	-107
 664 0023 05        		.byte	5
 665 0024 75        		.byte	117
 666 0025 01        		.byte	1
 667 0026 91        		.byte	-111
 668 0027 02        		.byte	2
 669 0028 95        		.byte	-107
 670 0029 01        		.byte	1
 671 002a 75        		.byte	117
 672 002b 03        		.byte	3
 673 002c 91        		.byte	-111
 674 002d 01        		.byte	1
 675 002e 05        		.byte	5
 676 002f 07        		.byte	7
 677 0030 19        		.byte	25
 678 0031 00        		.byte	0
 679 0032 29        		.byte	41
 680 0033 FF        		.byte	-1
 681 0034 15        		.byte	21
 682 0035 00        		.byte	0
 683 0036 26        		.byte	38
 684 0037 FF        		.byte	-1
 685 0038 00        		.byte	0
 686 0039 95        		.byte	-107
 687 003a 06        		.byte	6
 688 003b 75        		.byte	117
 689 003c 08        		.byte	8
 690 003d 81        		.byte	-127
 691 003e 00        		.byte	0
 692 003f C0        		.byte	-64
 693               		.text
 694               	.Letext0:
 695               		.file 2 "/usr/avr/include/stdint.h"
 696               		.file 3 "/usr/lib/gcc/avr/6.2.0/include/stddef.h"
 697               		.file 4 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 698               		.file 5 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 699               		.file 6 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 700               		.file 7 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 701               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 702               		.file 9 "/usr/avr/include/stdio.h"
 703               		.file 10 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCo
 704               		.file 11 "../../tmk_core/protocol/lufa/descriptor.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 descriptor.c
     /tmp/ccwbh2qu.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccwbh2qu.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccwbh2qu.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccwbh2qu.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccwbh2qu.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccwbh2qu.s:13     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
     /tmp/ccwbh2qu.s:181    .rodata.CSWTCH.2:0000000000000000 CSWTCH.2
     /tmp/ccwbh2qu.s:172    .rodata.CSWTCH.3:0000000000000000 CSWTCH.3
     /tmp/ccwbh2qu.s:367    .progmem.data.DeviceDescriptor:0000000000000000 DeviceDescriptor
     /tmp/ccwbh2qu.s:238    .progmem.data.ConfigurationDescriptor:0000000000000000 ConfigurationDescriptor
     /tmp/ccwbh2qu.s:200    .progmem.data.ProductString:0000000000000000 ProductString
     /tmp/ccwbh2qu.s:230    .progmem.data.LanguageString:0000000000000000 LanguageString
     /tmp/ccwbh2qu.s:213    .progmem.data.ManufacturerString:0000000000000000 ManufacturerString
     /tmp/ccwbh2qu.s:190    .rodata.CSWTCH.1:0000000000000000 CSWTCH.1
     /tmp/ccwbh2qu.s:628    .progmem.data.KeyboardReport:0000000000000000 KeyboardReport
     /tmp/ccwbh2qu.s:546    .progmem.data.MouseReport:0000000000000000 MouseReport
     /tmp/ccwbh2qu.s:487    .progmem.data.ExtrakeyReport:0000000000000000 ExtrakeyReport
     /tmp/ccwbh2qu.s:448    .progmem.data.ConsoleReport:0000000000000000 ConsoleReport
     /tmp/ccwbh2qu.s:386    .progmem.data.NKROReport:0000000000000000 NKROReport

UNDEFINED SYMBOLS
__do_copy_data
