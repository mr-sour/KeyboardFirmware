   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB101:
  15               		.file 1 "../../tmk_core/common/action_util.c"
   1:../../tmk_core/common/action_util.c **** /*
   2:../../tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action_util.c **** 
   4:../../tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action_util.c **** (at your option) any later version.
   8:../../tmk_core/common/action_util.c **** 
   9:../../tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action_util.c **** 
  14:../../tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action_util.c **** */
  17:../../tmk_core/common/action_util.c **** #include "host.h"
  18:../../tmk_core/common/action_util.c **** #include "report.h"
  19:../../tmk_core/common/action_util.c **** #include "debug.h"
  20:../../tmk_core/common/action_util.c **** #include "action_util.h"
  21:../../tmk_core/common/action_util.c **** #include "timer.h"
  22:../../tmk_core/common/action_util.c **** 
  23:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../tmk_core/common/action_util.c **** #endif
  29:../../tmk_core/common/action_util.c **** 
  30:../../tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  31:../../tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../tmk_core/common/action_util.c **** 
  33:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  35:../../tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  36:../../tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  37:../../tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  38:../../tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  39:../../tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  40:../../tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  41:../../tmk_core/common/action_util.c **** #endif
  42:../../tmk_core/common/action_util.c **** 
  43:../../tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  44:../../tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  45:../../tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  46:../../tmk_core/common/action_util.c **** 
  47:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  48:../../tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  49:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  50:../../tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  51:../../tmk_core/common/action_util.c **** #endif
  52:../../tmk_core/common/action_util.c **** #endif
  53:../../tmk_core/common/action_util.c **** 
  54:../../tmk_core/common/action_util.c **** 
  55:../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
  57:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
  58:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  59:../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
  60:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  61:../../tmk_core/common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  62:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
  63:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  64:../../tmk_core/common/action_util.c ****         }
  65:../../tmk_core/common/action_util.c **** #endif
  66:../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  67:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
  68:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  69:../../tmk_core/common/action_util.c ****         }
  70:../../tmk_core/common/action_util.c ****     }
  71:../../tmk_core/common/action_util.c **** #endif
  72:../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
  73:../../tmk_core/common/action_util.c **** }
  74:../../tmk_core/common/action_util.c **** 
  75:../../tmk_core/common/action_util.c **** /* key */
  76:../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  77:../../tmk_core/common/action_util.c **** {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  78:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  79:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  23               		.loc 1 79 0
  24 0000 9091 0000 		lds r25,keyboard_protocol
  25 0004 9923      		tst r25
  26 0006 01F0      		breq .L2
  27               		.loc 1 79 0 is_stmt 0 discriminator 1
  28 0008 9091 0000 		lds r25,keyboard_nkro
  29 000c 9923      		tst r25
  30 000e 01F0      		breq .L2
  31               	.LVL1:
  32               	.LBB7:
  33               	.LBB8:
  80:../../tmk_core/common/action_util.c ****         add_key_bit(key);
  81:../../tmk_core/common/action_util.c ****         return;
  82:../../tmk_core/common/action_util.c ****     }
  83:../../tmk_core/common/action_util.c **** #endif
  84:../../tmk_core/common/action_util.c ****     add_key_byte(key);
  85:../../tmk_core/common/action_util.c **** }
  86:../../tmk_core/common/action_util.c **** 
  87:../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
  88:../../tmk_core/common/action_util.c **** {
  89:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  90:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  91:../../tmk_core/common/action_util.c ****         del_key_bit(key);
  92:../../tmk_core/common/action_util.c ****         return;
  93:../../tmk_core/common/action_util.c ****     }
  94:../../tmk_core/common/action_util.c **** #endif
  95:../../tmk_core/common/action_util.c ****     del_key_byte(key);
  96:../../tmk_core/common/action_util.c **** }
  97:../../tmk_core/common/action_util.c **** 
  98:../../tmk_core/common/action_util.c **** void clear_keys(void)
  99:../../tmk_core/common/action_util.c **** {
 100:../../tmk_core/common/action_util.c ****     // not clear mods
 101:../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 102:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 103:../../tmk_core/common/action_util.c ****     }
 104:../../tmk_core/common/action_util.c **** }
 105:../../tmk_core/common/action_util.c **** 
 106:../../tmk_core/common/action_util.c **** 
 107:../../tmk_core/common/action_util.c **** /* modifier */
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 113:../../tmk_core/common/action_util.c **** 
 114:../../tmk_core/common/action_util.c **** /* weak modifier */
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 120:../../tmk_core/common/action_util.c **** 
 121:../../tmk_core/common/action_util.c **** /* Oneshot modifier */
 122:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 123:../../tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 124:../../tmk_core/common/action_util.c **** {
 125:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 126:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:../../tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 128:../../tmk_core/common/action_util.c **** #endif
 129:../../tmk_core/common/action_util.c **** }
 130:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 131:../../tmk_core/common/action_util.c **** {
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 133:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 134:../../tmk_core/common/action_util.c ****     oneshot_time = 0;
 135:../../tmk_core/common/action_util.c **** #endif
 136:../../tmk_core/common/action_util.c **** }
 137:../../tmk_core/common/action_util.c **** #endif
 138:../../tmk_core/common/action_util.c **** 
 139:../../tmk_core/common/action_util.c **** 
 140:../../tmk_core/common/action_util.c **** 
 141:../../tmk_core/common/action_util.c **** 
 142:../../tmk_core/common/action_util.c **** /*
 143:../../tmk_core/common/action_util.c ****  * inspect keyboard state
 144:../../tmk_core/common/action_util.c ****  */
 145:../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 146:../../tmk_core/common/action_util.c **** {
 147:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 148:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 150:../../tmk_core/common/action_util.c ****             cnt++;
 151:../../tmk_core/common/action_util.c ****     }
 152:../../tmk_core/common/action_util.c ****     return cnt;
 153:../../tmk_core/common/action_util.c **** }
 154:../../tmk_core/common/action_util.c **** 
 155:../../tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 156:../../tmk_core/common/action_util.c **** {
 157:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 158:../../tmk_core/common/action_util.c **** }
 159:../../tmk_core/common/action_util.c **** 
 160:../../tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 161:../../tmk_core/common/action_util.c **** {
 162:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 163:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 164:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 166:../../tmk_core/common/action_util.c ****             ;
 167:../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 168:../../tmk_core/common/action_util.c ****     }
 169:../../tmk_core/common/action_util.c **** #endif
 170:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 171:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 172:../../tmk_core/common/action_util.c ****     do {
 173:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 174:../../tmk_core/common/action_util.c ****             break;
 175:../../tmk_core/common/action_util.c ****         }
 176:../../tmk_core/common/action_util.c ****         i = RO_INC(i);
 177:../../tmk_core/common/action_util.c ****     } while (i != cb_tail);
 178:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 179:../../tmk_core/common/action_util.c **** #else
 180:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 181:../../tmk_core/common/action_util.c **** #endif
 182:../../tmk_core/common/action_util.c **** }
 183:../../tmk_core/common/action_util.c **** 
 184:../../tmk_core/common/action_util.c **** 
 185:../../tmk_core/common/action_util.c **** 
 186:../../tmk_core/common/action_util.c **** /* local functions */
 187:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 188:../../tmk_core/common/action_util.c **** {
 189:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 190:../../tmk_core/common/action_util.c ****     int8_t i = cb_head;
 191:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 192:../../tmk_core/common/action_util.c ****     if (cb_count) {
 193:../../tmk_core/common/action_util.c ****         do {
 194:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 195:../../tmk_core/common/action_util.c ****                 return;
 196:../../tmk_core/common/action_util.c ****             }
 197:../../tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 198:../../tmk_core/common/action_util.c ****                 empty = i;
 199:../../tmk_core/common/action_util.c ****             }
 200:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 201:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 202:../../tmk_core/common/action_util.c ****         if (i == cb_tail) {
 203:../../tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 204:../../tmk_core/common/action_util.c ****                 // buffer is full
 205:../../tmk_core/common/action_util.c ****                 if (empty == -1) {
 206:../../tmk_core/common/action_util.c ****                     // pop head when has no empty space
 207:../../tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 208:../../tmk_core/common/action_util.c ****                     cb_count--;
 209:../../tmk_core/common/action_util.c ****                 }
 210:../../tmk_core/common/action_util.c ****                 else {
 211:../../tmk_core/common/action_util.c ****                     // left shift when has empty space
 212:../../tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 213:../../tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 214:../../tmk_core/common/action_util.c ****                     do {
 215:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 216:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 217:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 218:../../tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 219:../../tmk_core/common/action_util.c ****                         }
 220:../../tmk_core/common/action_util.c ****                         else {
 221:../../tmk_core/common/action_util.c ****                             offset++;
 222:../../tmk_core/common/action_util.c ****                         }
 223:../../tmk_core/common/action_util.c ****                         i = RO_INC(i);
 224:../../tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 225:../../tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 226:../../tmk_core/common/action_util.c ****                 }
 227:../../tmk_core/common/action_util.c ****             }
 228:../../tmk_core/common/action_util.c ****         }
 229:../../tmk_core/common/action_util.c ****     }
 230:../../tmk_core/common/action_util.c ****     // add to tail
 231:../../tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 232:../../tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 233:../../tmk_core/common/action_util.c ****     cb_count++;
 234:../../tmk_core/common/action_util.c **** #else
 235:../../tmk_core/common/action_util.c ****     int8_t i = 0;
 236:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 237:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 239:../../tmk_core/common/action_util.c ****             break;
 240:../../tmk_core/common/action_util.c ****         }
 241:../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 242:../../tmk_core/common/action_util.c ****             empty = i;
 243:../../tmk_core/common/action_util.c ****         }
 244:../../tmk_core/common/action_util.c ****     }
 245:../../tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 246:../../tmk_core/common/action_util.c ****         if (empty != -1) {
 247:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 248:../../tmk_core/common/action_util.c ****         }
 249:../../tmk_core/common/action_util.c ****     }
 250:../../tmk_core/common/action_util.c **** #endif
 251:../../tmk_core/common/action_util.c **** }
 252:../../tmk_core/common/action_util.c **** 
 253:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 254:../../tmk_core/common/action_util.c **** {
 255:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 256:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 257:../../tmk_core/common/action_util.c ****     if (cb_count) {
 258:../../tmk_core/common/action_util.c ****         do {
 259:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 260:../../tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 261:../../tmk_core/common/action_util.c ****                 cb_count--;
 262:../../tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 263:../../tmk_core/common/action_util.c ****                     // reset head and tail
 264:../../tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 265:../../tmk_core/common/action_util.c ****                 }
 266:../../tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 267:../../tmk_core/common/action_util.c ****                     // left shift when next to tail
 268:../../tmk_core/common/action_util.c ****                     do {
 269:../../tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 270:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 271:../../tmk_core/common/action_util.c ****                             break;
 272:../../tmk_core/common/action_util.c ****                         }
 273:../../tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 274:../../tmk_core/common/action_util.c ****                 }
 275:../../tmk_core/common/action_util.c ****                 break;
 276:../../tmk_core/common/action_util.c ****             }
 277:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 278:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 279:../../tmk_core/common/action_util.c ****     }
 280:../../tmk_core/common/action_util.c **** #else
 281:../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 283:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 284:../../tmk_core/common/action_util.c ****         }
 285:../../tmk_core/common/action_util.c ****     }
 286:../../tmk_core/common/action_util.c **** #endif
 287:../../tmk_core/common/action_util.c **** }
 288:../../tmk_core/common/action_util.c **** 
 289:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 290:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code)
 291:../../tmk_core/common/action_util.c **** {
 292:../../tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
  34               		.loc 1 292 0 is_stmt 1
  35 0010 982F      		mov r25,r24
  36 0012 9695      		lsr r25
  37 0014 9695      		lsr r25
  38 0016 9695      		lsr r25
  39 0018 9F31      		cpi r25,lo8(31)
  40 001a 01F0      		breq .L3
 293:../../tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
  41               		.loc 1 293 0
  42 001c E091 0000 		lds r30,keyboard_report
  43 0020 F091 0000 		lds r31,keyboard_report+1
  44 0024 E90F      		add r30,r25
  45 0026 F11D      		adc r31,__zero_reg__
  46 0028 8770      		andi r24,lo8(7)
  47               	.LVL2:
  48 002a 21E0      		ldi r18,lo8(1)
  49 002c 30E0      		ldi r19,0
  50 002e 00C0      		rjmp 2f
  51               		1:
  52 0030 220F      		lsl r18
  53               		2:
  54 0032 8A95      		dec r24
  55 0034 02F4      		brpl 1b
  56 0036 8181      		ldd r24,Z+1
  57 0038 822B      		or r24,r18
  58 003a 8183      		std Z+1,r24
  59 003c 0895      		ret
  60               	.LVL3:
  61               	.L3:
 294:../../tmk_core/common/action_util.c ****     } else {
 295:../../tmk_core/common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
  62               		.loc 1 295 0
  63 003e 9091 0000 		lds r25,debug_config
  64 0042 90FF      		sbrs r25,0
  65 0044 00C0      		rjmp .L1
  66 0046 1F92      		push __zero_reg__
  67               	.LCFI0:
  68               		.cfi_def_cfa_offset 3
  69 0048 8F93      		push r24
  70               	.LCFI1:
  71               		.cfi_def_cfa_offset 4
  72 004a 80E0      		ldi r24,lo8(__c.4697)
  73 004c 90E0      		ldi r25,hi8(__c.4697)
  74               	.LVL4:
  75 004e 9F93      		push r25
  76               	.LCFI2:
  77               		.cfi_def_cfa_offset 5
  78               	.LVL5:
  79 0050 8F93      		push r24
  80               	.LCFI3:
  81               		.cfi_def_cfa_offset 6
  82 0052 0E94 0000 		call __xprintf
  83               	.LVL6:
  84 0056 0F90      		pop __tmp_reg__
  85 0058 0F90      		pop __tmp_reg__
  86 005a 0F90      		pop __tmp_reg__
  87 005c 0F90      		pop __tmp_reg__
  88               	.LCFI4:
  89               		.cfi_def_cfa_offset 2
  90 005e 0895      		ret
  91               	.LVL7:
  92               	.L2:
  93               	.LBE8:
  94               	.LBE7:
  95               	.LBB9:
  96               	.LBB10:
 238:../../tmk_core/common/action_util.c ****             break;
  97               		.loc 1 238 0
  98 0060 2091 0000 		lds r18,keyboard_report
  99 0064 3091 0000 		lds r19,keyboard_report+1
 100 0068 F901      		movw r30,r18
 101 006a 3296      		adiw r30,2
 102 006c 9FEF      		ldi r25,lo8(-1)
 103 006e 40E0      		ldi r20,0
 104               	.L6:
 105               	.LVL8:
 106 0070 5191      		ld r21,Z+
 107 0072 8517      		cp r24,r21
 108 0074 01F0      		breq .L1
 241:../../tmk_core/common/action_util.c ****             empty = i;
 109               		.loc 1 241 0
 110 0076 9F3F      		cpi r25,lo8(-1)
 111 0078 01F4      		brne .L5
 112 007a 5111      		cpse r21,__zero_reg__
 113 007c 00C0      		rjmp .L5
 114 007e 942F      		mov r25,r20
 115               	.LVL9:
 116               	.L5:
 117 0080 4F5F      		subi r20,lo8(-(1))
 118               	.LVL10:
 237:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 119               		.loc 1 237 0
 120 0082 4E31      		cpi r20,lo8(30)
 121 0084 01F4      		brne .L6
 246:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 122               		.loc 1 246 0
 123 0086 9F3F      		cpi r25,lo8(-1)
 124 0088 01F4      		brne .L8
 125               	.LVL11:
 126               	.L1:
 127 008a 0895      		ret
 128               	.LVL12:
 129               	.L8:
 247:../../tmk_core/common/action_util.c ****         }
 130               		.loc 1 247 0
 131 008c 290F      		add r18,r25
 132 008e 311D      		adc r19,__zero_reg__
 133 0090 97FD      		sbrc r25,7
 134 0092 3A95      		dec r19
 135 0094 F901      		movw r30,r18
 136 0096 8283      		std Z+2,r24
 137 0098 0895      		ret
 138               	.LBE10:
 139               	.LBE9:
 140               		.cfi_endproc
 141               	.LFE101:
 143               		.section	.text.del_key,"ax",@progbits
 144               	.global	del_key
 146               	del_key:
 147               	.LFB102:
  88:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 148               		.loc 1 88 0
 149               		.cfi_startproc
 150               	.LVL13:
 151               	/* prologue: function */
 152               	/* frame size = 0 */
 153               	/* stack size = 0 */
 154               	.L__stack_usage = 0
  90:../../tmk_core/common/action_util.c ****         del_key_bit(key);
 155               		.loc 1 90 0
 156 0000 9091 0000 		lds r25,keyboard_protocol
 157 0004 9923      		tst r25
 158 0006 01F0      		breq .L22
  90:../../tmk_core/common/action_util.c ****         del_key_bit(key);
 159               		.loc 1 90 0 is_stmt 0 discriminator 1
 160 0008 9091 0000 		lds r25,keyboard_nkro
 161 000c 9923      		tst r25
 162 000e 01F0      		breq .L22
 163               	.LVL14:
 164               	.LBB17:
 165               	.LBB18:
 296:../../tmk_core/common/action_util.c ****     }
 297:../../tmk_core/common/action_util.c **** }
 298:../../tmk_core/common/action_util.c **** 
 299:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code)
 300:../../tmk_core/common/action_util.c **** {
 301:../../tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 166               		.loc 1 301 0 is_stmt 1
 167 0010 982F      		mov r25,r24
 168 0012 9695      		lsr r25
 169 0014 9695      		lsr r25
 170 0016 9695      		lsr r25
 171 0018 9F31      		cpi r25,lo8(31)
 172 001a 01F0      		breq .L23
 302:../../tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 173               		.loc 1 302 0
 174 001c E091 0000 		lds r30,keyboard_report
 175 0020 F091 0000 		lds r31,keyboard_report+1
 176 0024 E90F      		add r30,r25
 177 0026 F11D      		adc r31,__zero_reg__
 178 0028 282F      		mov r18,r24
 179 002a 2770      		andi r18,lo8(7)
 180 002c 81E0      		ldi r24,lo8(1)
 181 002e 90E0      		ldi r25,0
 182               	.LVL15:
 183 0030 00C0      		rjmp 2f
 184               		1:
 185 0032 880F      		lsl r24
 186               		2:
 187 0034 2A95      		dec r18
 188 0036 02F4      		brpl 1b
 189 0038 8095      		com r24
 190 003a 9181      		ldd r25,Z+1
 191 003c 8923      		and r24,r25
 192 003e 8183      		std Z+1,r24
 193 0040 0895      		ret
 194               	.LVL16:
 195               	.L23:
 303:../../tmk_core/common/action_util.c ****     } else {
 304:../../tmk_core/common/action_util.c ****         dprintf("del_key_bit: can't del: %02X\n", code);
 196               		.loc 1 304 0
 197 0042 9091 0000 		lds r25,debug_config
 198 0046 90FF      		sbrs r25,0
 199 0048 00C0      		rjmp .L21
 200 004a 1F92      		push __zero_reg__
 201               	.LCFI5:
 202               		.cfi_def_cfa_offset 3
 203 004c 8F93      		push r24
 204               	.LCFI6:
 205               		.cfi_def_cfa_offset 4
 206 004e 80E0      		ldi r24,lo8(__c.4702)
 207 0050 90E0      		ldi r25,hi8(__c.4702)
 208               	.LVL17:
 209 0052 9F93      		push r25
 210               	.LCFI7:
 211               		.cfi_def_cfa_offset 5
 212               	.LVL18:
 213 0054 8F93      		push r24
 214               	.LCFI8:
 215               		.cfi_def_cfa_offset 6
 216 0056 0E94 0000 		call __xprintf
 217               	.LVL19:
 218 005a 0F90      		pop __tmp_reg__
 219 005c 0F90      		pop __tmp_reg__
 220 005e 0F90      		pop __tmp_reg__
 221 0060 0F90      		pop __tmp_reg__
 222               	.LCFI9:
 223               		.cfi_def_cfa_offset 2
 224 0062 0895      		ret
 225               	.LVL20:
 226               	.L22:
 227               	.LBE18:
 228               	.LBE17:
 229               	.LBB19:
 230               	.LBB20:
 282:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 231               		.loc 1 282 0
 232 0064 2091 0000 		lds r18,keyboard_report
 233 0068 3091 0000 		lds r19,keyboard_report+1
 234 006c F901      		movw r30,r18
 235 006e 3296      		adiw r30,2
 236 0070 205E      		subi r18,-32
 237 0072 3F4F      		sbci r19,-1
 238               	.L27:
 239               	.LVL21:
 240 0074 9081      		ld r25,Z
 241 0076 8913      		cpse r24,r25
 242 0078 00C0      		rjmp .L26
 283:../../tmk_core/common/action_util.c ****         }
 243               		.loc 1 283 0
 244 007a 1082      		st Z,__zero_reg__
 245               	.L26:
 246               	.LVL22:
 247 007c 3196      		adiw r30,1
 248               	.LVL23:
 281:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 249               		.loc 1 281 0
 250 007e E217      		cp r30,r18
 251 0080 F307      		cpc r31,r19
 252 0082 01F4      		brne .L27
 253               	.LVL24:
 254               	.L21:
 255 0084 0895      		ret
 256               	.LBE20:
 257               	.LBE19:
 258               		.cfi_endproc
 259               	.LFE102:
 261               		.section	.text.clear_keys,"ax",@progbits
 262               	.global	clear_keys
 264               	clear_keys:
 265               	.LFB103:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 266               		.loc 1 99 0
 267               		.cfi_startproc
 268               	/* prologue: function */
 269               	/* frame size = 0 */
 270               	/* stack size = 0 */
 271               	.L__stack_usage = 0
 272               	.LVL25:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 273               		.loc 1 99 0
 274 0000 81E0      		ldi r24,lo8(1)
 275 0002 90E0      		ldi r25,0
 276               	.LVL26:
 277               	.L37:
 278               	.LBB21:
 102:../../tmk_core/common/action_util.c ****     }
 279               		.loc 1 102 0 discriminator 3
 280 0004 E091 0000 		lds r30,keyboard_report
 281 0008 F091 0000 		lds r31,keyboard_report+1
 282 000c E80F      		add r30,r24
 283 000e F91F      		adc r31,r25
 284 0010 1082      		st Z,__zero_reg__
 285               	.LVL27:
 286 0012 0196      		adiw r24,1
 287               	.LVL28:
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 288               		.loc 1 101 0 discriminator 3
 289 0014 8032      		cpi r24,32
 290 0016 9105      		cpc r25,__zero_reg__
 291 0018 01F4      		brne .L37
 292               	/* epilogue start */
 293               	.LBE21:
 104:../../tmk_core/common/action_util.c **** 
 294               		.loc 1 104 0
 295 001a 0895      		ret
 296               		.cfi_endproc
 297               	.LFE103:
 299               		.section	.text.get_mods,"ax",@progbits
 300               	.global	get_mods
 302               	get_mods:
 303               	.LFB104:
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 304               		.loc 1 108 0
 305               		.cfi_startproc
 306               	/* prologue: function */
 307               	/* frame size = 0 */
 308               	/* stack size = 0 */
 309               	.L__stack_usage = 0
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 310               		.loc 1 108 0
 311 0000 8091 0000 		lds r24,real_mods
 312 0004 0895      		ret
 313               		.cfi_endproc
 314               	.LFE104:
 316               		.section	.text.add_mods,"ax",@progbits
 317               	.global	add_mods
 319               	add_mods:
 320               	.LFB105:
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 321               		.loc 1 109 0
 322               		.cfi_startproc
 323               	.LVL29:
 324               	/* prologue: function */
 325               	/* frame size = 0 */
 326               	/* stack size = 0 */
 327               	.L__stack_usage = 0
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 328               		.loc 1 109 0
 329 0000 9091 0000 		lds r25,real_mods
 330 0004 892B      		or r24,r25
 331               	.LVL30:
 332 0006 8093 0000 		sts real_mods,r24
 333 000a 0895      		ret
 334               		.cfi_endproc
 335               	.LFE105:
 337               		.section	.text.del_mods,"ax",@progbits
 338               	.global	del_mods
 340               	del_mods:
 341               	.LFB106:
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 342               		.loc 1 110 0
 343               		.cfi_startproc
 344               	.LVL31:
 345               	/* prologue: function */
 346               	/* frame size = 0 */
 347               	/* stack size = 0 */
 348               	.L__stack_usage = 0
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 349               		.loc 1 110 0
 350 0000 982F      		mov r25,r24
 351 0002 9095      		com r25
 352 0004 8091 0000 		lds r24,real_mods
 353               	.LVL32:
 354 0008 8923      		and r24,r25
 355 000a 8093 0000 		sts real_mods,r24
 356 000e 0895      		ret
 357               		.cfi_endproc
 358               	.LFE106:
 360               		.section	.text.set_mods,"ax",@progbits
 361               	.global	set_mods
 363               	set_mods:
 364               	.LFB107:
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 365               		.loc 1 111 0
 366               		.cfi_startproc
 367               	.LVL33:
 368               	/* prologue: function */
 369               	/* frame size = 0 */
 370               	/* stack size = 0 */
 371               	.L__stack_usage = 0
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 372               		.loc 1 111 0
 373 0000 8093 0000 		sts real_mods,r24
 374 0004 0895      		ret
 375               		.cfi_endproc
 376               	.LFE107:
 378               		.section	.text.clear_mods,"ax",@progbits
 379               	.global	clear_mods
 381               	clear_mods:
 382               	.LFB108:
 112:../../tmk_core/common/action_util.c **** 
 383               		.loc 1 112 0
 384               		.cfi_startproc
 385               	/* prologue: function */
 386               	/* frame size = 0 */
 387               	/* stack size = 0 */
 388               	.L__stack_usage = 0
 112:../../tmk_core/common/action_util.c **** 
 389               		.loc 1 112 0
 390 0000 1092 0000 		sts real_mods,__zero_reg__
 391 0004 0895      		ret
 392               		.cfi_endproc
 393               	.LFE108:
 395               		.section	.text.get_weak_mods,"ax",@progbits
 396               	.global	get_weak_mods
 398               	get_weak_mods:
 399               	.LFB109:
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 400               		.loc 1 115 0
 401               		.cfi_startproc
 402               	/* prologue: function */
 403               	/* frame size = 0 */
 404               	/* stack size = 0 */
 405               	.L__stack_usage = 0
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 406               		.loc 1 115 0
 407 0000 8091 0000 		lds r24,weak_mods
 408 0004 0895      		ret
 409               		.cfi_endproc
 410               	.LFE109:
 412               		.section	.text.add_weak_mods,"ax",@progbits
 413               	.global	add_weak_mods
 415               	add_weak_mods:
 416               	.LFB110:
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 417               		.loc 1 116 0
 418               		.cfi_startproc
 419               	.LVL34:
 420               	/* prologue: function */
 421               	/* frame size = 0 */
 422               	/* stack size = 0 */
 423               	.L__stack_usage = 0
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 424               		.loc 1 116 0
 425 0000 9091 0000 		lds r25,weak_mods
 426 0004 892B      		or r24,r25
 427               	.LVL35:
 428 0006 8093 0000 		sts weak_mods,r24
 429 000a 0895      		ret
 430               		.cfi_endproc
 431               	.LFE110:
 433               		.section	.text.del_weak_mods,"ax",@progbits
 434               	.global	del_weak_mods
 436               	del_weak_mods:
 437               	.LFB111:
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 438               		.loc 1 117 0
 439               		.cfi_startproc
 440               	.LVL36:
 441               	/* prologue: function */
 442               	/* frame size = 0 */
 443               	/* stack size = 0 */
 444               	.L__stack_usage = 0
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 445               		.loc 1 117 0
 446 0000 982F      		mov r25,r24
 447 0002 9095      		com r25
 448 0004 8091 0000 		lds r24,weak_mods
 449               	.LVL37:
 450 0008 8923      		and r24,r25
 451 000a 8093 0000 		sts weak_mods,r24
 452 000e 0895      		ret
 453               		.cfi_endproc
 454               	.LFE111:
 456               		.section	.text.set_weak_mods,"ax",@progbits
 457               	.global	set_weak_mods
 459               	set_weak_mods:
 460               	.LFB112:
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 461               		.loc 1 118 0
 462               		.cfi_startproc
 463               	.LVL38:
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 468               		.loc 1 118 0
 469 0000 8093 0000 		sts weak_mods,r24
 470 0004 0895      		ret
 471               		.cfi_endproc
 472               	.LFE112:
 474               		.section	.text.clear_weak_mods,"ax",@progbits
 475               	.global	clear_weak_mods
 477               	clear_weak_mods:
 478               	.LFB113:
 119:../../tmk_core/common/action_util.c **** 
 479               		.loc 1 119 0
 480               		.cfi_startproc
 481               	/* prologue: function */
 482               	/* frame size = 0 */
 483               	/* stack size = 0 */
 484               	.L__stack_usage = 0
 119:../../tmk_core/common/action_util.c **** 
 485               		.loc 1 119 0
 486 0000 1092 0000 		sts weak_mods,__zero_reg__
 487 0004 0895      		ret
 488               		.cfi_endproc
 489               	.LFE113:
 491               		.section	.text.set_oneshot_mods,"ax",@progbits
 492               	.global	set_oneshot_mods
 494               	set_oneshot_mods:
 495               	.LFB114:
 124:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 496               		.loc 1 124 0
 497               		.cfi_startproc
 498               	.LVL39:
 499               	/* prologue: function */
 500               	/* frame size = 0 */
 501               	/* stack size = 0 */
 502               	.L__stack_usage = 0
 125:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 503               		.loc 1 125 0
 504 0000 8093 0000 		sts oneshot_mods,r24
 505 0004 0895      		ret
 506               		.cfi_endproc
 507               	.LFE114:
 509               		.section	.text.clear_oneshot_mods,"ax",@progbits
 510               	.global	clear_oneshot_mods
 512               	clear_oneshot_mods:
 513               	.LFB115:
 131:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 514               		.loc 1 131 0
 515               		.cfi_startproc
 516               	/* prologue: function */
 517               	/* frame size = 0 */
 518               	/* stack size = 0 */
 519               	.L__stack_usage = 0
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 520               		.loc 1 132 0
 521 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 522 0004 0895      		ret
 523               		.cfi_endproc
 524               	.LFE115:
 526               		.section	.text.has_anykey,"ax",@progbits
 527               	.global	has_anykey
 529               	has_anykey:
 530               	.LFB116:
 146:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 531               		.loc 1 146 0
 532               		.cfi_startproc
 533               	/* prologue: function */
 534               	/* frame size = 0 */
 535               	/* stack size = 0 */
 536               	.L__stack_usage = 0
 537               	.LVL40:
 538               	.LBB22:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 539               		.loc 1 149 0
 540 0000 2091 0000 		lds r18,keyboard_report
 541 0004 3091 0000 		lds r19,keyboard_report+1
 542 0008 F901      		movw r30,r18
 543 000a 3196      		adiw r30,1
 544 000c 205E      		subi r18,-32
 545 000e 3F4F      		sbci r19,-1
 546               	.LBE22:
 147:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 547               		.loc 1 147 0
 548 0010 80E0      		ldi r24,0
 549               	.LVL41:
 550               	.L53:
 551               	.LBB23:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 552               		.loc 1 149 0
 553 0012 9191      		ld r25,Z+
 554               	.LVL42:
 555 0014 9111      		cpse r25,__zero_reg__
 150:../../tmk_core/common/action_util.c ****     }
 556               		.loc 1 150 0
 557 0016 8F5F      		subi r24,lo8(-(1))
 558               	.LVL43:
 559               	.L52:
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 560               		.loc 1 148 0 discriminator 2
 561 0018 E217      		cp r30,r18
 562 001a F307      		cpc r31,r19
 563 001c 01F4      		brne .L53
 564               	/* epilogue start */
 565               	.LBE23:
 153:../../tmk_core/common/action_util.c **** 
 566               		.loc 1 153 0
 567 001e 0895      		ret
 568               		.cfi_endproc
 569               	.LFE116:
 571               		.section	.text.send_keyboard_report,"ax",@progbits
 572               	.global	send_keyboard_report
 574               	send_keyboard_report:
 575               	.LFB100:
  55:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 576               		.loc 1 55 0
 577               		.cfi_startproc
 578               	/* prologue: function */
 579               	/* frame size = 0 */
 580               	/* stack size = 0 */
 581               	.L__stack_usage = 0
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 582               		.loc 1 56 0
 583 0000 E091 0000 		lds r30,keyboard_report
 584 0004 F091 0000 		lds r31,keyboard_report+1
 585 0008 8091 0000 		lds r24,real_mods
 586 000c 8083      		st Z,r24
  57:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 587               		.loc 1 57 0
 588 000e E091 0000 		lds r30,keyboard_report
 589 0012 F091 0000 		lds r31,keyboard_report+1
 590 0016 8081      		ld r24,Z
 591 0018 9091 0000 		lds r25,weak_mods
 592 001c 892B      		or r24,r25
 593 001e 8083      		st Z,r24
  59:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 594               		.loc 1 59 0
 595 0020 9091 0000 		lds r25,oneshot_mods
 596 0024 9923      		tst r25
 597 0026 01F0      		breq .L60
  66:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
 598               		.loc 1 66 0
 599 0028 E091 0000 		lds r30,keyboard_report
 600 002c F091 0000 		lds r31,keyboard_report+1
 601 0030 8081      		ld r24,Z
 602 0032 892B      		or r24,r25
 603 0034 8083      		st Z,r24
  67:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 604               		.loc 1 67 0
 605 0036 0E94 0000 		call has_anykey
 606               	.LVL44:
 607 003a 8111      		cpse r24,__zero_reg__
 608               	.LBB26:
 609               	.LBB27:
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 610               		.loc 1 132 0
 611 003c 1092 0000 		sts oneshot_mods,__zero_reg__
 612               	.L60:
 613               	.LBE27:
 614               	.LBE26:
  72:../../tmk_core/common/action_util.c **** }
 615               		.loc 1 72 0
 616 0040 8091 0000 		lds r24,keyboard_report
 617 0044 9091 0000 		lds r25,keyboard_report+1
 618 0048 0C94 0000 		jmp host_keyboard_send
 619               	.LVL45:
 620               		.cfi_endproc
 621               	.LFE100:
 623               		.section	.text.has_anymod,"ax",@progbits
 624               	.global	has_anymod
 626               	has_anymod:
 627               	.LFB117:
 156:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 628               		.loc 1 156 0
 629               		.cfi_startproc
 630               	/* prologue: function */
 631               	/* frame size = 0 */
 632               	/* stack size = 0 */
 633               	.L__stack_usage = 0
 157:../../tmk_core/common/action_util.c **** }
 634               		.loc 1 157 0
 635 0000 8091 0000 		lds r24,real_mods
 636 0004 0C94 0000 		jmp bitpop
 637               	.LVL46:
 638               		.cfi_endproc
 639               	.LFE117:
 641               		.section	.text.get_first_key,"ax",@progbits
 642               	.global	get_first_key
 644               	get_first_key:
 645               	.LFB118:
 161:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 646               		.loc 1 161 0
 647               		.cfi_startproc
 648 0000 CF93      		push r28
 649               	.LCFI10:
 650               		.cfi_def_cfa_offset 3
 651               		.cfi_offset 28, -2
 652 0002 DF93      		push r29
 653               	.LCFI11:
 654               		.cfi_def_cfa_offset 4
 655               		.cfi_offset 29, -3
 656               	/* prologue: function */
 657               	/* frame size = 0 */
 658               	/* stack size = 2 */
 659               	.L__stack_usage = 2
 163:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 660               		.loc 1 163 0
 661 0004 8091 0000 		lds r24,keyboard_protocol
 662 0008 E091 0000 		lds r30,keyboard_report
 663 000c F091 0000 		lds r31,keyboard_report+1
 664 0010 8823      		tst r24
 665 0012 01F0      		breq .L67
 163:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 666               		.loc 1 163 0 is_stmt 0 discriminator 1
 667 0014 8091 0000 		lds r24,keyboard_nkro
 668 0018 8823      		tst r24
 669 001a 01F0      		breq .L67
 670 001c DF01      		movw r26,r30
 671 001e 1196      		adiw r26,1
 672               	.LBB28:
 165:../../tmk_core/common/action_util.c ****             ;
 673               		.loc 1 165 0 is_stmt 1
 674 0020 C0E0      		ldi r28,0
 675               	.L68:
 676               	.LVL47:
 165:../../tmk_core/common/action_util.c ****             ;
 677               		.loc 1 165 0 is_stmt 0 discriminator 2
 678 0022 8D91      		ld r24,X+
 679 0024 8111      		cpse r24,__zero_reg__
 680 0026 00C0      		rjmp .L69
 165:../../tmk_core/common/action_util.c ****             ;
 681               		.loc 1 165 0 discriminator 3
 682 0028 CF5F      		subi r28,lo8(-(1))
 683               	.LVL48:
 684 002a CF31      		cpi r28,lo8(31)
 685 002c 01F4      		brne .L68
 686               	.L69:
 167:../../tmk_core/common/action_util.c ****     }
 687               		.loc 1 167 0 is_stmt 1
 688 002e D0E0      		ldi r29,0
 689 0030 EC0F      		add r30,r28
 690 0032 FD1F      		adc r31,r29
 691 0034 8181      		ldd r24,Z+1
 692 0036 0E94 0000 		call biton
 693               	.LVL49:
 694 003a 93E0      		ldi r25,3
 695               		1:
 696 003c CC0F      		lsl r28
 697 003e DD1F      		rol r29
 698 0040 9A95      		dec r25
 699 0042 01F4      		brne 1b
 700               	.LVL50:
 701 0044 8C2B      		or r24,r28
 702               	.L66:
 703               	/* epilogue start */
 704               	.LBE28:
 182:../../tmk_core/common/action_util.c **** 
 705               		.loc 1 182 0
 706 0046 DF91      		pop r29
 707 0048 CF91      		pop r28
 708 004a 0895      		ret
 709               	.L67:
 180:../../tmk_core/common/action_util.c **** #endif
 710               		.loc 1 180 0
 711 004c 8281      		ldd r24,Z+2
 712 004e 00C0      		rjmp .L66
 713               		.cfi_endproc
 714               	.LFE118:
 716               		.section	.progmem.data.__c.4702,"a",@progbits
 719               	__c.4702:
 720 0000 6465 6C5F 		.string	"del_key_bit: can't del: %02X\n"
 720      6B65 795F 
 720      6269 743A 
 720      2063 616E 
 720      2774 2064 
 721               		.section	.progmem.data.__c.4697,"a",@progbits
 724               	__c.4697:
 725 0000 6164 645F 		.string	"add_key_bit: can't add: %02X\n"
 725      6B65 795F 
 725      6269 743A 
 725      2063 616E 
 725      2774 2061 
 726               		.section	.bss.oneshot_mods,"aw",@nobits
 729               	oneshot_mods:
 730 0000 00        		.zero	1
 731               	.global	keyboard_report
 732               		.section	.data.keyboard_report,"aw",@progbits
 735               	keyboard_report:
 736 0000 0000      		.word	__compound_literal.0
 737               		.section	.bss.__compound_literal.0,"aw",@nobits
 740               	__compound_literal.0:
 741 0000 0000 0000 		.zero	32
 741      0000 0000 
 741      0000 0000 
 741      0000 0000 
 741      0000 0000 
 742               		.section	.bss.weak_mods,"aw",@nobits
 745               	weak_mods:
 746 0000 00        		.zero	1
 747               		.section	.bss.real_mods,"aw",@nobits
 750               	real_mods:
 751 0000 00        		.zero	1
 752               		.text
 753               	.Letext0:
 754               		.file 2 "/usr/avr/include/stdint.h"
 755               		.file 3 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 756               		.file 4 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 757               		.file 5 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 758               		.file 6 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 759               		.file 7 "/usr/avr/include/stdio.h"
 760               		.file 8 "../../tmk_core/common/report.h"
 761               		.file 9 "../../tmk_core/common/host.h"
 762               		.file 10 "../../tmk_core/common/avr/xprintf.h"
 763               		.file 11 "../../tmk_core/common/debug.h"
 764               		.file 12 "../../tmk_core/common/action_util.h"
 765               		.file 13 "../../tmk_core/common/timer.h"
 766               		.file 14 "../../tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/ccMEOkK9.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccMEOkK9.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccMEOkK9.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccMEOkK9.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccMEOkK9.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccMEOkK9.s:13     .text.add_key:0000000000000000 add_key
     /tmp/ccMEOkK9.s:735    .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/ccMEOkK9.s:724    .progmem.data.__c.4697:0000000000000000 __c.4697
     /tmp/ccMEOkK9.s:146    .text.del_key:0000000000000000 del_key
     /tmp/ccMEOkK9.s:719    .progmem.data.__c.4702:0000000000000000 __c.4702
     /tmp/ccMEOkK9.s:264    .text.clear_keys:0000000000000000 clear_keys
     /tmp/ccMEOkK9.s:302    .text.get_mods:0000000000000000 get_mods
     /tmp/ccMEOkK9.s:750    .bss.real_mods:0000000000000000 real_mods
     /tmp/ccMEOkK9.s:319    .text.add_mods:0000000000000000 add_mods
     /tmp/ccMEOkK9.s:340    .text.del_mods:0000000000000000 del_mods
     /tmp/ccMEOkK9.s:363    .text.set_mods:0000000000000000 set_mods
     /tmp/ccMEOkK9.s:381    .text.clear_mods:0000000000000000 clear_mods
     /tmp/ccMEOkK9.s:398    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/ccMEOkK9.s:745    .bss.weak_mods:0000000000000000 weak_mods
     /tmp/ccMEOkK9.s:415    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/ccMEOkK9.s:436    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/ccMEOkK9.s:459    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/ccMEOkK9.s:477    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/ccMEOkK9.s:494    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/ccMEOkK9.s:729    .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/ccMEOkK9.s:512    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/ccMEOkK9.s:529    .text.has_anykey:0000000000000000 has_anykey
     /tmp/ccMEOkK9.s:574    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/ccMEOkK9.s:626    .text.has_anymod:0000000000000000 has_anymod
     /tmp/ccMEOkK9.s:644    .text.get_first_key:0000000000000000 get_first_key
     /tmp/ccMEOkK9.s:740    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
keyboard_protocol
keyboard_nkro
debug_config
__xprintf
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
