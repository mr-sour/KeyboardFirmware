   1               		.file	"action_macro.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_macro_play,"ax",@progbits
  11               	.global	action_macro_play
  13               	action_macro_play:
  14               	.LFB103:
  15               		.file 1 "../../tmk_core/common/action_macro.c"
   1:../../tmk_core/common/action_macro.c **** /*
   2:../../tmk_core/common/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action_macro.c **** 
   4:../../tmk_core/common/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action_macro.c **** (at your option) any later version.
   8:../../tmk_core/common/action_macro.c **** 
   9:../../tmk_core/common/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action_macro.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action_macro.c **** 
  14:../../tmk_core/common/action_macro.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action_macro.c **** */
  17:../../tmk_core/common/action_macro.c **** #include "action.h"
  18:../../tmk_core/common/action_macro.c **** #include "action_util.h"
  19:../../tmk_core/common/action_macro.c **** #include "action_macro.h"
  20:../../tmk_core/common/action_macro.c **** #include "wait.h"
  21:../../tmk_core/common/action_macro.c **** 
  22:../../tmk_core/common/action_macro.c **** #ifdef DEBUG_ACTION
  23:../../tmk_core/common/action_macro.c **** #include "debug.h"
  24:../../tmk_core/common/action_macro.c **** #else
  25:../../tmk_core/common/action_macro.c **** #include "nodebug.h"
  26:../../tmk_core/common/action_macro.c **** #endif
  27:../../tmk_core/common/action_macro.c **** 
  28:../../tmk_core/common/action_macro.c **** 
  29:../../tmk_core/common/action_macro.c **** #ifndef NO_ACTION_MACRO
  30:../../tmk_core/common/action_macro.c **** 
  31:../../tmk_core/common/action_macro.c **** #define MACRO_READ()  (macro = MACRO_GET(macro_p++))
  32:../../tmk_core/common/action_macro.c **** void action_macro_play(const macro_t *macro_p)
  33:../../tmk_core/common/action_macro.c **** {
  16               		.loc 1 33 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 DF92      		push r13
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 13, -2
  23 0002 EF92      		push r14
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 14, -3
  27 0004 FF92      		push r15
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 15, -4
  31 0006 0F93      		push r16
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 16, -5
  35 0008 1F93      		push r17
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 17, -6
  39 000a CF93      		push r28
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 28, -7
  43 000c DF93      		push r29
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 29, -8
  47               	/* prologue: function */
  48               	/* frame size = 0 */
  49               	/* stack size = 7 */
  50               	.L__stack_usage = 7
  51 000e 8C01      		movw r16,r24
  52               	.LVL1:
  34:../../tmk_core/common/action_macro.c ****     macro_t macro = END;
  35:../../tmk_core/common/action_macro.c ****     uint8_t interval = 0;
  36:../../tmk_core/common/action_macro.c **** 
  37:../../tmk_core/common/action_macro.c ****     uint8_t mod_storage = 0;
  38:../../tmk_core/common/action_macro.c **** 
  39:../../tmk_core/common/action_macro.c ****     if (!macro_p) return;
  53               		.loc 1 39 0
  54 0010 892B      		or r24,r25
  55 0012 01F0      		breq .L1
  56 0014 E12C      		mov r14,__zero_reg__
  57 0016 F12C      		mov r15,__zero_reg__
  40:../../tmk_core/common/action_macro.c ****     while (true) {
  41:../../tmk_core/common/action_macro.c ****         switch (MACRO_READ()) {
  42:../../tmk_core/common/action_macro.c ****             case KEY_DOWN:
  43:../../tmk_core/common/action_macro.c ****                 MACRO_READ();
  44:../../tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  45:../../tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  46:../../tmk_core/common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
  58               		.loc 1 46 0
  59 0018 DD24      		clr r13
  60 001a D394      		inc r13
  61               	.LVL2:
  62               	.L21:
  63               	.LBB13:
  41:../../tmk_core/common/action_macro.c ****             case KEY_DOWN:
  64               		.loc 1 41 0
  65 001c E801      		movw r28,r16
  66 001e 2196      		adiw r28,1
  67               	.LVL3:
  68 0020 F801      		movw r30,r16
  69               	/* #APP */
  70               	 ;  41 "../../tmk_core/common/action_macro.c" 1
  71 0022 8491      		lpm r24, Z
  72               		
  73               	 ;  0 "" 2
  74               	.LVL4:
  75               	/* #NOAPP */
  76               	.LBE13:
  77 0024 8537      		cpi r24,lo8(117)
  78 0026 01F4      		brne .+2
  79 0028 00C0      		rjmp .L3
  80 002a 00F4      		brsh .L4
  81 002c 8437      		cpi r24,lo8(116)
  82 002e 00F0      		brlo .+2
  83 0030 00C0      		rjmp .L5
  84 0032 8430      		cpi r24,lo8(4)
  85 0034 00F0      		brlo .+2
  86 0036 00C0      		rjmp .L6
  87 0038 8130      		cpi r24,lo8(1)
  88 003a 01F0      		breq .L7
  89 003c 8230      		cpi r24,lo8(2)
  90 003e 01F0      		breq .L8
  91               	.LVL5:
  92               	.L1:
  93               	/* epilogue start */
  47:../../tmk_core/common/action_macro.c ****                     send_keyboard_report();
  48:../../tmk_core/common/action_macro.c ****                 } else {
  49:../../tmk_core/common/action_macro.c ****                     register_code(macro);
  50:../../tmk_core/common/action_macro.c ****                 }
  51:../../tmk_core/common/action_macro.c ****                 break;
  52:../../tmk_core/common/action_macro.c ****             case KEY_UP:
  53:../../tmk_core/common/action_macro.c ****                 MACRO_READ();
  54:../../tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  55:../../tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  56:../../tmk_core/common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
  57:../../tmk_core/common/action_macro.c ****                     send_keyboard_report();
  58:../../tmk_core/common/action_macro.c ****                 } else {
  59:../../tmk_core/common/action_macro.c ****                     unregister_code(macro);
  60:../../tmk_core/common/action_macro.c ****                 }
  61:../../tmk_core/common/action_macro.c ****                 break;
  62:../../tmk_core/common/action_macro.c ****             case WAIT:
  63:../../tmk_core/common/action_macro.c ****                 MACRO_READ();
  64:../../tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  65:../../tmk_core/common/action_macro.c ****                 { uint8_t ms = macro; while (ms--) wait_ms(1); }
  66:../../tmk_core/common/action_macro.c ****                 break;
  67:../../tmk_core/common/action_macro.c ****             case INTERVAL:
  68:../../tmk_core/common/action_macro.c ****                 interval = MACRO_READ();
  69:../../tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  70:../../tmk_core/common/action_macro.c ****                 break;
  71:../../tmk_core/common/action_macro.c ****             case MOD_STORE:
  72:../../tmk_core/common/action_macro.c ****                 mod_storage = get_mods();
  73:../../tmk_core/common/action_macro.c ****                 break;
  74:../../tmk_core/common/action_macro.c ****             case MOD_RESTORE:
  75:../../tmk_core/common/action_macro.c ****                 set_mods(mod_storage);
  76:../../tmk_core/common/action_macro.c ****                 send_keyboard_report();
  77:../../tmk_core/common/action_macro.c ****                 break;
  78:../../tmk_core/common/action_macro.c ****             case MOD_CLEAR:
  79:../../tmk_core/common/action_macro.c ****                 clear_mods();
  80:../../tmk_core/common/action_macro.c ****                 send_keyboard_report();
  81:../../tmk_core/common/action_macro.c ****                 break;
  82:../../tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
  83:../../tmk_core/common/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  84:../../tmk_core/common/action_macro.c ****                 register_code(macro);
  85:../../tmk_core/common/action_macro.c ****                 break;
  86:../../tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
  87:../../tmk_core/common/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  88:../../tmk_core/common/action_macro.c ****                 unregister_code(macro&0x7F);
  89:../../tmk_core/common/action_macro.c ****                 break;
  90:../../tmk_core/common/action_macro.c ****             case END:
  91:../../tmk_core/common/action_macro.c ****             default:
  92:../../tmk_core/common/action_macro.c ****                 return;
  93:../../tmk_core/common/action_macro.c ****         }
  94:../../tmk_core/common/action_macro.c ****         // interval
  95:../../tmk_core/common/action_macro.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
  96:../../tmk_core/common/action_macro.c ****     }
  97:../../tmk_core/common/action_macro.c **** }
  94               		.loc 1 97 0
  95 0040 DF91      		pop r29
  96 0042 CF91      		pop r28
  97 0044 1F91      		pop r17
  98 0046 0F91      		pop r16
  99 0048 FF90      		pop r15
 100 004a EF90      		pop r14
 101 004c DF90      		pop r13
 102 004e 0895      		ret
 103               	.LVL6:
 104               	.L4:
  41:../../tmk_core/common/action_macro.c ****             case KEY_DOWN:
 105               		.loc 1 41 0
 106 0050 8837      		cpi r24,lo8(120)
 107 0052 01F4      		brne .+2
 108 0054 00C0      		rjmp .L9
 109 0056 00F4      		brsh .L10
 110 0058 8637      		cpi r24,lo8(118)
 111 005a 01F4      		brne .+2
 112 005c 00C0      		rjmp .L11
 113 005e 8737      		cpi r24,lo8(119)
 114 0060 01F4      		brne .L1
  75:../../tmk_core/common/action_macro.c ****                 send_keyboard_report();
 115               		.loc 1 75 0
 116 0062 8E2D      		mov r24,r14
 117               	.LVL7:
 118 0064 0E94 0000 		call set_mods
 119               	.LVL8:
 120               	.L28:
  80:../../tmk_core/common/action_macro.c ****                 break;
 121               		.loc 1 80 0
 122 0068 0E94 0000 		call send_keyboard_report
 123               	.LVL9:
  81:../../tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
 124               		.loc 1 81 0
 125 006c 00C0      		rjmp .L15
 126               	.LVL10:
 127               	.L10:
  41:../../tmk_core/common/action_macro.c ****             case KEY_DOWN:
 128               		.loc 1 41 0
 129 006e 9CE7      		ldi r25,lo8(124)
 130 0070 980F      		add r25,r24
 131 0072 9037      		cpi r25,lo8(112)
 132 0074 00F4      		brsh .L1
  88:../../tmk_core/common/action_macro.c ****                 break;
 133               		.loc 1 88 0
 134 0076 8F77      		andi r24,lo8(127)
 135               	.LVL11:
 136 0078 0E94 0000 		call unregister_code
 137               	.LVL12:
  89:../../tmk_core/common/action_macro.c ****             case END:
 138               		.loc 1 89 0
 139 007c 00C0      		rjmp .L15
 140               	.LVL13:
 141               	.L7:
 142               	.LBB14:
  43:../../tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 143               		.loc 1 43 0
 144 007e 0E5F      		subi r16,-2
 145 0080 1F4F      		sbci r17,-1
 146               	.LVL14:
 147 0082 FE01      		movw r30,r28
 148               	.LVL15:
 149               	/* #APP */
 150               	 ;  43 "../../tmk_core/common/action_macro.c" 1
 151 0084 8491      		lpm r24, Z
 152               		
 153               	 ;  0 "" 2
 154               	.LVL16:
 155               	/* #NOAPP */
 156               	.LBE14:
  45:../../tmk_core/common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
 157               		.loc 1 45 0
 158 0086 90E2      		ldi r25,lo8(32)
 159 0088 980F      		add r25,r24
 160 008a 9830      		cpi r25,lo8(8)
 161 008c 00F4      		brsh .L14
  46:../../tmk_core/common/action_macro.c ****                     send_keyboard_report();
 162               		.loc 1 46 0
 163 008e 8770      		andi r24,lo8(7)
 164               	.LVL17:
 165 0090 FD2D      		mov r31,r13
 166 0092 00C0      		rjmp 2f
 167               		1:
 168 0094 FF0F      		lsl r31
 169               		2:
 170 0096 8A95      		dec r24
 171 0098 02F4      		brpl 1b
 172 009a 8F2F      		mov r24,r31
 173 009c 0E94 0000 		call add_weak_mods
 174               	.LVL18:
 175               	.L26:
  57:../../tmk_core/common/action_macro.c ****                 } else {
 176               		.loc 1 57 0
 177 00a0 0E94 0000 		call send_keyboard_report
 178               	.LVL19:
 179 00a4 00C0      		rjmp .L27
 180               	.LVL20:
 181               	.L14:
  49:../../tmk_core/common/action_macro.c ****                 }
 182               		.loc 1 49 0
 183 00a6 0E94 0000 		call register_code
 184               	.LVL21:
 185               	.L27:
 186               	.LBB15:
  53:../../tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 187               		.loc 1 53 0
 188 00aa E801      		movw r28,r16
 189               	.LVL22:
 190               	.L15:
 191               	.LBE15:
 192               	.LBB16:
  95:../../tmk_core/common/action_macro.c ****     }
 193               		.loc 1 95 0
 194 00ac 8F2D      		mov r24,r15
 195               	.LVL23:
 196               	.L19:
  95:../../tmk_core/common/action_macro.c ****     }
 197               		.loc 1 95 0 is_stmt 0 discriminator 1
 198 00ae 8111      		cpse r24,__zero_reg__
 199 00b0 00C0      		rjmp .L20
 200 00b2 8E01      		movw r16,r28
 201 00b4 00C0      		rjmp .L21
 202               	.LVL24:
 203               	.L8:
 204               	.LBE16:
 205               	.LBB19:
  53:../../tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 206               		.loc 1 53 0 is_stmt 1
 207 00b6 0E5F      		subi r16,-2
 208 00b8 1F4F      		sbci r17,-1
 209               	.LVL25:
 210 00ba FE01      		movw r30,r28
 211               	.LVL26:
 212               	/* #APP */
 213               	 ;  53 "../../tmk_core/common/action_macro.c" 1
 214 00bc 8491      		lpm r24, Z
 215               		
 216               	 ;  0 "" 2
 217               	.LVL27:
 218               	/* #NOAPP */
 219               	.LBE19:
  55:../../tmk_core/common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
 220               		.loc 1 55 0
 221 00be 90E2      		ldi r25,lo8(32)
 222 00c0 980F      		add r25,r24
 223 00c2 9830      		cpi r25,lo8(8)
 224 00c4 00F4      		brsh .L16
  56:../../tmk_core/common/action_macro.c ****                     send_keyboard_report();
 225               		.loc 1 56 0
 226 00c6 8770      		andi r24,lo8(7)
 227               	.LVL28:
 228 00c8 FD2D      		mov r31,r13
 229 00ca 00C0      		rjmp 2f
 230               		1:
 231 00cc FF0F      		lsl r31
 232               		2:
 233 00ce 8A95      		dec r24
 234 00d0 02F4      		brpl 1b
 235 00d2 8F2F      		mov r24,r31
 236 00d4 0E94 0000 		call del_weak_mods
 237               	.LVL29:
 238 00d8 00C0      		rjmp .L26
 239               	.LVL30:
 240               	.L16:
  59:../../tmk_core/common/action_macro.c ****                 }
 241               		.loc 1 59 0
 242 00da 0E94 0000 		call unregister_code
 243               	.LVL31:
 244 00de 00C0      		rjmp .L27
 245               	.LVL32:
 246               	.L5:
 247               	.LBB20:
  63:../../tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 248               		.loc 1 63 0
 249 00e0 0E5F      		subi r16,-2
 250 00e2 1F4F      		sbci r17,-1
 251               	.LVL33:
 252 00e4 FE01      		movw r30,r28
 253               	.LVL34:
 254               	/* #APP */
 255               	 ;  63 "../../tmk_core/common/action_macro.c" 1
 256 00e6 C491      		lpm r28, Z
 257               		
 258               	 ;  0 "" 2
 259               	.LVL35:
 260               	/* #NOAPP */
 261               	.L17:
 262               	.LBE20:
 263               	.LBB21:
  65:../../tmk_core/common/action_macro.c ****                 break;
 264               		.loc 1 65 0 discriminator 1
 265 00e8 CC23      		tst r28
 266 00ea 01F0      		breq .L27
 267               	.LVL36:
 268               	.LBB22:
 269               	.LBB23:
 270               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 271               		.loc 2 187 0
 272 00ec 8FE9      		ldi r24,lo8(3999)
 273 00ee 9FE0      		ldi r25,hi8(3999)
 274 00f0 0197      	1:	sbiw r24,1
 275 00f2 01F4      		brne 1b
 276 00f4 00C0      		rjmp .
 277 00f6 0000      		nop
 278 00f8 C150      		subi r28,lo8(-(-1))
 279               	.LVL37:
 280 00fa 00C0      		rjmp .L17
 281               	.LVL38:
 282               	.L3:
 283               	.LBE23:
 284               	.LBE22:
 285               	.LBE21:
 286               	.LBB24:
  68:../../tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 287               		.loc 1 68 0
 288 00fc 0E5F      		subi r16,-2
 289 00fe 1F4F      		sbci r17,-1
 290               	.LVL39:
 291 0100 FE01      		movw r30,r28
 292               	.LVL40:
 293               	/* #APP */
 294               	 ;  68 "../../tmk_core/common/action_macro.c" 1
 295 0102 F490      		lpm r15, Z
 296               		
 297               	 ;  0 "" 2
 298               	.LVL41:
 299               	/* #NOAPP */
 300 0104 00C0      		rjmp .L27
 301               	.LVL42:
 302               	.L11:
 303               	.LBE24:
  72:../../tmk_core/common/action_macro.c ****                 break;
 304               		.loc 1 72 0
 305 0106 0E94 0000 		call get_mods
 306               	.LVL43:
 307 010a E82E      		mov r14,r24
 308               	.LVL44:
  73:../../tmk_core/common/action_macro.c ****             case MOD_RESTORE:
 309               		.loc 1 73 0
 310 010c 00C0      		rjmp .L15
 311               	.LVL45:
 312               	.L9:
  79:../../tmk_core/common/action_macro.c ****                 send_keyboard_report();
 313               		.loc 1 79 0
 314 010e 0E94 0000 		call clear_mods
 315               	.LVL46:
 316 0112 00C0      		rjmp .L28
 317               	.LVL47:
 318               	.L6:
  84:../../tmk_core/common/action_macro.c ****                 break;
 319               		.loc 1 84 0
 320 0114 0E94 0000 		call register_code
 321               	.LVL48:
  85:../../tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
 322               		.loc 1 85 0
 323 0118 00C0      		rjmp .L15
 324               	.LVL49:
 325               	.L20:
 326               	.LBB25:
 327               	.LBB17:
 328               	.LBB18:
 329               		.loc 2 187 0
 330 011a EFE9      		ldi r30,lo8(3999)
 331 011c FFE0      		ldi r31,hi8(3999)
 332 011e 3197      	1:	sbiw r30,1
 333 0120 01F4      		brne 1b
 334 0122 00C0      		rjmp .
 335 0124 0000      		nop
 336 0126 8150      		subi r24,lo8(-(-1))
 337               	.LVL50:
 338 0128 00C0      		rjmp .L19
 339               	.LBE18:
 340               	.LBE17:
 341               	.LBE25:
 342               		.cfi_endproc
 343               	.LFE103:
 345               		.text
 346               	.Letext0:
 347               		.file 3 "/usr/avr/include/stdint.h"
 348               		.file 4 "../../tmk_core/common/action_macro.h"
 349               		.file 5 "../../tmk_core/common/keycode.h"
 350               		.file 6 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 351               		.file 7 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 352               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 353               		.file 9 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 354               		.file 10 "/usr/avr/include/stdio.h"
 355               		.file 11 "../../tmk_core/common/report.h"
 356               		.file 12 "../../tmk_core/common/action_util.h"
 357               		.file 13 "../../tmk_core/common/avr/xprintf.h"
 358               		.file 14 "../../tmk_core/common/debug.h"
 359               		.file 15 "../../tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
     /tmp/cceDynFW.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cceDynFW.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cceDynFW.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cceDynFW.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cceDynFW.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cceDynFW.s:13     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
set_mods
send_keyboard_report
unregister_code
add_weak_mods
register_code
del_weak_mods
get_mods
clear_mods
