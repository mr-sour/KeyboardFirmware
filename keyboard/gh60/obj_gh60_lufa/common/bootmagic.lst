   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_key,"ax",@progbits
  12               	scan_key:
  13               	.LFB104:
  14               		.file 1 "../../tmk_core/common/bootmagic.c"
   1:../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core/common/bootmagic.c **** #include "wait.h"
   4:../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core/common/bootmagic.c **** #include "actionmap.h"
   9:../../tmk_core/common/bootmagic.c **** #include "host.h"
  10:../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  11:../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  12:../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  13:../../tmk_core/common/bootmagic.c **** #include "hook.h"
  14:../../tmk_core/common/bootmagic.c **** 
  15:../../tmk_core/common/bootmagic.c **** keymap_config_t keymap_config;
  16:../../tmk_core/common/bootmagic.c **** 
  17:../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  18:../../tmk_core/common/bootmagic.c **** {
  19:../../tmk_core/common/bootmagic.c ****     /* check signature */
  20:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  21:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  22:../../tmk_core/common/bootmagic.c ****     }
  23:../../tmk_core/common/bootmagic.c **** 
  24:../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  25:../../tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
  26:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
  28:../../tmk_core/common/bootmagic.c ****     print("done.\n");
  29:../../tmk_core/common/bootmagic.c **** 
  30:../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  31:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
  32:../../tmk_core/common/bootmagic.c ****         return;
  33:../../tmk_core/common/bootmagic.c ****     }
  34:../../tmk_core/common/bootmagic.c **** 
  35:../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  36:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  37:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  38:../../tmk_core/common/bootmagic.c ****     }
  39:../../tmk_core/common/bootmagic.c **** 
  40:../../tmk_core/common/bootmagic.c ****     /* bootloader */
  41:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
  42:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  43:../../tmk_core/common/bootmagic.c ****     }
  44:../../tmk_core/common/bootmagic.c **** 
  45:../../tmk_core/common/bootmagic.c ****     /* user-defined checks */
  46:../../tmk_core/common/bootmagic.c ****     hook_bootmagic();
  47:../../tmk_core/common/bootmagic.c **** 
  48:../../tmk_core/common/bootmagic.c ****     /* debug enable */
  49:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  50:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  51:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  52:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  53:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  54:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  55:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  56:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  57:../../tmk_core/common/bootmagic.c ****         } else {
  58:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  59:../../tmk_core/common/bootmagic.c ****         }
  60:../../tmk_core/common/bootmagic.c ****     }
  61:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  62:../../tmk_core/common/bootmagic.c **** 
  63:../../tmk_core/common/bootmagic.c ****     /* keymap config */
  64:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  67:../../tmk_core/common/bootmagic.c ****     }
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  70:../../tmk_core/common/bootmagic.c ****     }
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  73:../../tmk_core/common/bootmagic.c ****     }
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  76:../../tmk_core/common/bootmagic.c ****     }
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  79:../../tmk_core/common/bootmagic.c ****     }
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  82:../../tmk_core/common/bootmagic.c ****     }
  83:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  84:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  85:../../tmk_core/common/bootmagic.c ****     }
  86:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
  87:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  88:../../tmk_core/common/bootmagic.c ****     }
  89:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  90:../../tmk_core/common/bootmagic.c **** 
  91:../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  92:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  93:../../tmk_core/common/bootmagic.c **** #endif
  94:../../tmk_core/common/bootmagic.c **** 
  95:../../tmk_core/common/bootmagic.c ****     /* default layer */
  96:../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 104:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 105:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 106:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 107:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 108:../../tmk_core/common/bootmagic.c ****     } else {
 109:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 110:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 111:../../tmk_core/common/bootmagic.c ****     }
 112:../../tmk_core/common/bootmagic.c **** }
 113:../../tmk_core/common/bootmagic.c **** 
 114:../../tmk_core/common/bootmagic.c **** static bool scan_key(uint16_t code)
 115:../../tmk_core/common/bootmagic.c **** {
  15               		.loc 1 115 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 BF92      		push r11
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 11, -2
  22 0002 CF92      		push r12
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 12, -3
  26 0004 DF92      		push r13
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 13, -4
  30 0006 EF92      		push r14
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 14, -5
  34 0008 FF92      		push r15
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 15, -6
  38 000a 0F93      		push r16
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 16, -7
  42 000c 1F93      		push r17
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 17, -8
  46 000e CF93      		push r28
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 28, -9
  50 0010 DF93      		push r29
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 29, -10
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 9 */
  57               	.L__stack_usage = 9
  58 0012 EC01      		movw r28,r24
  59               	.LVL1:
  60               	.LBB6:
 116:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  61               		.loc 1 116 0
  62 0014 B12C      		mov r11,__zero_reg__
  63               	.LBB7:
  64               	.LBB8:
 117:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 118:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 119:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  65               		.loc 1 119 0
  66 0016 01E0      		ldi r16,lo8(1)
  67 0018 10E0      		ldi r17,0
  68               	.LVL2:
  69               	.L8:
  70               	.LBE8:
 117:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  71               		.loc 1 117 0
  72 001a 8B2D      		mov r24,r11
  73 001c 0E94 0000 		call matrix_get_row
  74               	.LVL3:
  75 0020 7C01      		movw r14,r24
  76               	.LVL4:
  77 0022 C12C      		mov r12,__zero_reg__
  78 0024 D12C      		mov r13,__zero_reg__
  79               	.LVL5:
  80               	.L7:
  81               	.LBB10:
  82               		.loc 1 119 0
  83 0026 C801      		movw r24,r16
  84 0028 0C2C      		mov r0,r12
  85 002a 00C0      		rjmp 2f
  86               		1:
  87 002c 880F      		lsl r24
  88 002e 991F      		rol r25
  89               		2:
  90 0030 0A94      		dec r0
  91 0032 02F4      		brpl 1b
  92 0034 8E21      		and r24,r14
  93 0036 9F21      		and r25,r15
  94 0038 892B      		or r24,r25
  95 003a 01F0      		breq .L2
  96               	.LBB9:
 120:../../tmk_core/common/bootmagic.c ****                 // read key from Layer 0
 121:../../tmk_core/common/bootmagic.c ****                 action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
  97               		.loc 1 121 0
  98 003c 6C2D      		mov r22,r12
  99 003e 7B2D      		mov r23,r11
 100 0040 80E0      		ldi r24,0
 101 0042 0E94 0000 		call action_for_key
 102               	.LVL6:
 122:../../tmk_core/common/bootmagic.c ****                 if (action.code == code ||
 103               		.loc 1 122 0
 104 0046 8C17      		cp r24,r28
 105 0048 9D07      		cpc r25,r29
 106 004a 01F0      		breq .L3
 107               		.loc 1 122 0 is_stmt 0 discriminator 1
 108 004c 292F      		mov r18,r25
 109 004e 207E      		andi r18,lo8(-32)
 110 0050 392F      		mov r19,r25
 111 0052 307C      		andi r19,lo8(-64)
 112 0054 01F0      		breq .L4
 123:../../tmk_core/common/bootmagic.c ****                     ((action.kind.id == ACT_LMODS ||
 124:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS ||
 125:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LMODS_TAP ||
 126:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS_TAP ||
 113               		.loc 1 126 0 is_stmt 1
 114 0056 203A      		cpi r18,lo8(-96)
 115 0058 01F4      		brne .L2
 116               	.L4:
 127:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP ||
 128:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP_EXT) &&
 129:../../tmk_core/common/bootmagic.c ****                      action.key.code == code)) {
 117               		.loc 1 129 0
 118 005a 90E0      		ldi r25,0
 128:../../tmk_core/common/bootmagic.c ****                      action.key.code == code)) {
 119               		.loc 1 128 0
 120 005c C817      		cp r28,r24
 121 005e D907      		cpc r29,r25
 122 0060 01F4      		brne .L2
 123               	.L3:
 130:../../tmk_core/common/bootmagic.c ****                     return true;
 124               		.loc 1 130 0
 125 0062 81E0      		ldi r24,lo8(1)
 126               	.LVL7:
 127               	.L1:
 128               	/* epilogue start */
 129               	.LBE9:
 130               	.LBE10:
 131               	.LBE7:
 132               	.LBE6:
 131:../../tmk_core/common/bootmagic.c ****                 }
 132:../../tmk_core/common/bootmagic.c ****             }
 133:../../tmk_core/common/bootmagic.c ****         }
 134:../../tmk_core/common/bootmagic.c ****     }
 135:../../tmk_core/common/bootmagic.c ****     return false;
 136:../../tmk_core/common/bootmagic.c **** }
 133               		.loc 1 136 0
 134 0064 DF91      		pop r29
 135 0066 CF91      		pop r28
 136               	.LVL8:
 137 0068 1F91      		pop r17
 138 006a 0F91      		pop r16
 139 006c FF90      		pop r15
 140 006e EF90      		pop r14
 141               	.LVL9:
 142 0070 DF90      		pop r13
 143 0072 CF90      		pop r12
 144 0074 BF90      		pop r11
 145               	.LVL10:
 146 0076 0895      		ret
 147               	.LVL11:
 148               	.L2:
 149 0078 8FEF      		ldi r24,-1
 150 007a C81A      		sub r12,r24
 151 007c D80A      		sbc r13,r24
 152               	.LVL12:
 153               	.LBB13:
 154               	.LBB12:
 155               	.LBB11:
 118:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
 156               		.loc 1 118 0 discriminator 2
 157 007e 8EE0      		ldi r24,14
 158 0080 C816      		cp r12,r24
 159 0082 D104      		cpc r13,__zero_reg__
 160 0084 01F4      		brne .L7
 161               	.LBE11:
 162               	.LBE12:
 116:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 163               		.loc 1 116 0 discriminator 2
 164 0086 B394      		inc r11
 165               	.LVL13:
 166 0088 85E0      		ldi r24,lo8(5)
 167 008a B812      		cpse r11,r24
 168 008c 00C0      		rjmp .L8
 169               	.LBE13:
 135:../../tmk_core/common/bootmagic.c **** }
 170               		.loc 1 135 0
 171 008e 80E0      		ldi r24,0
 172 0090 00C0      		rjmp .L1
 173               		.cfi_endproc
 174               	.LFE104:
 176               		.section	.text.bootmagic_scan_key,"ax",@progbits
 177               	.global	bootmagic_scan_key
 179               	bootmagic_scan_key:
 180               	.LFB105:
 137:../../tmk_core/common/bootmagic.c **** 
 138:../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_key(uint16_t code)
 139:../../tmk_core/common/bootmagic.c **** {
 181               		.loc 1 139 0
 182               		.cfi_startproc
 183               	.LVL14:
 184 0000 CF93      		push r28
 185               	.LCFI9:
 186               		.cfi_def_cfa_offset 3
 187               		.cfi_offset 28, -2
 188 0002 DF93      		push r29
 189               	.LCFI10:
 190               		.cfi_def_cfa_offset 4
 191               		.cfi_offset 29, -3
 192               	/* prologue: function */
 193               	/* frame size = 0 */
 194               	/* stack size = 2 */
 195               	.L__stack_usage = 2
 196 0004 EC01      		movw r28,r24
 140:../../tmk_core/common/bootmagic.c ****     if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
 197               		.loc 1 140 0
 198 0006 8CE2      		ldi r24,lo8(44)
 199 0008 90E0      		ldi r25,0
 200               	.LVL15:
 201 000a 0E94 0000 		call scan_key
 202               	.LVL16:
 203 000e 8823      		tst r24
 204 0010 01F0      		breq .L17
 141:../../tmk_core/common/bootmagic.c **** 
 142:../../tmk_core/common/bootmagic.c ****     return scan_key(code);
 205               		.loc 1 142 0
 206 0012 CE01      		movw r24,r28
 207               	/* epilogue start */
 143:../../tmk_core/common/bootmagic.c **** }
 208               		.loc 1 143 0
 209 0014 DF91      		pop r29
 210 0016 CF91      		pop r28
 211               	.LVL17:
 142:../../tmk_core/common/bootmagic.c **** }
 212               		.loc 1 142 0
 213 0018 0C94 0000 		jmp scan_key
 214               	.LVL18:
 215               	.L17:
 216               		.loc 1 143 0
 217 001c 80E0      		ldi r24,0
 218               	/* epilogue start */
 219 001e DF91      		pop r29
 220 0020 CF91      		pop r28
 221               	.LVL19:
 222 0022 0895      		ret
 223               		.cfi_endproc
 224               	.LFE105:
 226               		.section	.text.bootmagic,"ax",@progbits
 227               	.global	bootmagic
 229               	bootmagic:
 230               	.LFB103:
  18:../../tmk_core/common/bootmagic.c ****     /* check signature */
 231               		.loc 1 18 0
 232               		.cfi_startproc
 233 0000 CF93      		push r28
 234               	.LCFI11:
 235               		.cfi_def_cfa_offset 3
 236               		.cfi_offset 28, -2
 237               	/* prologue: function */
 238               	/* frame size = 0 */
 239               	/* stack size = 1 */
 240               	.L__stack_usage = 1
  20:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 241               		.loc 1 20 0
 242 0002 0E94 0000 		call eeconfig_is_enabled
 243               	.LVL20:
 244 0006 8111      		cpse r24,__zero_reg__
 245 0008 00C0      		rjmp .L20
  21:../../tmk_core/common/bootmagic.c ****     }
 246               		.loc 1 21 0
 247 000a 0E94 0000 		call eeconfig_init
 248               	.LVL21:
 249               	.L20:
  25:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
 250               		.loc 1 25 0
 251 000e 80E0      		ldi r24,lo8(__c.4863)
 252 0010 90E0      		ldi r25,hi8(__c.4863)
 253 0012 0E94 0000 		call xputs
 254               	.LVL22:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 255               		.loc 1 27 0
 256 0016 C5E6      		ldi r28,lo8(101)
 257               	.LVL23:
 258               	.L21:
 259 0018 C150      		subi r28,lo8(-(-1))
 260               	.LVL24:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 261               		.loc 1 27 0 is_stmt 0 discriminator 1
 262 001a 01F0      		breq .+2
 263 001c 00C0      		rjmp .L22
  28:../../tmk_core/common/bootmagic.c **** 
 264               		.loc 1 28 0 is_stmt 1
 265 001e 80E0      		ldi r24,lo8(__c.4869)
 266 0020 90E0      		ldi r25,hi8(__c.4869)
 267 0022 0E94 0000 		call xputs
 268               	.LVL25:
  31:../../tmk_core/common/bootmagic.c ****         return;
 269               		.loc 1 31 0
 270 0026 89E2      		ldi r24,lo8(41)
 271 0028 90E0      		ldi r25,0
 272 002a 0E94 0000 		call bootmagic_scan_key
 273               	.LVL26:
 274 002e 8111      		cpse r24,__zero_reg__
 275 0030 00C0      		rjmp .L19
  36:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 276               		.loc 1 36 0
 277 0032 8AE2      		ldi r24,lo8(42)
 278 0034 90E0      		ldi r25,0
 279 0036 0E94 0000 		call bootmagic_scan_key
 280               	.LVL27:
 281 003a 8111      		cpse r24,__zero_reg__
  37:../../tmk_core/common/bootmagic.c ****     }
 282               		.loc 1 37 0
 283 003c 0E94 0000 		call eeconfig_init
 284               	.LVL28:
 285               	.L24:
  41:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 286               		.loc 1 41 0
 287 0040 85E0      		ldi r24,lo8(5)
 288 0042 90E0      		ldi r25,0
 289 0044 0E94 0000 		call bootmagic_scan_key
 290               	.LVL29:
 291 0048 8111      		cpse r24,__zero_reg__
  42:../../tmk_core/common/bootmagic.c ****     }
 292               		.loc 1 42 0
 293 004a 0E94 0000 		call bootloader_jump
 294               	.LVL30:
 295               	.L25:
  46:../../tmk_core/common/bootmagic.c **** 
 296               		.loc 1 46 0
 297 004e 0E94 0000 		call hook_bootmagic
 298               	.LVL31:
  49:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 299               		.loc 1 49 0
 300 0052 0E94 0000 		call eeconfig_read_debug
 301               	.LVL32:
 302 0056 8093 0000 		sts debug_config,r24
  50:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 303               		.loc 1 50 0
 304 005a 87E0      		ldi r24,lo8(7)
 305 005c 90E0      		ldi r25,0
 306 005e 0E94 0000 		call bootmagic_scan_key
 307               	.LVL33:
 308 0062 8823      		tst r24
 309 0064 01F0      		breq .L26
  51:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 310               		.loc 1 51 0
 311 0066 8BE1      		ldi r24,lo8(27)
 312 0068 90E0      		ldi r25,0
 313 006a 0E94 0000 		call bootmagic_scan_key
 314               	.LVL34:
 315 006e 8823      		tst r24
 316 0070 01F4      		brne .+2
 317 0072 00C0      		rjmp .L27
  52:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 318               		.loc 1 52 0
 319 0074 8091 0000 		lds r24,debug_config
 320 0078 81FB      		bst r24,1
 321 007a 9927      		clr r25
 322 007c 90F9      		bld r25,0
 323 007e 21E0      		ldi r18,lo8(1)
 324 0080 9227      		eor r25,r18
 325 0082 90FB      		bst r25,0
 326 0084 81F9      		bld r24,1
 327               	.L98:
  54:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 328               		.loc 1 54 0
 329 0086 8093 0000 		sts debug_config,r24
 330               	.L26:
  61:../../tmk_core/common/bootmagic.c **** 
 331               		.loc 1 61 0
 332 008a 8091 0000 		lds r24,debug_config
 333 008e 0E94 0000 		call eeconfig_write_debug
 334               	.LVL35:
  64:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 335               		.loc 1 64 0
 336 0092 0E94 0000 		call eeconfig_read_keymap
 337               	.LVL36:
 338 0096 8093 0000 		sts keymap_config,r24
  65:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 339               		.loc 1 65 0
 340 009a 80EE      		ldi r24,lo8(-32)
 341 009c 90E0      		ldi r25,0
 342 009e 0E94 0000 		call bootmagic_scan_key
 343               	.LVL37:
 344 00a2 8823      		tst r24
 345 00a4 01F0      		breq .L30
  66:../../tmk_core/common/bootmagic.c ****     }
 346               		.loc 1 66 0
 347 00a6 8091 0000 		lds r24,keymap_config
 348 00aa 982F      		mov r25,r24
 349 00ac 9095      		com r25
 350 00ae 90FB      		bst r25,0
 351 00b0 80F9      		bld r24,0
 352 00b2 8093 0000 		sts keymap_config,r24
 353               	.L30:
  68:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 354               		.loc 1 68 0
 355 00b6 89E3      		ldi r24,lo8(57)
 356 00b8 90E0      		ldi r25,0
 357 00ba 0E94 0000 		call bootmagic_scan_key
 358               	.LVL38:
 359 00be 8823      		tst r24
 360 00c0 01F0      		breq .L31
  69:../../tmk_core/common/bootmagic.c ****     }
 361               		.loc 1 69 0
 362 00c2 8091 0000 		lds r24,keymap_config
 363 00c6 81FB      		bst r24,1
 364 00c8 9927      		clr r25
 365 00ca 90F9      		bld r25,0
 366 00cc 21E0      		ldi r18,lo8(1)
 367 00ce 9227      		eor r25,r18
 368 00d0 90FB      		bst r25,0
 369 00d2 81F9      		bld r24,1
 370 00d4 8093 0000 		sts keymap_config,r24
 371               	.L31:
  71:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 372               		.loc 1 71 0
 373 00d8 82EE      		ldi r24,lo8(-30)
 374 00da 90E0      		ldi r25,0
 375 00dc 0E94 0000 		call bootmagic_scan_key
 376               	.LVL39:
 377 00e0 8823      		tst r24
 378 00e2 01F0      		breq .L32
  72:../../tmk_core/common/bootmagic.c ****     }
 379               		.loc 1 72 0
 380 00e4 8091 0000 		lds r24,keymap_config
 381 00e8 82FB      		bst r24,2
 382 00ea 9927      		clr r25
 383 00ec 90F9      		bld r25,0
 384 00ee 21E0      		ldi r18,lo8(1)
 385 00f0 9227      		eor r25,r18
 386 00f2 90FB      		bst r25,0
 387 00f4 82F9      		bld r24,2
 388 00f6 8093 0000 		sts keymap_config,r24
 389               	.L32:
  74:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 390               		.loc 1 74 0
 391 00fa 86EE      		ldi r24,lo8(-26)
 392 00fc 90E0      		ldi r25,0
 393 00fe 0E94 0000 		call bootmagic_scan_key
 394               	.LVL40:
 395 0102 8823      		tst r24
 396 0104 01F0      		breq .L33
  75:../../tmk_core/common/bootmagic.c ****     }
 397               		.loc 1 75 0
 398 0106 8091 0000 		lds r24,keymap_config
 399 010a 83FB      		bst r24,3
 400 010c 9927      		clr r25
 401 010e 90F9      		bld r25,0
 402 0110 21E0      		ldi r18,lo8(1)
 403 0112 9227      		eor r25,r18
 404 0114 90FB      		bst r25,0
 405 0116 83F9      		bld r24,3
 406 0118 8093 0000 		sts keymap_config,r24
 407               	.L33:
  77:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 408               		.loc 1 77 0
 409 011c 83EE      		ldi r24,lo8(-29)
 410 011e 90E0      		ldi r25,0
 411 0120 0E94 0000 		call bootmagic_scan_key
 412               	.LVL41:
 413 0124 8823      		tst r24
 414 0126 01F0      		breq .L34
  78:../../tmk_core/common/bootmagic.c ****     }
 415               		.loc 1 78 0
 416 0128 8091 0000 		lds r24,keymap_config
 417 012c 84FB      		bst r24,4
 418 012e 9927      		clr r25
 419 0130 90F9      		bld r25,0
 420 0132 21E0      		ldi r18,lo8(1)
 421 0134 9227      		eor r25,r18
 422 0136 90FB      		bst r25,0
 423 0138 84F9      		bld r24,4
 424 013a 8093 0000 		sts keymap_config,r24
 425               	.L34:
  80:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 426               		.loc 1 80 0
 427 013e 85E3      		ldi r24,lo8(53)
 428 0140 90E0      		ldi r25,0
 429 0142 0E94 0000 		call bootmagic_scan_key
 430               	.LVL42:
 431 0146 8823      		tst r24
 432 0148 01F0      		breq .L35
  81:../../tmk_core/common/bootmagic.c ****     }
 433               		.loc 1 81 0
 434 014a 8091 0000 		lds r24,keymap_config
 435 014e 85FB      		bst r24,5
 436 0150 9927      		clr r25
 437 0152 90F9      		bld r25,0
 438 0154 21E0      		ldi r18,lo8(1)
 439 0156 9227      		eor r25,r18
 440 0158 90FB      		bst r25,0
 441 015a 85F9      		bld r24,5
 442 015c 8093 0000 		sts keymap_config,r24
 443               	.L35:
  83:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 444               		.loc 1 83 0
 445 0160 81E3      		ldi r24,lo8(49)
 446 0162 90E0      		ldi r25,0
 447 0164 0E94 0000 		call bootmagic_scan_key
 448               	.LVL43:
 449 0168 8823      		tst r24
 450 016a 01F0      		breq .L36
  84:../../tmk_core/common/bootmagic.c ****     }
 451               		.loc 1 84 0
 452 016c 8091 0000 		lds r24,keymap_config
 453 0170 86FB      		bst r24,6
 454 0172 9927      		clr r25
 455 0174 90F9      		bld r25,0
 456 0176 21E0      		ldi r18,lo8(1)
 457 0178 9227      		eor r25,r18
 458 017a 90FB      		bst r25,0
 459 017c 86F9      		bld r24,6
 460 017e 8093 0000 		sts keymap_config,r24
 461               	.L36:
  86:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 462               		.loc 1 86 0
 463 0182 81E1      		ldi r24,lo8(17)
 464 0184 90E0      		ldi r25,0
 465 0186 0E94 0000 		call bootmagic_scan_key
 466               	.LVL44:
 467 018a 8823      		tst r24
 468 018c 01F0      		breq .L37
  87:../../tmk_core/common/bootmagic.c ****     }
 469               		.loc 1 87 0
 470 018e 8091 0000 		lds r24,keymap_config
 471 0192 87FB      		bst r24,7
 472 0194 9927      		clr r25
 473 0196 90F9      		bld r25,0
 474 0198 21E0      		ldi r18,lo8(1)
 475 019a 9227      		eor r25,r18
 476 019c 90FB      		bst r25,0
 477 019e 87F9      		bld r24,7
 478 01a0 8093 0000 		sts keymap_config,r24
 479               	.L37:
  89:../../tmk_core/common/bootmagic.c **** 
 480               		.loc 1 89 0
 481 01a4 8091 0000 		lds r24,keymap_config
 482 01a8 0E94 0000 		call eeconfig_write_keymap
 483               	.LVL45:
  92:../../tmk_core/common/bootmagic.c **** #endif
 484               		.loc 1 92 0
 485 01ac 8091 0000 		lds r24,keymap_config
 486 01b0 87FB      		bst r24,7
 487 01b2 8827      		clr r24
 488 01b4 80F9      		bld r24,0
 489 01b6 8093 0000 		sts keyboard_nkro,r24
 490               	.LVL46:
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 491               		.loc 1 97 0
 492 01ba 87E2      		ldi r24,lo8(39)
 493 01bc 90E0      		ldi r25,0
 494 01be 0E94 0000 		call bootmagic_scan_key
 495               	.LVL47:
 496 01c2 C82F      		mov r28,r24
 497               	.LVL48:
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 498               		.loc 1 98 0
 499 01c4 8EE1      		ldi r24,lo8(30)
 500 01c6 90E0      		ldi r25,0
 501               	.LVL49:
 502 01c8 0E94 0000 		call bootmagic_scan_key
 503               	.LVL50:
 504 01cc 8111      		cpse r24,__zero_reg__
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 505               		.loc 1 98 0 is_stmt 0 discriminator 1
 506 01ce C260      		ori r28,lo8(2)
 507               	.LVL51:
 508               	.L38:
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 509               		.loc 1 99 0 is_stmt 1
 510 01d0 8FE1      		ldi r24,lo8(31)
 511 01d2 90E0      		ldi r25,0
 512 01d4 0E94 0000 		call bootmagic_scan_key
 513               	.LVL52:
 514 01d8 8111      		cpse r24,__zero_reg__
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 515               		.loc 1 99 0 is_stmt 0 discriminator 1
 516 01da C460      		ori r28,lo8(4)
 517               	.LVL53:
 518               	.L39:
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 519               		.loc 1 100 0 is_stmt 1
 520 01dc 80E2      		ldi r24,lo8(32)
 521 01de 90E0      		ldi r25,0
 522 01e0 0E94 0000 		call bootmagic_scan_key
 523               	.LVL54:
 524 01e4 8111      		cpse r24,__zero_reg__
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 525               		.loc 1 100 0 is_stmt 0 discriminator 1
 526 01e6 C860      		ori r28,lo8(8)
 527               	.LVL55:
 528               	.L40:
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 529               		.loc 1 101 0 is_stmt 1
 530 01e8 81E2      		ldi r24,lo8(33)
 531 01ea 90E0      		ldi r25,0
 532 01ec 0E94 0000 		call bootmagic_scan_key
 533               	.LVL56:
 534 01f0 8111      		cpse r24,__zero_reg__
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 535               		.loc 1 101 0 is_stmt 0 discriminator 1
 536 01f2 C061      		ori r28,lo8(16)
 537               	.LVL57:
 538               	.L41:
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 539               		.loc 1 102 0 is_stmt 1
 540 01f4 82E2      		ldi r24,lo8(34)
 541 01f6 90E0      		ldi r25,0
 542 01f8 0E94 0000 		call bootmagic_scan_key
 543               	.LVL58:
 544 01fc 8111      		cpse r24,__zero_reg__
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 545               		.loc 1 102 0 is_stmt 0 discriminator 1
 546 01fe C062      		ori r28,lo8(32)
 547               	.LVL59:
 548               	.L42:
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 549               		.loc 1 103 0 is_stmt 1
 550 0200 83E2      		ldi r24,lo8(35)
 551 0202 90E0      		ldi r25,0
 552 0204 0E94 0000 		call bootmagic_scan_key
 553               	.LVL60:
 554 0208 8111      		cpse r24,__zero_reg__
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 555               		.loc 1 103 0 is_stmt 0 discriminator 1
 556 020a C064      		ori r28,lo8(64)
 557               	.LVL61:
 558               	.L43:
 104:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 559               		.loc 1 104 0 is_stmt 1
 560 020c 84E2      		ldi r24,lo8(36)
 561 020e 90E0      		ldi r25,0
 562 0210 0E94 0000 		call bootmagic_scan_key
 563               	.LVL62:
 564 0214 8823      		tst r24
 565 0216 01F0      		breq .L44
 104:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 566               		.loc 1 104 0 is_stmt 0 discriminator 1
 567 0218 C068      		ori r28,lo8(-128)
 568               	.LVL63:
 569               	.L45:
 106:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 570               		.loc 1 106 0 is_stmt 1
 571 021a 8C2F      		mov r24,r28
 572 021c 0E94 0000 		call eeconfig_write_default_layer
 573               	.LVL64:
 107:../../tmk_core/common/bootmagic.c ****     } else {
 574               		.loc 1 107 0
 575 0220 6C2F      		mov r22,r28
 576               	.LVL65:
 577               	.L100:
 110:../../tmk_core/common/bootmagic.c ****     }
 578               		.loc 1 110 0
 579 0222 70E0      		ldi r23,0
 580 0224 80E0      		ldi r24,0
 581 0226 90E0      		ldi r25,0
 582               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** 
 583               		.loc 1 112 0
 584 0228 CF91      		pop r28
 110:../../tmk_core/common/bootmagic.c ****     }
 585               		.loc 1 110 0
 586 022a 0C94 0000 		jmp default_layer_set
 587               	.LVL66:
 588               	.L22:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 589               		.loc 1 27 0 discriminator 2
 590 022e 0E94 0000 		call matrix_scan
 591               	.LVL67:
 592               	.LBB14:
 593               	.LBB15:
 594               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 595               		.loc 2 187 0 discriminator 2
 596 0232 8FE3      		ldi r24,lo8(-25537)
 597 0234 9CE9      		ldi r25,hi8(-25537)
 598 0236 0197      	1:	sbiw r24,1
 599 0238 01F4      		brne 1b
 600 023a 00C0      		rjmp .
 601 023c 0000      		nop
 602 023e 00C0      		rjmp .L21
 603               	.LVL68:
 604               	.L27:
 605               	.LBE15:
 606               	.LBE14:
  53:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 607               		.loc 1 53 0
 608 0240 8EE0      		ldi r24,lo8(14)
 609 0242 90E0      		ldi r25,0
 610 0244 0E94 0000 		call bootmagic_scan_key
 611               	.LVL69:
 612 0248 8823      		tst r24
 613 024a 01F0      		breq .L28
  54:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 614               		.loc 1 54 0
 615 024c 8091 0000 		lds r24,debug_config
 616 0250 82FB      		bst r24,2
 617 0252 9927      		clr r25
 618 0254 90F9      		bld r25,0
 619 0256 21E0      		ldi r18,lo8(1)
 620 0258 9227      		eor r25,r18
 621 025a 90FB      		bst r25,0
 622 025c 82F9      		bld r24,2
 623 025e 00C0      		rjmp .L98
 624               	.L28:
  55:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 625               		.loc 1 55 0
 626 0260 80E1      		ldi r24,lo8(16)
 627 0262 90E0      		ldi r25,0
 628 0264 0E94 0000 		call bootmagic_scan_key
 629               	.LVL70:
 630 0268 9091 0000 		lds r25,debug_config
 631 026c 8823      		tst r24
 632 026e 01F0      		breq .L29
  56:../../tmk_core/common/bootmagic.c ****         } else {
 633               		.loc 1 56 0
 634 0270 93FB      		bst r25,3
 635 0272 8827      		clr r24
 636 0274 80F9      		bld r24,0
 637 0276 21E0      		ldi r18,lo8(1)
 638 0278 8227      		eor r24,r18
 639 027a 80FB      		bst r24,0
 640 027c 93F9      		bld r25,3
 641               	.L99:
  58:../../tmk_core/common/bootmagic.c ****         }
 642               		.loc 1 58 0
 643 027e 9093 0000 		sts debug_config,r25
 644 0282 00C0      		rjmp .L26
 645               	.L29:
 646 0284 892F      		mov r24,r25
 647 0286 8095      		com r24
 648 0288 80FB      		bst r24,0
 649 028a 90F9      		bld r25,0
 650 028c 00C0      		rjmp .L99
 651               	.LVL71:
 652               	.L44:
 105:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 653               		.loc 1 105 0
 654 028e C111      		cpse r28,__zero_reg__
 655 0290 00C0      		rjmp .L45
 109:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 656               		.loc 1 109 0
 657 0292 0E94 0000 		call eeconfig_read_default_layer
 658               	.LVL72:
 110:../../tmk_core/common/bootmagic.c ****     }
 659               		.loc 1 110 0
 660 0296 682F      		mov r22,r24
 661 0298 00C0      		rjmp .L100
 662               	.LVL73:
 663               	.L19:
 664               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** 
 665               		.loc 1 112 0
 666 029a CF91      		pop r28
 667               	.LVL74:
 668 029c 0895      		ret
 669               		.cfi_endproc
 670               	.LFE103:
 672               		.section	.progmem.data.__c.4869,"a",@progbits
 675               	__c.4869:
 676 0000 646F 6E65 		.string	"done.\n"
 676      2E0A 00
 677               		.section	.progmem.data.__c.4863,"a",@progbits
 680               	__c.4863:
 681 0000 626F 6F74 		.string	"bootmagic scan: ... "
 681      6D61 6769 
 681      6320 7363 
 681      616E 3A20 
 681      2E2E 2E20 
 682               		.comm	keymap_config,1,1
 683               		.text
 684               	.Letext0:
 685               		.file 3 "/usr/avr/include/stdint.h"
 686               		.file 4 "../../tmk_core/common/matrix.h"
 687               		.file 5 "../../tmk_core/common/debug.h"
 688               		.file 6 "../../tmk_core/common/avr/xprintf.h"
 689               		.file 7 "../../tmk_core/common/keyboard.h"
 690               		.file 8 "../../tmk_core/common/keycode.h"
 691               		.file 9 "../../tmk_core/common/action_code.h"
 692               		.file 10 "../../tmk_core/common/keymap.h"
 693               		.file 11 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 694               		.file 12 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 695               		.file 13 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 696               		.file 14 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 697               		.file 15 "/usr/avr/include/stdio.h"
 698               		.file 16 "../../tmk_core/common/host.h"
 699               		.file 17 "../../tmk_core/common/action_layer.h"
 700               		.file 18 "../../tmk_core/common/action.h"
 701               		.file 19 "../../tmk_core/common/eeconfig.h"
 702               		.file 20 "../../tmk_core/common/bootloader.h"
 703               		.file 21 "../../tmk_core/common/hook.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
     /tmp/cckp7txM.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cckp7txM.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cckp7txM.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cckp7txM.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cckp7txM.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cckp7txM.s:12     .text.scan_key:0000000000000000 scan_key
     /tmp/cckp7txM.s:179    .text.bootmagic_scan_key:0000000000000000 bootmagic_scan_key
     /tmp/cckp7txM.s:229    .text.bootmagic:0000000000000000 bootmagic
     /tmp/cckp7txM.s:680    .progmem.data.__c.4863:0000000000000000 __c.4863
     /tmp/cckp7txM.s:675    .progmem.data.__c.4869:0000000000000000 __c.4869
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
action_for_key
eeconfig_is_enabled
eeconfig_init
xputs
bootloader_jump
hook_bootmagic
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
keyboard_nkro
eeconfig_write_default_layer
default_layer_set
matrix_scan
eeconfig_read_default_layer
__do_clear_bss
