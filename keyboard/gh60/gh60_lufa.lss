
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000546e  00005502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000546e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cf  0080013a  0080013a  0000553c  2**0
                  ALLOC
  3 .noinit       00000004  00800209  00800209  0000553c  2**0
                  ALLOC
  4 .stab         00000ec4  00000000  00000000  0000553c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000185  00000000  00000000  00006400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000021  00000000  00000000  00006585  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000065a8  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000910  00000000  00000000  000065e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00013093  00000000  00000000  00006ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004c9f  00000000  00000000  00019f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000084d7  00000000  00000000  0001ec2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a60  00000000  00000000  00027104  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000041f5  00000000  00000000  00028b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009178  00000000  00000000  0002cd59  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de8  00000000  00000000  00035ed1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__ctors_end>
       4:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
       8:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
       c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      10:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      14:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      18:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      1c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      20:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      24:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      28:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__vector_10>
      2c:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__vector_11>
      30:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__vector_12>
      34:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      38:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      3c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      40:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      44:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      48:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      4c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      50:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      54:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__vector_21>
      58:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      5c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      60:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      64:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      68:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      6c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      70:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      74:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      78:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      7c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      80:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      84:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      88:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      8c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      90:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      94:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      98:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      9c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      a0:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      a4:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>
      a8:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	29 1e       	adc	r2, r25
      ae:	1f 20       	and	r1, r15
      b0:	21 22       	and	r2, r17
      b2:	23 24       	eor	r2, r3
      b4:	25 26       	eor	r2, r21
      b6:	27 2d       	mov	r18, r7
      b8:	2e 2a       	or	r2, r30
      ba:	2b 14       	cp	r2, r11
      bc:	1a 08       	sbc	r1, r10
      be:	15 17       	cp	r17, r21
      c0:	1c 18       	sub	r1, r12
      c2:	0c 12       	cpse	r0, r28
      c4:	13 2f       	mov	r17, r19
      c6:	30 00       	.word	0x0030	; ????
      c8:	e0 04       	cpc	r14, r0
      ca:	16 07       	cpc	r17, r22
      cc:	09 0a       	sbc	r0, r25
      ce:	0b 0d       	add	r16, r11
      d0:	0e 0f       	add	r16, r30
      d2:	33 34       	cpi	r19, 0x43	; 67
      d4:	00 28       	or	r0, r0
      d6:	e1 00       	.word	0x00e1	; ????
      d8:	1d 1b       	sub	r17, r29
      da:	06 19       	sub	r16, r6
      dc:	05 11       	cpse	r16, r5
      de:	10 36       	cpi	r17, 0x60	; 96
      e0:	37 38       	cpi	r19, 0x87	; 135
      e2:	e5 e7       	ldi	r30, 0x75	; 117
      e4:	e2 00       	.word	0x00e2	; ????
      e6:	00 e2       	ldi	r16, 0x20	; 32
      e8:	00 00       	nop
      ea:	00 2c       	mov	r0, r0
      ec:	00 00       	nop
      ee:	00 c0       	rjmp	.+0      	; 0xf0 <__trampolines_end+0x44>
      f0:	00 e4       	ldi	r16, 0x40	; 64

000000f2 <__c.1920>:
      f2:	0a 00                                               ..

000000f4 <__c.1918>:
      f4:	25 30 32 58 00                                      %02X.

000000f9 <__c.1916>:
      f9:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000103 <__c.4969>:
     103:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     113:	00                                                  .

00000114 <__c.4967>:
     114:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     124:	00                                                  .

00000125 <__c.4962>:
     125:	0d 0a 69 6e 69 74 0a 00                             ..init..

0000012d <__c.4856>:
     12d:	5b 44 5d 00                                         [D].

00000131 <__c.4851>:
     131:	5b 43 5d 00                                         [C].

00000135 <ProductString>:
     135:	0a 03 47 00 48 00 36 00 30 00 00 00                 ..G.H.6.0...

00000141 <ManufacturerString>:
     141:	12 03 67 00 65 00 65 00 6b 00 68 00 61 00 63 00     ..g.e.e.k.h.a.c.
     151:	6b 00 00 00                                         k...

00000155 <LanguageString>:
     155:	04 03 09 04                                         ....

00000159 <ConfigurationDescriptor>:
     159:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     169:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     179:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     189:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     199:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     1a9:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     1b9:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     1c9:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     1d9:	01 00 01 22 39 00 07 05 85 03 20 00 01              ..."9..... ..

000001e6 <DeviceDescriptor>:
     1e6:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     1f6:	00 01                                               ..

000001f8 <NKROReport>:
     1f8:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     208:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     218:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
     228:	25 01 95 f8 75 01 81 02 c0                          %...u....

00000231 <ConsoleReport>:
     231:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     241:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     251:	02 c0                                               ..

00000253 <ExtrakeyReport>:
     253:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
     263:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     273:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     283:	10 95 01 81 00 c0                                   ......

00000289 <MouseReport>:
     289:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     299:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     2a9:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     2b9:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     2c9:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000002d6 <KeyboardReport>:
     2d6:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     2e6:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     2f6:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     306:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000316 <__c.4575>:
     316:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000326 <__c.4570>:
     326:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000334 <__c.4562>:
     334:	0a 00                                               ..

00000336 <__c.4557>:
     336:	25 30 32 58 20 00                                   %02X .

0000033c <__c.4554>:
     33c:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

00000347 <__c.4917>:
     347:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000352 <__c.1776>:
     352:	25 30 32 58 3a 20 25 30 31 36 62 25 73 0a 00        %02X: %016b%s..

00000361 <__c.1773>:
     361:	72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41 42     r/c 0123456789AB
     371:	43 44 45 46 0a 00                                   CDEF..

00000377 <__c.4702>:
     377:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     387:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000395 <__c.4697>:
     395:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     3a5:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000003b3 <__c.4869>:
     3b3:	64 6f 6e 65 2e 0a 00                                done...

000003ba <__c.4863>:
     3ba:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     3ca:	2e 2e 2e 20 00                                      ... .

000003cf <__c.4634>:
     3cf:	29 0a 00                                            )..

000003d2 <__c.4632>:
     3d2:	25 75 00                                            %u.

000003d5 <__c.4630>:
     3d5:	2f 00                                               /.

000003d7 <__c.4628>:
     3d7:	25 75 00                                            %u.

000003da <__c.4626>:
     3da:	5d 28 00                                            ](.

000003dd <__c.4624>:
     3dd:	25 64 00                                            %d.

000003e0 <__c.4622>:
     3e0:	20 00                                                .

000003e2 <__c.4620>:
     3e2:	25 64 00                                            %d.

000003e5 <__c.4618>:
     3e5:	20 00                                                .

000003e7 <__c.4616>:
     3e7:	25 64 00                                            %d.

000003ea <__c.4614>:
     3ea:	20 00                                                .

000003ec <__c.4612>:
     3ec:	25 64 00                                            %d.

000003ef <__c.4610>:
     3ef:	7c 00                                               |.

000003f1 <__c.4608>:
     3f1:	25 30 32 58 00                                      %02X.

000003f6 <__c.4606>:
     3f6:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     406:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     416:	20 5b 00                                             [.

00000419 <__c.5242>:
     419:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     429:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000434 <__c.5239>:
     434:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     444:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000044d <__c.5236>:
     44d:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     45d:	20 25 64 0a 00                                       %d..

00000462 <__c.5233>:
     462:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     472:	64 0a 00                                            d..

00000475 <__c.5230>:
     475:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     485:	0a 00                                               ..

00000487 <__c.5226>:
     487:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000496 <__c.5219>:
     496:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     4a6:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000004b1 <__c.5216>:
     4b1:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     4c1:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000004ca <__c.5213>:
     4ca:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     4da:	20 25 64 0a 00                                       %d..

000004df <__c.5210>:
     4df:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     4ef:	64 0a 00                                            d..

000004f2 <__c.5207>:
     4f2:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     502:	0a 00                                               ..

00000504 <__c.5203>:
     504:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000513 <__c.5196>:
     513:	0a 00                                               ..

00000515 <__c.5194>:
     515:	25 75 00                                            %u.

00000518 <__c.5192>:
     518:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     528:	5f 6d 61 78 3a 20 00                                _max: .

0000052f <__c.5190>:
     52f:	0a 00                                               ..

00000531 <__c.5188>:
     531:	25 75 00                                            %u.

00000534 <__c.5186>:
     534:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     544:	65 64 3a 20 00                                      ed: .

00000549 <__c.5184>:
     549:	0a 00                                               ..

0000054b <__c.5182>:
     54b:	25 75 00                                            %u.

0000054e <__c.5180>:
     54e:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     55e:	00                                                  .

0000055f <__c.5178>:
     55f:	0a 00                                               ..

00000561 <__c.5176>:
     561:	25 75 00                                            %u.

00000564 <__c.5174>:
     564:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000573 <__c.5172>:
     573:	0a 00                                               ..

00000575 <__c.5170>:
     575:	25 75 00                                            %u.

00000578 <__c.5168>:
     578:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     588:	20 00                                                .

0000058a <__c.5166>:
     58a:	0a 00                                               ..

0000058c <__c.5164>:
     58c:	25 75 00                                            %u.

0000058f <__c.5162>:
     58f:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     59f:	20 00                                                .

000005a1 <__c.5160>:
     5a1:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000005af <__c.5280>:
     5af:	4d 3e 00                                            M>.

000005b2 <__c.5278>:
     5b2:	4d 25 64 3e 20 00                                   M%d> .

000005b8 <__c.5276>:
     5b8:	3f 00                                               ?.

000005ba <__c.5273>:
     5ba:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000005c7 <__c.5259>:
     5c7:	43 3e 20 00                                         C> .

000005cb <__c.5249>:
     5cb:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     5db:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     5eb:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     5fb:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     60b:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000619 <__c.5247>:
     619:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     629:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     639:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     649:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     659:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     669:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     679:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     689:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     699:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     6a9:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     6b9:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     6c9:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     6d9:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     6e9:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     6f9:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     709:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000714 <__c.5152>:
     714:	3f 00                                               ?.

00000716 <__c.5149>:
     716:	4d 3e 20 00                                         M> .

0000071a <__c.5154>:
     71a:	43 3e 20 00                                         C> .

0000071e <__c.5298>:
     71e:	4c 25 64 0a 00                                      L%d..

00000723 <__c.5138>:
     723:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     733:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     743:	73 65 6b 65 79 0a 00                                sekey..

0000074a <__c.4963>:
     74a:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     75a:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     76a:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     77a:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     78a:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     79a:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     7aa:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     7ba:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     7ca:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     7da:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     7ea:	4b 52 4f 0a 00                                      KRO..

000007ef <__c.5058>:
     7ef:	0a 00                                               ..

000007f1 <__c.5056>:
     7f1:	25 75 00                                            %u.

000007f4 <__c.5054>:
     7f4:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000007fc <__c.5052>:
     7fc:	0a 00                                               ..

000007fe <__c.5050>:
     7fe:	25 75 00                                            %u.

00000801 <__c.5048>:
     801:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     811:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

0000081d <__c.5046>:
     81d:	0a 00                                               ..

0000081f <__c.5044>:
     81f:	25 75 00                                            %u.

00000822 <__c.5042>:
     822:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     832:	20 00                                                .

00000834 <__c.5040>:
     834:	0a 00                                               ..

00000836 <__c.5038>:
     836:	25 75 00                                            %u.

00000839 <__c.5036>:
     839:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000843 <__c.5034>:
     843:	0a 00                                               ..

00000845 <__c.5032>:
     845:	25 75 00                                            %u.

00000848 <__c.5030>:
     848:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     858:	20 00                                                .

0000085a <__c.5028>:
     85a:	0a 00                                               ..

0000085c <__c.5026>:
     85c:	25 75 00                                            %u.

0000085f <__c.5024>:
     85f:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     86f:	20 00                                                .

00000871 <__c.5022>:
     871:	0a 00                                               ..

00000873 <__c.5020>:
     873:	25 75 00                                            %u.

00000876 <__c.5018>:
     876:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     886:	74 72 6f 6c 3a 20 00                                trol: .

0000088d <__c.5016>:
     88d:	0a 00                                               ..

0000088f <__c.5014>:
     88f:	25 75 00                                            %u.

00000892 <__c.5012>:
     892:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     8a2:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

000008ab <__c.5010>:
     8ab:	0a 00                                               ..

000008ad <__c.5008>:
     8ad:	25 30 32 58 00                                      %02X.

000008b2 <__c.5006>:
     8b2:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     8c2:	77 3a 20 00                                         w: .

000008c6 <__c.5003>:
     8c6:	0a 00                                               ..

000008c8 <__c.5001>:
     8c8:	25 75 00                                            %u.

000008cb <__c.4999>:
     8cb:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000008d4 <__c.4997>:
     8d4:	0a 00                                               ..

000008d6 <__c.4995>:
     8d6:	25 75 00                                            %u.

000008d9 <__c.4993>:
     8d9:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000008e5 <__c.4991>:
     8e5:	0a 00                                               ..

000008e7 <__c.4989>:
     8e7:	25 75 00                                            %u.

000008ea <__c.4987>:
     8ea:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

000008f4 <__c.4985>:
     8f4:	0a 00                                               ..

000008f6 <__c.4983>:
     8f6:	25 75 00                                            %u.

000008f9 <__c.4981>:
     8f9:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000903 <__c.4979>:
     903:	0a 00                                               ..

00000905 <__c.4977>:
     905:	25 30 32 58 00                                      %02X.

0000090a <__c.4975>:
     90a:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     91a:	3a 20 00                                            : .

0000091d <__c.4972>:
     91d:	0a 00                                               ..

0000091f <__c.4970>:
     91f:	25 75 00                                            %u.

00000922 <__c.4968>:
     922:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000932 <__c.5133>:
     932:	3f 00                                               ?.

00000934 <__c.5124>:
     934:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

0000093f <__c.5122>:
     93f:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000949 <__c.5119>:
     949:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     959:	25 30 34 6c 58 0a 00                                %04lX..

00000960 <__c.5117>:
     960:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     970:	58 0a 00                                            X..

00000973 <__c.5115>:
     973:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     983:	58 0a 00                                            X..

00000986 <__c.5113>:
     986:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     996:	6c 3a 20 25 58 0a 00                                l: %X..

0000099d <__c.5111>:
     99d:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     9ad:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

000009b7 <__c.5109>:
     9b7:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000009c5 <__c.5106>:
     9c5:	47 43 43 3a 20 36 2e 32 2e 30 20 41 56 52 2d 4c     GCC: 6.2.0 AVR-L
     9d5:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     9e5:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

000009f0 <__c.5104>:
     9f0:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     a00:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     a10:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     a20:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     a30:	30 39 36 0a 00                                      096..

00000a35 <__c.5102>:
     a35:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     a45:	31 39 3a 30 31 3a 33 37 20 41 70 72 20 33 30 20     19:01:37 Apr 30 
     a55:	32 30 31 37 29 0a 00                                2017)..

00000a5c <__c.5100>:
     a5c:	56 49 44 3a 20 30 78 46 45 45 44 28 67 65 65 6b     VID: 0xFEED(geek
     a6c:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 36 30 36     hack) PID: 0x606
     a7c:	30 28 47 48 36 30 29 20 56 45 52 3a 20 30 78 30     0(GH60) VER: 0x0
     a8c:	30 30 31 0a 00                                      001..

00000a91 <__c.5098>:
     a91:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     aa1:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     ab1:	6f 72 20 47 48 36 30 0a 00                          or GH60..

00000aba <__c.5096>:
     aba:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000ac9 <__c.5093>:
     ac9:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000ad6 <__c.5091>:
     ad6:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000ae2 <__c.5088>:
     ae2:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000af2 <__c.5086>:
     af2:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000b01 <__c.5083>:
     b01:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000b0f <__c.5081>:
     b0f:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000b1c <__c.5078>:
     b1c:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000b28 <__c.5076>:
     b28:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000b35 <__c.5073>:
     b35:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     b45:	00                                                  .

00000b46 <__c.5070>:
     b46:	43 3e 20 00                                         C> .

00000b4a <__c.5064>:
     b4a:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000b56 <__ctors_end>:
     b56:	11 24       	eor	r1, r1
     b58:	1f be       	out	0x3f, r1	; 63
     b5a:	cf ef       	ldi	r28, 0xFF	; 255
     b5c:	da e0       	ldi	r29, 0x0A	; 10
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	cd bf       	out	0x3d, r28	; 61

00000b62 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     b62:	04 b6       	in	r0, 0x34	; 52
     b64:	03 fe       	sbrs	r0, 3
     b66:	27 c0       	rjmp	.+78     	; 0xbb6 <__do_copy_data>
     b68:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <__bss_end>
     b6c:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <__bss_end+0x1>
     b70:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <__bss_end+0x2>
     b74:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <__bss_end+0x3>
     b78:	87 30       	cpi	r24, 0x07	; 7
     b7a:	90 4b       	sbci	r25, 0xB0	; 176
     b7c:	a7 40       	sbci	r26, 0x07	; 7
     b7e:	b0 4b       	sbci	r27, 0xB0	; 176
     b80:	d1 f4       	brne	.+52     	; 0xbb6 <__do_copy_data>
        reset_key = 0;
     b82:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__bss_end>
     b86:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <__bss_end+0x1>
     b8a:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <__bss_end+0x2>
     b8e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     b92:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     b94:	84 b7       	in	r24, 0x34	; 52
     b96:	87 7f       	andi	r24, 0xF7	; 247
     b98:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	a8 95       	wdr
     ba0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ba4:	88 61       	ori	r24, 0x18	; 24
     ba6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     baa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     bae:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     bb0:	e0 e0       	ldi	r30, 0x00	; 0
     bb2:	f8 e3       	ldi	r31, 0x38	; 56
     bb4:	09 95       	icall

00000bb6 <__do_copy_data>:
     bb6:	11 e0       	ldi	r17, 0x01	; 1
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	b1 e0       	ldi	r27, 0x01	; 1
     bbc:	ee e6       	ldi	r30, 0x6E	; 110
     bbe:	f4 e5       	ldi	r31, 0x54	; 84
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <__do_copy_data+0x10>
     bc2:	05 90       	lpm	r0, Z+
     bc4:	0d 92       	st	X+, r0
     bc6:	aa 33       	cpi	r26, 0x3A	; 58
     bc8:	b1 07       	cpc	r27, r17
     bca:	d9 f7       	brne	.-10     	; 0xbc2 <__do_copy_data+0xc>

00000bcc <__do_clear_bss>:
     bcc:	22 e0       	ldi	r18, 0x02	; 2
     bce:	aa e3       	ldi	r26, 0x3A	; 58
     bd0:	b1 e0       	ldi	r27, 0x01	; 1
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <.do_clear_bss_start>

00000bd4 <.do_clear_bss_loop>:
     bd4:	1d 92       	st	X+, r1

00000bd6 <.do_clear_bss_start>:
     bd6:	a9 30       	cpi	r26, 0x09	; 9
     bd8:	b2 07       	cpc	r27, r18
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <.do_clear_bss_loop>
     bdc:	0e 94 8e 0a 	call	0x151c	; 0x151c <main>
     be0:	0c 94 35 2a 	jmp	0x546a	; 0x546a <_exit>

00000be4 <__bad_interrupt>:
     be4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000be8 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     be8:	ff 93       	push	r31
	push	ZL
     bea:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     bec:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__data_end>
	lds	ZH, xfunc_out+1	;/
     bf0:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__data_end+0x1>
	sbiw	ZL, 0		;Skip if null
     bf4:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     bf6:	09 f0       	breq	.+2      	; 0xbfa <xputc+0x12>
	icall
     bf8:	09 95       	icall
2:	pop	ZL
     bfa:	ef 91       	pop	r30
	pop	ZH
     bfc:	ff 91       	pop	r31
	ret
     bfe:	08 95       	ret

00000c00 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     c00:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     c02:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     c04:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     c06:	11 f0       	breq	.+4      	; 0xc0c <xputs+0xc>
	rcall	xputc
     c08:	ef df       	rcall	.-34     	; 0xbe8 <xputc>
	rjmp	1b
     c0a:	fb cf       	rjmp	.-10     	; 0xc02 <xputs+0x2>
2:	ret
     c0c:	08 95       	ret

00000c0e <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     c0e:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     c10:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     c12:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     c14:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     c16:	0c c0       	rjmp	.+24     	; 0xc30 <xitoa+0x22>
	neg	r20		;
     c18:	41 95       	neg	r20
	sbrs	r25, 7		;
     c1a:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     c1c:	09 c0       	rjmp	.+18     	; 0xc30 <xitoa+0x22>
	ldi	r30, '-'	;
     c1e:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     c20:	60 95       	com	r22
	com	r23		;
     c22:	70 95       	com	r23
	com	r24		;
     c24:	80 95       	com	r24
	com	r25		;
     c26:	90 95       	com	r25
	adc	r22, r1		;
     c28:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     c2a:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     c2c:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     c2e:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     c30:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <xitoa+0x2a>
	neg	r18		;
     c34:	21 95       	neg	r18
	ldi	r19, '0'	;/
     c36:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     c38:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     c3a:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     c3c:	66 0f       	add	r22, r22
	rol	r23		;
     c3e:	77 1f       	adc	r23, r23
	rol	r24		;
     c40:	88 1f       	adc	r24, r24
	rol	r25		;
     c42:	99 1f       	adc	r25, r25
	rol	r26		;
     c44:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     c46:	a4 17       	cp	r26, r20
	brcs	3f		;
     c48:	10 f0       	brcs	.+4      	; 0xc4e <xitoa+0x40>
	sub	r26, r20	;
     c4a:	a4 1b       	sub	r26, r20
	inc	r22		;
     c4c:	63 95       	inc	r22
3:	dec	r21		;
     c4e:	5a 95       	dec	r21
	brne	2b		;/
     c50:	a9 f7       	brne	.-22     	; 0xc3c <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     c52:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     c54:	08 f0       	brcs	.+2      	; 0xc58 <xitoa+0x4a>
	subi	r26, -7		;
     c56:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     c58:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     c5a:	af 93       	push	r26
	inc	r31		;/
     c5c:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     c5e:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     c60:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     c62:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     c64:	91 05       	cpc	r25, r1
	brne	1b		;/
     c66:	41 f7       	brne	.-48     	; 0xc38 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     c68:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     c6a:	11 f4       	brne	.+4      	; 0xc70 <xitoa+0x62>
	push	r30		;
     c6c:	ef 93       	push	r30
	inc	r31		;/
     c6e:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     c70:	f2 17       	cp	r31, r18
	brcc	6f		;
     c72:	18 f4       	brcc	.+6      	; 0xc7a <xitoa+0x6c>
	push	r19		;
     c74:	3f 93       	push	r19
	inc	r31		;
     c76:	f3 95       	inc	r31
	rjmp	5b		;/
     c78:	fb cf       	rjmp	.-10     	; 0xc70 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     c7a:	8f 91       	pop	r24
	rcall	xputc		;
     c7c:	b5 df       	rcall	.-150    	; 0xbe8 <xputc>
	dec	r31		;
     c7e:	fa 95       	dec	r31
	brne	6b		;/
     c80:	e1 f7       	brne	.-8      	; 0xc7a <xitoa+0x6c>

	ret
     c82:	08 95       	ret

00000c84 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     c84:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     c86:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     c88:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     c8a:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     c8c:	21 f0       	breq	.+8      	; 0xc96 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     c8e:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     c90:	19 f0       	breq	.+6      	; 0xc98 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     c92:	aa df       	rcall	.-172    	; 0xbe8 <xputc>
	rjmp	0b		;/
     c94:	f9 cf       	rjmp	.-14     	; 0xc88 <xvprintf+0x4>
90:	ret
     c96:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     c98:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     c9a:	e8 94       	clt
	_LPMI	r21		;Get flags
     c9c:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     c9e:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     ca0:	c1 f3       	breq	.-16     	; 0xc92 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     ca2:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     ca4:	11 f4       	brne	.+4      	; 0xcaa <xvprintf+0x26>
	set			;/
     ca6:	68 94       	set
22:	_LPMI	r21		;Get width
     ca8:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     caa:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     cac:	48 f4       	brcc	.+18     	; 0xcc0 <xvprintf+0x3c>
	subi	r21, '0'	;
     cae:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     cb0:	90 f3       	brcs	.-28     	; 0xc96 <xvprintf+0x12>
	lsl	r18		;
     cb2:	22 0f       	add	r18, r18
	mov	r0, r18		;
     cb4:	02 2e       	mov	r0, r18
	lsl	r18		;
     cb6:	22 0f       	add	r18, r18
	lsl	r18		;
     cb8:	22 0f       	add	r18, r18
	add	r18, r0		;
     cba:	20 0d       	add	r18, r0
	add	r18, r21	;
     cbc:	25 0f       	add	r18, r21
	rjmp	22b		;/
     cbe:	f4 cf       	rjmp	.-24     	; 0xca8 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     cc0:	0e f4       	brtc	.+2      	; 0xcc4 <xvprintf+0x40>
	neg	r18		;
     cc2:	21 95       	neg	r18
25:	ld	r24, Y+		;
     cc4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     cc6:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     cc8:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     cca:	19 f3       	breq	.-58     	; 0xc92 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     ccc:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     cce:	29 f1       	breq	.+74     	; 0xd1a <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     cd0:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     cd2:	59 f1       	breq	.+86     	; 0xd2a <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     cd4:	bc 01       	movw	r22, r24
	clr	r24		;
     cd6:	88 27       	eor	r24, r24
	clr	r25		;
     cd8:	99 27       	eor	r25, r25
	clt			;/
     cda:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     cdc:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     cde:	21 f4       	brne	.+8      	; 0xce8 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     ce0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     ce2:	99 91       	ld	r25, Y+
	set			;
     ce4:	68 94       	set
	_LPMI	r21		;/
     ce6:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     ce8:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     cea:	39 f4       	brne	.+14     	; 0xcfa <xvprintf+0x76>
	ldi	r20, -10	;
     cec:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     cee:	7e f0       	brts	.+30     	; 0xd0e <xvprintf+0x8a>
	sbrs	r23, 7		;
     cf0:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     cf2:	0d c0       	rjmp	.+26     	; 0xd0e <xvprintf+0x8a>
	ldi	r24, -1		;
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     cf6:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     cf8:	0a c0       	rjmp	.+20     	; 0xd0e <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     cfa:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     cfc:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     cfe:	39 f0       	breq	.+14     	; 0xd0e <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     d00:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     d02:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     d04:	21 f0       	breq	.+8      	; 0xd0e <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     d06:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     d08:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     d0a:	09 f0       	breq	.+2      	; 0xd0e <xvprintf+0x8a>
	ret			;abort
     d0c:	08 95       	ret
40:	push	ZH		;Output the value
     d0e:	ff 93       	push	r31
	push	ZL		;
     d10:	ef 93       	push	r30
	rcall	xitoa		;
     d12:	7d df       	rcall	.-262    	; 0xc0e <xitoa>
42:	pop	ZL		;
     d14:	ef 91       	pop	r30
	pop	ZH		;
     d16:	ff 91       	pop	r31
	rjmp	0b		;/
     d18:	b7 cf       	rjmp	.-146    	; 0xc88 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     d1a:	ff 93       	push	r31
	push	ZL
     d1c:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     d1e:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     d20:	81 91       	ld	r24, Z+
	cpi	r24, 0
     d22:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     d24:	b9 f3       	breq	.-18     	; 0xd14 <xvprintf+0x90>
	rcall	xputc
     d26:	60 df       	rcall	.-320    	; 0xbe8 <xputc>
	rjmp	51b
     d28:	fb cf       	rjmp	.-10     	; 0xd20 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     d2a:	ff 93       	push	r31
	push	ZL
     d2c:	ef 93       	push	r30
	rcall	xputs
     d2e:	68 df       	rcall	.-304    	; 0xc00 <xputs>
	rjmp	42b
     d30:	f1 cf       	rjmp	.-30     	; 0xd14 <xvprintf+0x90>

00000d32 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     d32:	df 93       	push	r29
	push	YL
     d34:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     d36:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     d38:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     d3a:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     d3c:	a3 df       	rcall	.-186    	; 0xc84 <xvprintf>
	pop	YL
     d3e:	cf 91       	pop	r28
	pop	YH
     d40:	df 91       	pop	r29
	ret
     d42:	08 95       	ret

00000d44 <unselect_rows>:
 * pin: D0  D1  D2  D3  D5
 */
static void unselect_rows(void)
{
     // Hi-Z(DDR:0, PORT:0) to unselect
    DDRF  &= ~0b01110011;
     d44:	80 b3       	in	r24, 0x10	; 16
     d46:	8c 78       	andi	r24, 0x8C	; 140
     d48:	80 bb       	out	0x10, r24	; 16
    PORTF &= ~0b01110011;
     d4a:	81 b3       	in	r24, 0x11	; 17
     d4c:	8c 78       	andi	r24, 0x8C	; 140
     d4e:	81 bb       	out	0x11, r24	; 17
     d50:	08 95       	ret

00000d52 <matrix_init>:
    unselect_rows();
     d52:	0e 94 a2 06 	call	0xd44	; 0xd44 <unselect_rows>
    DDRF  &= ~(1<<7);
     d56:	87 98       	cbi	0x10, 7	; 16
    PORTF |=  (1<<7);
     d58:	8f 9a       	sbi	0x11, 7	; 17
    DDRB  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1);
     d5a:	84 b1       	in	r24, 0x04	; 4
     d5c:	81 70       	andi	r24, 0x01	; 1
     d5e:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1);
     d60:	85 b1       	in	r24, 0x05	; 5
     d62:	8e 6f       	ori	r24, 0xFE	; 254
     d64:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<7 | 1<<3 | 1<<2 | 1<<1 | 1<<0 );
     d66:	8a b1       	in	r24, 0x0a	; 10
     d68:	80 77       	andi	r24, 0x70	; 112
     d6a:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<3 | 1<<2 | 1<<1 | 1<<0 );
     d6c:	8b b1       	in	r24, 0x0b	; 11
     d6e:	8f 68       	ori	r24, 0x8F	; 143
     d70:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     d72:	87 b1       	in	r24, 0x07	; 7
     d74:	8f 73       	andi	r24, 0x3F	; 63
     d76:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     d78:	88 b1       	in	r24, 0x08	; 8
     d7a:	80 6c       	ori	r24, 0xC0	; 192
     d7c:	88 b9       	out	0x08, r24	; 8
     d7e:	e6 e4       	ldi	r30, 0x46	; 70
     d80:	f1 e0       	ldi	r31, 0x01	; 1
     d82:	ac e3       	ldi	r26, 0x3C	; 60
     d84:	b1 e0       	ldi	r27, 0x01	; 1
        matrix[i] = 0;
     d86:	11 92       	st	Z+, r1
     d88:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
     d8a:	1d 92       	st	X+, r1
     d8c:	1d 92       	st	X+, r1
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	e0 35       	cpi	r30, 0x50	; 80
     d92:	f8 07       	cpc	r31, r24
     d94:	c1 f7       	brne	.-16     	; 0xd86 <matrix_init+0x34>
}
     d96:	08 95       	ret

00000d98 <matrix_scan>:
{
     d98:	df 92       	push	r13
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	0c e3       	ldi	r16, 0x3C	; 60
     da8:	11 e0       	ldi	r17, 0x01	; 1
     daa:	e8 01       	movw	r28, r16
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     dac:	d1 2c       	mov	r13, r1
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     dae:	a4 ef       	ldi	r26, 0xF4	; 244
     db0:	ea 2e       	mov	r14, r26
     db2:	a0 e0       	ldi	r26, 0x00	; 0
     db4:	fa 2e       	mov	r15, r26
}

static void select_row(uint8_t row)
{
      // Output low(DDR:1, PORT:0) to select
    switch (row) {
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	d8 16       	cp	r13, r24
     dba:	09 f4       	brne	.+2      	; 0xdbe <matrix_scan+0x26>
     dbc:	e6 c0       	rjmp	.+460    	; 0xf8a <matrix_scan+0x1f2>
     dbe:	8d 15       	cp	r24, r13
     dc0:	08 f4       	brcc	.+2      	; 0xdc4 <matrix_scan+0x2c>
     dc2:	d7 c0       	rjmp	.+430    	; 0xf72 <matrix_scan+0x1da>
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	d9 16       	cp	r13, r25
     dc8:	09 f4       	brne	.+2      	; 0xdcc <matrix_scan+0x34>
     dca:	dc c0       	rjmp	.+440    	; 0xf84 <matrix_scan+0x1ec>
        case 0:
            DDRF  |= (1<<0);
     dcc:	80 9a       	sbi	0x10, 0	; 16
            PORTF &= ~(1<<0);
     dce:	88 98       	cbi	0x11, 0	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dd0:	80 ea       	ldi	r24, 0xA0	; 160
     dd2:	8a 95       	dec	r24
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <matrix_scan+0x3a>
    return (PINF&(1<<7) ? 0 : (1<<0)) |
     dd6:	2f b1       	in	r18, 0x0f	; 15
     dd8:	02 2e       	mov	r0, r18
     dda:	00 0c       	add	r0, r0
     ddc:	33 0b       	sbc	r19, r19
     dde:	20 95       	com	r18
     de0:	30 95       	com	r19
     de2:	83 2f       	mov	r24, r19
     de4:	88 1f       	adc	r24, r24
     de6:	88 27       	eor	r24, r24
     de8:	88 1f       	adc	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
           (PINB&(1<<6) ? 0 : (1<<1)) |
     dec:	1e 99       	sbic	0x03, 6	; 3
     dee:	d3 c0       	rjmp	.+422    	; 0xf96 <matrix_scan+0x1fe>
     df0:	22 e0       	ldi	r18, 0x02	; 2
     df2:	30 e0       	ldi	r19, 0x00	; 0
    return (PINF&(1<<7) ? 0 : (1<<0)) |
     df4:	82 2b       	or	r24, r18
     df6:	93 2b       	or	r25, r19
           (PINB&(1<<5) ? 0 : (1<<2)) |
     df8:	1d 99       	sbic	0x03, 5	; 3
     dfa:	d0 c0       	rjmp	.+416    	; 0xf9c <matrix_scan+0x204>
     dfc:	24 e0       	ldi	r18, 0x04	; 4
     dfe:	30 e0       	ldi	r19, 0x00	; 0
           (PINB&(1<<6) ? 0 : (1<<1)) |
     e00:	82 2b       	or	r24, r18
     e02:	93 2b       	or	r25, r19
           (PINB&(1<<4) ? 0 : (1<<3)) |
     e04:	1c 99       	sbic	0x03, 4	; 3
     e06:	cd c0       	rjmp	.+410    	; 0xfa2 <matrix_scan+0x20a>
     e08:	28 e0       	ldi	r18, 0x08	; 8
     e0a:	30 e0       	ldi	r19, 0x00	; 0
           (PINB&(1<<5) ? 0 : (1<<2)) |
     e0c:	82 2b       	or	r24, r18
     e0e:	93 2b       	or	r25, r19
           (PIND&(1<<7) ? 0 : (1<<4)) |
     e10:	29 b1       	in	r18, 0x09	; 9
     e12:	02 2e       	mov	r0, r18
     e14:	00 0c       	add	r0, r0
     e16:	33 0b       	sbc	r19, r19
     e18:	20 95       	com	r18
     e1a:	30 95       	com	r19
     e1c:	22 27       	eor	r18, r18
     e1e:	33 0f       	add	r19, r19
     e20:	22 1f       	adc	r18, r18
     e22:	33 27       	eor	r19, r19
     e24:	74 e0       	ldi	r23, 0x04	; 4
     e26:	22 0f       	add	r18, r18
     e28:	33 1f       	adc	r19, r19
     e2a:	7a 95       	dec	r23
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <matrix_scan+0x8e>
           (PINB&(1<<4) ? 0 : (1<<3)) |
     e2e:	82 2b       	or	r24, r18
     e30:	93 2b       	or	r25, r19
           (PINC&(1<<7) ? 0 : (1<<5)) |
     e32:	26 b1       	in	r18, 0x06	; 6
     e34:	02 2e       	mov	r0, r18
     e36:	00 0c       	add	r0, r0
     e38:	33 0b       	sbc	r19, r19
     e3a:	20 95       	com	r18
     e3c:	30 95       	com	r19
     e3e:	22 27       	eor	r18, r18
     e40:	33 0f       	add	r19, r19
     e42:	22 1f       	adc	r18, r18
     e44:	33 27       	eor	r19, r19
     e46:	f5 e0       	ldi	r31, 0x05	; 5
     e48:	22 0f       	add	r18, r18
     e4a:	33 1f       	adc	r19, r19
     e4c:	fa 95       	dec	r31
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <matrix_scan+0xb0>
           (PIND&(1<<7) ? 0 : (1<<4)) |
     e50:	82 2b       	or	r24, r18
     e52:	93 2b       	or	r25, r19
           (PINC&(1<<6) ? 0 : (1<<6)) |
     e54:	36 99       	sbic	0x06, 6	; 6
     e56:	a8 c0       	rjmp	.+336    	; 0xfa8 <matrix_scan+0x210>
     e58:	20 e4       	ldi	r18, 0x40	; 64
     e5a:	30 e0       	ldi	r19, 0x00	; 0
           (PINC&(1<<7) ? 0 : (1<<5)) |
     e5c:	82 2b       	or	r24, r18
     e5e:	93 2b       	or	r25, r19
           (PIND&(1<<3) ? 0 : (1<<7)) |
     e60:	4b 99       	sbic	0x09, 3	; 9
     e62:	a5 c0       	rjmp	.+330    	; 0xfae <matrix_scan+0x216>
     e64:	20 e8       	ldi	r18, 0x80	; 128
     e66:	30 e0       	ldi	r19, 0x00	; 0
           (PINC&(1<<6) ? 0 : (1<<6)) |
     e68:	82 2b       	or	r24, r18
     e6a:	93 2b       	or	r25, r19
           (PIND&(1<<2) ? 0 : (1<<8)) |
     e6c:	4a 99       	sbic	0x09, 2	; 9
     e6e:	a2 c0       	rjmp	.+324    	; 0xfb4 <matrix_scan+0x21c>
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	31 e0       	ldi	r19, 0x01	; 1
           (PIND&(1<<3) ? 0 : (1<<7)) |
     e74:	82 2b       	or	r24, r18
     e76:	93 2b       	or	r25, r19
           (PIND&(1<<1) ? 0 : (1<<9)) |
     e78:	49 99       	sbic	0x09, 1	; 9
     e7a:	9f c0       	rjmp	.+318    	; 0xfba <matrix_scan+0x222>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	32 e0       	ldi	r19, 0x02	; 2
           (PIND&(1<<2) ? 0 : (1<<8)) |
     e80:	82 2b       	or	r24, r18
     e82:	93 2b       	or	r25, r19
           (PIND&(1<<0) ? 0 : (1<<10)) |
     e84:	48 99       	sbic	0x09, 0	; 9
     e86:	9c c0       	rjmp	.+312    	; 0xfc0 <matrix_scan+0x228>
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	34 e0       	ldi	r19, 0x04	; 4
           (PIND&(1<<1) ? 0 : (1<<9)) |
     e8c:	82 2b       	or	r24, r18
     e8e:	93 2b       	or	r25, r19
           (PINB&(1<<7) ? 0 : (1<<11)) |
     e90:	23 b1       	in	r18, 0x03	; 3
     e92:	02 2e       	mov	r0, r18
     e94:	00 0c       	add	r0, r0
     e96:	33 0b       	sbc	r19, r19
     e98:	20 95       	com	r18
     e9a:	30 95       	com	r19
     e9c:	22 27       	eor	r18, r18
     e9e:	33 0f       	add	r19, r19
     ea0:	22 1f       	adc	r18, r18
     ea2:	33 27       	eor	r19, r19
     ea4:	32 2f       	mov	r19, r18
     ea6:	22 27       	eor	r18, r18
     ea8:	33 0f       	add	r19, r19
     eaa:	33 0f       	add	r19, r19
     eac:	33 0f       	add	r19, r19
           (PIND&(1<<0) ? 0 : (1<<10)) |
     eae:	82 2b       	or	r24, r18
     eb0:	93 2b       	or	r25, r19
           (PINB&(1<<3) ? 0 : (1<<12)) |
     eb2:	1b 99       	sbic	0x03, 3	; 3
     eb4:	88 c0       	rjmp	.+272    	; 0xfc6 <matrix_scan+0x22e>
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e1       	ldi	r19, 0x10	; 16
           (PINB&(1<<7) ? 0 : (1<<11)) |
     eba:	82 2b       	or	r24, r18
     ebc:	93 2b       	or	r25, r19
           (PINB&(1<<2) ? 0 : (1<<13)) |
     ebe:	1a 99       	sbic	0x03, 2	; 3
     ec0:	85 c0       	rjmp	.+266    	; 0xfcc <matrix_scan+0x234>
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e2       	ldi	r19, 0x20	; 32
           (PINB&(1<<3) ? 0 : (1<<12)) |
     ec6:	82 2b       	or	r24, r18
     ec8:	93 2b       	or	r25, r19
           (PINB&(1<<1) ? 0 : (1<<14));
     eca:	19 99       	sbic	0x03, 1	; 3
     ecc:	82 c0       	rjmp	.+260    	; 0xfd2 <matrix_scan+0x23a>
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e4       	ldi	r19, 0x40	; 64
           (PINB&(1<<2) ? 0 : (1<<13)) |
     ed2:	82 2b       	or	r24, r18
     ed4:	93 2b       	or	r25, r19
        if (matrix_debouncing[i] != cols) {
     ed6:	28 81       	ld	r18, Y
     ed8:	39 81       	ldd	r19, Y+1	; 0x01
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	49 f1       	breq	.+82     	; 0xf32 <matrix_scan+0x19a>
            matrix_debouncing[i] = cols;
     ee0:	99 83       	std	Y+1, r25	; 0x01
     ee2:	88 83       	st	Y, r24
            if (debouncing) {
     ee4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ee8:	88 23       	and	r24, r24
     eea:	01 f1       	breq	.+64     	; 0xf2c <matrix_scan+0x194>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     eec:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
     ef0:	80 ff       	sbrs	r24, 0
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <matrix_scan+0x164>
     ef4:	89 ef       	ldi	r24, 0xF9	; 249
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
     efc:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
     f00:	80 ff       	sbrs	r24, 0
     f02:	0c c0       	rjmp	.+24     	; 0xf1c <matrix_scan+0x184>
     f04:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f08:	1f 92       	push	r1
     f0a:	8f 93       	push	r24
     f0c:	ff 92       	push	r15
     f0e:	ef 92       	push	r14
     f10:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
     f20:	80 ff       	sbrs	r24, 0
     f22:	04 c0       	rjmp	.+8      	; 0xf2c <matrix_scan+0x194>
     f24:	82 ef       	ldi	r24, 0xF2	; 242
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
            debouncing = DEBOUNCE;
     f2c:	85 e0       	ldi	r24, 0x05	; 5
     f2e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        unselect_rows();
     f32:	0e 94 a2 06 	call	0xd44	; 0xd44 <unselect_rows>
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     f36:	d3 94       	inc	r13
     f38:	22 96       	adiw	r28, 0x02	; 2
     f3a:	95 e0       	ldi	r25, 0x05	; 5
     f3c:	d9 12       	cpse	r13, r25
     f3e:	3b cf       	rjmp	.-394    	; 0xdb6 <matrix_scan+0x1e>
    if (debouncing) {
     f40:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f44:	88 23       	and	r24, r24
     f46:	61 f0       	breq	.+24     	; 0xf60 <matrix_scan+0x1c8>
        if (--debouncing) {
     f48:	81 50       	subi	r24, 0x01	; 1
     f4a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     f4e:	88 23       	and	r24, r24
     f50:	09 f4       	brne	.+2      	; 0xf54 <matrix_scan+0x1bc>
     f52:	42 c0       	rjmp	.+132    	; 0xfd8 <matrix_scan+0x240>
	__builtin_avr_delay_cycles(__ticks_dc);
     f54:	af e9       	ldi	r26, 0x9F	; 159
     f56:	bf e0       	ldi	r27, 0x0F	; 15
     f58:	11 97       	sbiw	r26, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <matrix_scan+0x1c0>
     f5c:	00 c0       	rjmp	.+0      	; 0xf5e <matrix_scan+0x1c6>
     f5e:	00 00       	nop
}
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	08 95       	ret
    switch (row) {
     f72:	a3 e0       	ldi	r26, 0x03	; 3
     f74:	da 16       	cp	r13, r26
     f76:	61 f0       	breq	.+24     	; 0xf90 <matrix_scan+0x1f8>
     f78:	b4 e0       	ldi	r27, 0x04	; 4
     f7a:	db 12       	cpse	r13, r27
     f7c:	27 cf       	rjmp	.-434    	; 0xdcc <matrix_scan+0x34>
        case 3:
            DDRF  |= (1<<5);
            PORTF &= ~(1<<5);
            break;
        case 4:
            DDRF  |= (1<<6);
     f7e:	86 9a       	sbi	0x10, 6	; 16
            PORTF &= ~(1<<6);
     f80:	8e 98       	cbi	0x11, 6	; 17
     f82:	26 cf       	rjmp	.-436    	; 0xdd0 <matrix_scan+0x38>
            DDRF  |= (1<<1);
     f84:	81 9a       	sbi	0x10, 1	; 16
            PORTF &= ~(1<<1);
     f86:	89 98       	cbi	0x11, 1	; 17
     f88:	23 cf       	rjmp	.-442    	; 0xdd0 <matrix_scan+0x38>
            DDRF  |= (1<<4);
     f8a:	84 9a       	sbi	0x10, 4	; 16
            PORTF &= ~(1<<4);
     f8c:	8c 98       	cbi	0x11, 4	; 17
     f8e:	20 cf       	rjmp	.-448    	; 0xdd0 <matrix_scan+0x38>
            DDRF  |= (1<<5);
     f90:	85 9a       	sbi	0x10, 5	; 16
            PORTF &= ~(1<<5);
     f92:	8d 98       	cbi	0x11, 5	; 17
     f94:	1d cf       	rjmp	.-454    	; 0xdd0 <matrix_scan+0x38>
           (PINB&(1<<6) ? 0 : (1<<1)) |
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	2c cf       	rjmp	.-424    	; 0xdf4 <matrix_scan+0x5c>
           (PINB&(1<<5) ? 0 : (1<<2)) |
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	2f cf       	rjmp	.-418    	; 0xe00 <matrix_scan+0x68>
           (PINB&(1<<4) ? 0 : (1<<3)) |
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	32 cf       	rjmp	.-412    	; 0xe0c <matrix_scan+0x74>
           (PINC&(1<<6) ? 0 : (1<<6)) |
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	57 cf       	rjmp	.-338    	; 0xe5c <matrix_scan+0xc4>
           (PIND&(1<<3) ? 0 : (1<<7)) |
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	5a cf       	rjmp	.-332    	; 0xe68 <matrix_scan+0xd0>
           (PIND&(1<<2) ? 0 : (1<<8)) |
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	5d cf       	rjmp	.-326    	; 0xe74 <matrix_scan+0xdc>
           (PIND&(1<<1) ? 0 : (1<<9)) |
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	60 cf       	rjmp	.-320    	; 0xe80 <matrix_scan+0xe8>
           (PIND&(1<<0) ? 0 : (1<<10)) |
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	63 cf       	rjmp	.-314    	; 0xe8c <matrix_scan+0xf4>
           (PINB&(1<<3) ? 0 : (1<<12)) |
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	77 cf       	rjmp	.-274    	; 0xeba <matrix_scan+0x122>
           (PINB&(1<<2) ? 0 : (1<<13)) |
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	7a cf       	rjmp	.-268    	; 0xec6 <matrix_scan+0x12e>
           (PINB&(1<<1) ? 0 : (1<<14));
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	7d cf       	rjmp	.-262    	; 0xed2 <matrix_scan+0x13a>
     fd8:	e6 e4       	ldi	r30, 0x46	; 70
     fda:	f1 e0       	ldi	r31, 0x01	; 1
     fdc:	86 e4       	ldi	r24, 0x46	; 70
     fde:	91 e0       	ldi	r25, 0x01	; 1
                matrix[i] = matrix_debouncing[i];
     fe0:	d8 01       	movw	r26, r16
     fe2:	2d 91       	ld	r18, X+
     fe4:	3d 91       	ld	r19, X+
     fe6:	8d 01       	movw	r16, r26
     fe8:	21 93       	st	Z+, r18
     fea:	31 93       	st	Z+, r19
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     fec:	8a 17       	cp	r24, r26
     fee:	9b 07       	cpc	r25, r27
     ff0:	b9 f7       	brne	.-18     	; 0xfe0 <matrix_scan+0x248>
     ff2:	b6 cf       	rjmp	.-148    	; 0xf60 <matrix_scan+0x1c8>

00000ff4 <matrix_get_row>:
    return matrix[row];
     ff4:	e8 2f       	mov	r30, r24
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	ea 5b       	subi	r30, 0xBA	; 186
     ffe:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	08 95       	ret

00001006 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    1006:	81 ff       	sbrs	r24, 1
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <led_set+0xa>
        // output low
        DDRB |= (1<<2);
    100a:	22 9a       	sbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
        PORTB &= ~(1<<2);
    100c:	2a 98       	cbi	0x05, 2	; 5
    100e:	08 95       	ret
        DDRB &= ~(1<<2);
    1010:	22 98       	cbi	0x04, 2	; 4
    1012:	fc cf       	rjmp	.-8      	; 0x100c <led_set+0x6>

00001014 <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1014:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <keyboard_led_stats>
    1018:	08 95       	ret

0000101a <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    101a:	9f b7       	in	r25, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <console_flush>
    1022:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1024:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <USB_DeviceState>
    1028:	94 30       	cpi	r25, 0x04	; 4
    102a:	09 f0       	breq	.+2      	; 0x102e <sendchar+0x14>
    102c:	49 c0       	rjmp	.+146    	; 0x10c0 <sendchar+0xa6>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    102e:	20 91 e9 00 	lds	r18, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1032:	2f 70       	andi	r18, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1034:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1038:	90 fd       	sbrc	r25, 0
    103a:	30 c0       	rjmp	.+96     	; 0x109c <sendchar+0x82>
    103c:	90 e0       	ldi	r25, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    103e:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1040:	24 e0       	ldi	r18, 0x04	; 4
    1042:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1046:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    104a:	20 ff       	sbrs	r18, 0
    104c:	36 c0       	rjmp	.+108    	; 0x10ba <sendchar+0xa0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    104e:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1052:	27 ff       	sbrs	r18, 7
    1054:	32 c0       	rjmp	.+100    	; 0x10ba <sendchar+0xa0>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1056:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <timeouted.4939>
    105a:	22 23       	and	r18, r18
    105c:	21 f0       	breq	.+8      	; 0x1066 <sendchar+0x4c>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    105e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1062:	25 ff       	sbrs	r18, 5
    1064:	2a c0       	rjmp	.+84     	; 0x10ba <sendchar+0xa0>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1066:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <timeouted.4939>

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    106a:	26 e0       	ldi	r18, 0x06	; 6
    106c:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1070:	35 ff       	sbrs	r19, 5
    1072:	16 c0       	rjmp	.+44     	; 0x10a0 <sendchar+0x86>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1074:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1078:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    107c:	85 fd       	sbrc	r24, 5
    107e:	29 c0       	rjmp	.+82     	; 0x10d2 <sendchar+0xb8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1080:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (!(Endpoint_IsINReady()));
    1084:	80 ff       	sbrs	r24, 0
    1086:	fc cf       	rjmp	.-8      	; 0x1080 <sendchar+0x66>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1088:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    108c:	8e 77       	andi	r24, 0x7E	; 126
    108e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1092:	9f 70       	andi	r25, 0x0F	; 15
    1094:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    } else {
        CONSOLE_FLUSH_SET(true);
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    109c:	90 e8       	ldi	r25, 0x80	; 128
    109e:	cf cf       	rjmp	.-98     	; 0x103e <sendchar+0x24>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    10a0:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <USB_DeviceState>
    10a4:	34 30       	cpi	r19, 0x04	; 4
    10a6:	49 f4       	brne	.+18     	; 0x10ba <sendchar+0xa0>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    10a8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        if (Endpoint_IsStalled()) {
    10ac:	35 fd       	sbrc	r19, 5
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <sendchar+0xa0>
    10b0:	21 50       	subi	r18, 0x01	; 1
        if (!(timeout--)) {
    10b2:	41 f4       	brne	.+16     	; 0x10c4 <sendchar+0xaa>
            timeouted = true;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timeouted.4939>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10ba:	9f 70       	andi	r25, 0x0F	; 15
    10bc:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        return -1;
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    10c2:	08 95       	ret
    10c4:	ef e9       	ldi	r30, 0x9F	; 159
    10c6:	ff e0       	ldi	r31, 0x0F	; 15
    10c8:	31 97       	sbiw	r30, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <sendchar+0xae>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <sendchar+0xb4>
    10ce:	00 00       	nop
    10d0:	cd cf       	rjmp	.-102    	; 0x106c <sendchar+0x52>
        CONSOLE_FLUSH_SET(true);
    10d2:	8f b7       	in	r24, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	21 e0       	ldi	r18, 0x01	; 1
    10d8:	20 93 53 01 	sts	0x0153, r18	; 0x800153 <console_flush>
    10dc:	8f bf       	out	0x3f, r24	; 63
    10de:	d9 cf       	rjmp	.-78     	; 0x1092 <sendchar+0x78>

000010e0 <send_consumer>:
{
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <send_consumer+0x6>
    10e6:	1f 92       	push	r1
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    10ee:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
    10f2:	84 30       	cpi	r24, 0x04	; 4
    10f4:	19 f5       	brne	.+70     	; 0x113c <send_consumer+0x5c>
    report_extra_t r = {
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	99 83       	std	Y+1, r25	; 0x01
    10fa:	3b 83       	std	Y+3, r19	; 0x03
    10fc:	2a 83       	std	Y+2, r18	; 0x02
    10fe:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1102:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1104:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1108:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    110a:	95 fd       	sbrc	r25, 5
    110c:	06 c0       	rjmp	.+12     	; 0x111a <send_consumer+0x3a>
	__builtin_avr_delay_cycles(__ticks_dc);
    110e:	95 ed       	ldi	r25, 0xD5	; 213
    1110:	9a 95       	dec	r25
    1112:	f1 f7       	brne	.-4      	; 0x1110 <send_consumer+0x30>
    1114:	00 00       	nop
    1116:	81 11       	cpse	r24, r1
    1118:	f5 cf       	rjmp	.-22     	; 0x1104 <send_consumer+0x24>
    111a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    111e:	85 ff       	sbrs	r24, 5
    1120:	0d c0       	rjmp	.+26     	; 0x113c <send_consumer+0x5c>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	63 e0       	ldi	r22, 0x03	; 3
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	ce 01       	movw	r24, r28
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	0e 94 4d 0b 	call	0x169a	; 0x169a <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1132:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1136:	8e 77       	andi	r24, 0x7E	; 126
    1138:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <send_system>:
{
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	00 d0       	rcall	.+0      	; 0x114e <send_system+0x6>
    114e:	1f 92       	push	r1
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1154:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <USB_DeviceState>
    1158:	24 30       	cpi	r18, 0x04	; 4
    115a:	21 f5       	brne	.+72     	; 0x11a4 <send_system+0x5c>
    report_extra_t r = {
    115c:	22 e0       	ldi	r18, 0x02	; 2
    115e:	29 83       	std	Y+1, r18	; 0x01
    1160:	9b 83       	std	Y+3, r25	; 0x03
    1162:	8a 83       	std	Y+2, r24	; 0x02
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1164:	83 e0       	ldi	r24, 0x03	; 3
    1166:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    116a:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    116c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1170:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1172:	95 fd       	sbrc	r25, 5
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <send_system+0x3a>
    1176:	95 ed       	ldi	r25, 0xD5	; 213
    1178:	9a 95       	dec	r25
    117a:	f1 f7       	brne	.-4      	; 0x1178 <send_system+0x30>
    117c:	00 00       	nop
    117e:	81 11       	cpse	r24, r1
    1180:	f5 cf       	rjmp	.-22     	; 0x116c <send_system+0x24>
    1182:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1186:	85 ff       	sbrs	r24, 5
    1188:	0d c0       	rjmp	.+26     	; 0x11a4 <send_system+0x5c>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	63 e0       	ldi	r22, 0x03	; 3
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	0e 94 4d 0b 	call	0x169a	; 0x169a <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    119a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    119e:	8e 77       	andi	r24, 0x7E	; 126
    11a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <send_mouse>:
{
    11b0:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    11b2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
    11b6:	84 30       	cpi	r24, 0x04	; 4
    11b8:	f9 f4       	brne	.+62     	; 0x11f8 <send_mouse+0x48>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    11c0:	9f ef       	ldi	r25, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11c6:	91 50       	subi	r25, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    11c8:	85 fd       	sbrc	r24, 5
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <send_mouse+0x28>
    11cc:	85 ed       	ldi	r24, 0xD5	; 213
    11ce:	8a 95       	dec	r24
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <send_mouse+0x1e>
    11d2:	00 00       	nop
    11d4:	91 11       	cpse	r25, r1
    11d6:	f5 cf       	rjmp	.-22     	; 0x11c2 <send_mouse+0x12>
    11d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    11dc:	85 ff       	sbrs	r24, 5
    11de:	0c c0       	rjmp	.+24     	; 0x11f8 <send_mouse+0x48>
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	65 e0       	ldi	r22, 0x05	; 5
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	c9 01       	movw	r24, r18
    11ea:	0e 94 4d 0b 	call	0x169a	; 0x169a <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11f2:	8e 77       	andi	r24, 0x7E	; 126
    11f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11f8:	08 95       	ret

000011fa <send_keyboard>:
{
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	ec 01       	movw	r28, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1200:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
    1204:	84 30       	cpi	r24, 0x04	; 4
    1206:	79 f5       	brne	.+94     	; 0x1266 <send_keyboard+0x6c>
    if (keyboard_protocol && keyboard_nkro) {
    1208:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
    120c:	88 23       	and	r24, r24
    120e:	71 f1       	breq	.+92     	; 0x126c <send_keyboard+0x72>
    1210:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_nkro>
    1214:	88 23       	and	r24, r24
    1216:	51 f1       	breq	.+84     	; 0x126c <send_keyboard+0x72>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1218:	85 e0       	ldi	r24, 0x05	; 5
    121a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    121e:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1220:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1224:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    1226:	95 fd       	sbrc	r25, 5
    1228:	06 c0       	rjmp	.+12     	; 0x1236 <send_keyboard+0x3c>
    122a:	95 e1       	ldi	r25, 0x15	; 21
    122c:	9a 95       	dec	r25
    122e:	f1 f7       	brne	.-4      	; 0x122c <send_keyboard+0x32>
    1230:	00 00       	nop
    1232:	81 11       	cpse	r24, r1
    1234:	f5 cf       	rjmp	.-22     	; 0x1220 <send_keyboard+0x26>
    1236:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    123a:	85 ff       	sbrs	r24, 5
    123c:	14 c0       	rjmp	.+40     	; 0x1266 <send_keyboard+0x6c>
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	60 e2       	ldi	r22, 0x20	; 32
    1244:	70 e0       	ldi	r23, 0x00	; 0
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1246:	ce 01       	movw	r24, r28
    1248:	0e 94 4d 0b 	call	0x169a	; 0x169a <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    124c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1250:	8e 77       	andi	r24, 0x7E	; 126
    1252:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    keyboard_report_sent = *report;
    1256:	80 e2       	ldi	r24, 0x20	; 32
    1258:	fe 01       	movw	r30, r28
    125a:	a4 e5       	ldi	r26, 0x54	; 84
    125c:	b1 e0       	ldi	r27, 0x01	; 1
    125e:	01 90       	ld	r0, Z+
    1260:	0d 92       	st	X+, r0
    1262:	8a 95       	dec	r24
    1264:	e1 f7       	brne	.-8      	; 0x125e <send_keyboard+0x64>
}
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1272:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1274:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1278:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    127a:	95 fd       	sbrc	r25, 5
    127c:	06 c0       	rjmp	.+12     	; 0x128a <send_keyboard+0x90>
    127e:	95 ed       	ldi	r25, 0xD5	; 213
    1280:	9a 95       	dec	r25
    1282:	f1 f7       	brne	.-4      	; 0x1280 <send_keyboard+0x86>
    1284:	00 00       	nop
    1286:	81 11       	cpse	r24, r1
    1288:	f5 cf       	rjmp	.-22     	; 0x1274 <send_keyboard+0x7a>
    128a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    128e:	85 ff       	sbrs	r24, 5
    1290:	ea cf       	rjmp	.-44     	; 0x1266 <send_keyboard+0x6c>
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	68 e0       	ldi	r22, 0x08	; 8
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	d5 cf       	rjmp	.-86     	; 0x1246 <send_keyboard+0x4c>

0000129c <EVENT_USB_Device_Connect>:
    print("[C]");
    129c:	81 e3       	ldi	r24, 0x31	; 49
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    if (!USB_IsInitialized) {
    12a4:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <USB_IsInitialized>
    12a8:	81 11       	cpse	r24, r1
    12aa:	09 c0       	rjmp	.+18     	; 0x12be <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    12ac:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <USB_Disable>
        USB_Init();
    12b0:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    12b4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    12b8:	84 60       	ori	r24, 0x04	; 4
    12ba:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    12be:	08 95       	ret

000012c0 <EVENT_USB_Device_Disconnect>:
    print("[D]");
    12c0:	8d e2       	ldi	r24, 0x2D	; 45
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    USB_IsInitialized = false;
    12c8:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <USB_IsInitialized>
    12cc:	08 95       	ret

000012ce <EVENT_USB_Device_Reset>:
{
    12ce:	08 95       	ret

000012d0 <EVENT_USB_Device_StartOfFrame>:
    if (++count % 50) return;
    12d0:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <count.4869>
    12d4:	2f 5f       	subi	r18, 0xFF	; 255
    12d6:	82 2f       	mov	r24, r18
    12d8:	62 e3       	ldi	r22, 0x32	; 50
    12da:	0e 94 ca 29 	call	0x5394	; 0x5394 <__udivmodqi4>
    12de:	99 23       	and	r25, r25
    12e0:	19 f0       	breq	.+6      	; 0x12e8 <EVENT_USB_Device_StartOfFrame+0x18>
    12e2:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <count.4869>
    12e6:	08 95       	ret
    count = 0;
    12e8:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <count.4869>
    if (!console_flush) return;
    12ec:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <console_flush>
    12f0:	88 23       	and	r24, r24
    12f2:	e9 f0       	breq	.+58     	; 0x132e <EVENT_USB_Device_StartOfFrame+0x5e>
    if (USB_DeviceState != DEVICE_STATE_Configured)
    12f4:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
    12f8:	84 30       	cpi	r24, 0x04	; 4
    12fa:	b9 f4       	brne	.+46     	; 0x132a <EVENT_USB_Device_StartOfFrame+0x5a>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    12fc:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1300:	9f 70       	andi	r25, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1302:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1306:	80 fd       	sbrc	r24, 0
    1308:	13 c0       	rjmp	.+38     	; 0x1330 <EVENT_USB_Device_StartOfFrame+0x60>
    130a:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    130c:	89 2b       	or	r24, r25
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    130e:	94 e0       	ldi	r25, 0x04	; 4
    1310:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1314:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1318:	90 ff       	sbrs	r25, 0
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <EVENT_USB_Device_StartOfFrame+0x54>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    131c:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1320:	97 fd       	sbrc	r25, 7
    1322:	0a c0       	rjmp	.+20     	; 0x1338 <EVENT_USB_Device_StartOfFrame+0x68>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1324:	8f 70       	andi	r24, 0x0F	; 15
    1326:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    console_flush = false;
    132a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <console_flush>
    132e:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1330:	80 e8       	ldi	r24, 0x80	; 128
    1332:	ec cf       	rjmp	.-40     	; 0x130c <EVENT_USB_Device_StartOfFrame+0x3c>
				UEDATX = Data;
    1334:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1338:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    while (Endpoint_IsReadWriteAllowed())
    133c:	95 fd       	sbrc	r25, 5
    133e:	fa cf       	rjmp	.-12     	; 0x1334 <EVENT_USB_Device_StartOfFrame+0x64>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1340:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (Endpoint_IsINReady()) {
    1344:	90 ff       	sbrs	r25, 0
    1346:	ee cf       	rjmp	.-36     	; 0x1324 <EVENT_USB_Device_StartOfFrame+0x54>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1348:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    134c:	9e 77       	andi	r25, 0x7E	; 126
    134e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1352:	e8 cf       	rjmp	.-48     	; 0x1324 <EVENT_USB_Device_StartOfFrame+0x54>

00001354 <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1354:	42 e0       	ldi	r20, 0x02	; 2
    1356:	61 ec       	ldi	r22, 0xC1	; 193
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Endpoint_ConfigureEndpoint_Prv>
    135e:	42 e0       	ldi	r20, 0x02	; 2
    1360:	61 ec       	ldi	r22, 0xC1	; 193
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Endpoint_ConfigureEndpoint_Prv>
    1368:	42 e0       	ldi	r20, 0x02	; 2
    136a:	61 ec       	ldi	r22, 0xC1	; 193
    136c:	83 e0       	ldi	r24, 0x03	; 3
    136e:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Endpoint_ConfigureEndpoint_Prv>
    1372:	42 e2       	ldi	r20, 0x22	; 34
    1374:	61 ec       	ldi	r22, 0xC1	; 193
    1376:	84 e0       	ldi	r24, 0x04	; 4
    1378:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Endpoint_ConfigureEndpoint_Prv>
    137c:	42 e2       	ldi	r20, 0x22	; 34
    137e:	61 ec       	ldi	r22, 0xC1	; 193
    1380:	85 e0       	ldi	r24, 0x05	; 5
    1382:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <Endpoint_ConfigureEndpoint_Prv>

00001386 <EVENT_USB_Device_ControlRequest>:
    switch (USB_ControlRequest.bRequest)
    1386:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USB_ControlRequest+0x1>
    138a:	83 30       	cpi	r24, 0x03	; 3
    138c:	09 f4       	brne	.+2      	; 0x1390 <EVENT_USB_Device_ControlRequest+0xa>
    138e:	55 c0       	rjmp	.+170    	; 0x143a <EVENT_USB_Device_ControlRequest+0xb4>
    1390:	30 f4       	brcc	.+12     	; 0x139e <EVENT_USB_Device_ControlRequest+0x18>
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	71 f1       	breq	.+92     	; 0x13f2 <EVENT_USB_Device_ControlRequest+0x6c>
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	09 f4       	brne	.+2      	; 0x139c <EVENT_USB_Device_ControlRequest+0x16>
    139a:	91 c0       	rjmp	.+290    	; 0x14be <EVENT_USB_Device_ControlRequest+0x138>
    139c:	08 95       	ret
    139e:	8a 30       	cpi	r24, 0x0A	; 10
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <EVENT_USB_Device_ControlRequest+0x1e>
    13a2:	7d c0       	rjmp	.+250    	; 0x149e <EVENT_USB_Device_ControlRequest+0x118>
    13a4:	8b 30       	cpi	r24, 0x0B	; 11
    13a6:	09 f4       	brne	.+2      	; 0x13aa <EVENT_USB_Device_ControlRequest+0x24>
    13a8:	63 c0       	rjmp	.+198    	; 0x1470 <EVENT_USB_Device_ControlRequest+0xea>
    13aa:	89 30       	cpi	r24, 0x09	; 9
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <EVENT_USB_Device_ControlRequest+0x2a>
    13ae:	44 c0       	rjmp	.+136    	; 0x1438 <EVENT_USB_Device_ControlRequest+0xb2>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    13b0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest>
    13b4:	81 32       	cpi	r24, 0x21	; 33
    13b6:	09 f0       	breq	.+2      	; 0x13ba <EVENT_USB_Device_ControlRequest+0x34>
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <EVENT_USB_Device_ControlRequest+0xb2>
                switch (USB_ControlRequest.wIndex) {
    13ba:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest+0x4>
    13be:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <USB_ControlRequest+0x5>
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	11 f0       	breq	.+4      	; 0x13ca <EVENT_USB_Device_ControlRequest+0x44>
    13c6:	04 97       	sbiw	r24, 0x04	; 4
    13c8:	b9 f5       	brne	.+110    	; 0x1438 <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    13ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13ce:	87 7f       	andi	r24, 0xF7	; 247
    13d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsOUTReceived())) {
    13d8:	82 ff       	sbrs	r24, 2
    13da:	2a c0       	rjmp	.+84     	; 0x1430 <EVENT_USB_Device_ControlRequest+0xaa>
				return UEDATX;
    13dc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                    keyboard_led_stats = Endpoint_Read_8();
    13e0:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <keyboard_led_stats>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13e8:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    13ee:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <Endpoint_ClearStatusStage>
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    13f2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest>
    13f6:	81 3a       	cpi	r24, 0xA1	; 161
    13f8:	f9 f4       	brne	.+62     	; 0x1438 <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    13fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13fe:	87 7f       	andi	r24, 0xF7	; 247
    1400:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                switch (USB_ControlRequest.wIndex) {
    1404:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest+0x4>
    1408:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <USB_ControlRequest+0x5>
    140c:	89 2b       	or	r24, r25
    140e:	61 f4       	brne	.+24     	; 0x1428 <EVENT_USB_Device_ControlRequest+0xa2>
                    ReportSize = sizeof(keyboard_report_sent);
    1410:	60 e2       	ldi	r22, 0x20	; 32
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1412:	84 e5       	ldi	r24, 0x54	; 84
    1414:	91 e0       	ldi	r25, 0x01	; 1
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	0e 94 9c 0b 	call	0x1738	; 0x1738 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    141c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1420:	8b 77       	andi	r24, 0x7B	; 123
    1422:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1426:	08 95       	ret
    uint8_t  ReportSize = 0;
    1428:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* ReportData = NULL;
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	f3 cf       	rjmp	.-26     	; 0x1416 <EVENT_USB_Device_ControlRequest+0x90>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1430:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
    1434:	81 11       	cpse	r24, r1
    1436:	ce cf       	rjmp	.-100    	; 0x13d4 <EVENT_USB_Device_ControlRequest+0x4e>
    1438:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    143a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest>
    143e:	81 3a       	cpi	r24, 0xA1	; 161
    1440:	d9 f7       	brne	.-10     	; 0x1438 <EVENT_USB_Device_ControlRequest+0xb2>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1442:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest+0x4>
    1446:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <USB_ControlRequest+0x5>
    144a:	89 2b       	or	r24, r25
    144c:	a9 f7       	brne	.-22     	; 0x1438 <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    144e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1452:	87 7f       	andi	r24, 0xF7	; 247
    1454:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1458:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsINReady()));
    145c:	80 ff       	sbrs	r24, 0
    145e:	fc cf       	rjmp	.-8      	; 0x1458 <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
    1460:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
				UEDATX = Data;
    1464:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1468:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    146c:	8e 77       	andi	r24, 0x7E	; 126
    146e:	bd cf       	rjmp	.-134    	; 0x13ea <EVENT_USB_Device_ControlRequest+0x64>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1470:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest>
    1474:	81 32       	cpi	r24, 0x21	; 33
    1476:	01 f7       	brne	.-64     	; 0x1438 <EVENT_USB_Device_ControlRequest+0xb2>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1478:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest+0x4>
    147c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <USB_ControlRequest+0x5>
    1480:	89 2b       	or	r24, r25
    1482:	d1 f6       	brne	.-76     	; 0x1438 <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    1484:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1488:	87 7f       	andi	r24, 0xF7	; 247
    148a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearStatusStage();
    148e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <Endpoint_ClearStatusStage>
                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1492:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_ControlRequest+0x2>
    1496:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <keyboard_protocol>
                    clear_keyboard();
    149a:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <clear_keyboard>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    149e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest>
    14a2:	81 32       	cpi	r24, 0x21	; 33
    14a4:	49 f6       	brne	.-110    	; 0x1438 <EVENT_USB_Device_ControlRequest+0xb2>
    14a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14aa:	87 7f       	andi	r24, 0xF7	; 247
    14ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    14b0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <Endpoint_ClearStatusStage>
                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    14b4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_ControlRequest+0x3>
    14b8:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <keyboard_idle>
    14bc:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    14be:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest>
    14c2:	81 3a       	cpi	r24, 0xA1	; 161
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <EVENT_USB_Device_ControlRequest+0x142>
    14c6:	b8 cf       	rjmp	.-144    	; 0x1438 <EVENT_USB_Device_ControlRequest+0xb2>
    14c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14cc:	87 7f       	andi	r24, 0xF7	; 247
    14ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                while (!(Endpoint_IsINReady()));
    14d6:	80 ff       	sbrs	r24, 0
    14d8:	fc cf       	rjmp	.-8      	; 0x14d2 <EVENT_USB_Device_ControlRequest+0x14c>
                Endpoint_Write_8(keyboard_idle);
    14da:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <keyboard_idle>
    14de:	c2 cf       	rjmp	.-124    	; 0x1464 <EVENT_USB_Device_ControlRequest+0xde>

000014e0 <hook_late_init>:
/* hooks */
__attribute__((weak))
void hook_early_init(void) {}

__attribute__((weak))
void hook_late_init(void) {}
    14e0:	08 95       	ret

000014e2 <hook_early_init>:
    14e2:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <hook_late_init>

000014e6 <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    14e6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <keyboard_led_stats>
    14ea:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_led_stats>
    keyboard_led_stats = 0;
    14ee:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <keyboard_led_stats>
    led_set(keyboard_led_stats);
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	0e 94 03 08 	call	0x1006	; 0x1006 <led_set>

    matrix_clear();
    14f8:	0e 94 4e 11 	call	0x229c	; 0x229c <matrix_clear>
    clear_keyboard();
    14fc:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <clear_keyboard>

00001500 <EVENT_USB_Device_Suspend>:
    hook_usb_suspend_entry();
    1500:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <hook_usb_suspend_entry>

00001504 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    1504:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1508:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <USB_Device_RemoteWakeupEnabled>
    150c:	88 23       	and	r24, r24
    150e:	29 f0       	breq	.+10     	; 0x151a <hook_usb_suspend_loop+0x16>
    1510:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <suspend_wakeup_condition>
    1514:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    1516:	0c 94 37 0b 	jmp	0x166e	; 0x166e <USB_Device_SendRemoteWakeup>
    151a:	08 95       	ret

0000151c <main>:
    MCUSR &= ~(1 << WDRF);
    151c:	84 b7       	in	r24, 0x34	; 52
    151e:	87 7f       	andi	r24, 0xF7	; 247
    1520:	84 bf       	out	0x34, r24	; 52
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	a8 95       	wdr
    1528:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    152c:	88 61       	ori	r24, 0x18	; 24
    152e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1532:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1536:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	80 e8       	ldi	r24, 0x80	; 128
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1544:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1548:	0f be       	out	0x3f, r0	; 63
    print_set_sendchar(sendchar);
    154a:	8d e0       	ldi	r24, 0x0D	; 13
    154c:	98 e0       	ldi	r25, 0x08	; 8
    154e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <print_set_sendchar>
    print("\r\ninit\n");
    1552:	85 e2       	ldi	r24, 0x25	; 37
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    hook_early_init();
    155a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <hook_early_init>
    keyboard_setup();
    155e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <keyboard_setup>
    USB_Disable();
    1562:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <USB_Disable>
    USB_Init();
    1566:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <USB_Init>
    156a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    156e:	84 60       	ori	r24, 0x04	; 4
    1570:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    sei();
    1574:	78 94       	sei
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1576:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
    157a:	84 30       	cpi	r24, 0x04	; 4
    157c:	e1 f7       	brne	.-8      	; 0x1576 <main+0x5a>
    print("USB configured.\n");
    157e:	84 e1       	ldi	r24, 0x14	; 20
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    keyboard_init();
    1586:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <keyboard_init>
    host_set_driver(&lufa_driver);
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <host_set_driver>
    print("Keyboard start.\n");
    1592:	83 e0       	ldi	r24, 0x03	; 3
    1594:	91 e0       	ldi	r25, 0x01	; 1
    1596:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    hook_late_init();
    159a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <hook_late_init>
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    159e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
    15a2:	85 30       	cpi	r24, 0x05	; 5
    15a4:	19 f0       	breq	.+6      	; 0x15ac <main+0x90>
        keyboard_task();
    15a6:	0e 94 81 10 	call	0x2102	; 0x2102 <keyboard_task>
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    15aa:	f9 cf       	rjmp	.-14     	; 0x159e <main+0x82>
            hook_usb_suspend_loop();
    15ac:	0e 94 82 0a 	call	0x1504	; 0x1504 <hook_usb_suspend_loop>
    15b0:	f6 cf       	rjmp	.-20     	; 0x159e <main+0x82>

000015b2 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    15b2:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    15b6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_led_stats>
    15ba:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <keyboard_led_stats>
    15be:	08 95       	ret

000015c0 <EVENT_USB_Device_WakeUp>:
    hook_usb_wakeup();
    15c0:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <hook_usb_wakeup>

000015c4 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    15c4:	29 2f       	mov	r18, r25
    15c6:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    15c8:	23 30       	cpi	r18, 0x03	; 3
    15ca:	31 05       	cpc	r19, r1
    15cc:	79 f1       	breq	.+94     	; 0x162c <CALLBACK_USB_GetDescriptor+0x68>
    15ce:	58 f4       	brcc	.+22     	; 0x15e6 <CALLBACK_USB_GetDescriptor+0x22>
    15d0:	21 30       	cpi	r18, 0x01	; 1
    15d2:	31 05       	cpc	r19, r1
    15d4:	f1 f0       	breq	.+60     	; 0x1612 <CALLBACK_USB_GetDescriptor+0x4e>
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	31 05       	cpc	r19, r1
    15da:	19 f1       	breq	.+70     	; 0x1622 <CALLBACK_USB_GetDescriptor+0x5e>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	1a c0       	rjmp	.+52     	; 0x161a <CALLBACK_USB_GetDescriptor+0x56>
    15e6:	21 32       	cpi	r18, 0x21	; 33
    15e8:	31 05       	cpc	r19, r1
    15ea:	99 f1       	breq	.+102    	; 0x1652 <CALLBACK_USB_GetDescriptor+0x8e>
    15ec:	22 32       	cpi	r18, 0x22	; 34
    15ee:	31 05       	cpc	r19, r1
    15f0:	a9 f7       	brne	.-22     	; 0x15dc <CALLBACK_USB_GetDescriptor+0x18>
    15f2:	65 30       	cpi	r22, 0x05	; 5
    15f4:	98 f7       	brcc	.-26     	; 0x15dc <CALLBACK_USB_GetDescriptor+0x18>
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	fb 01       	movw	r30, r22
    15fa:	ee 0f       	add	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	e6 5e       	subi	r30, 0xE6	; 230
    1600:	fe 4f       	sbci	r31, 0xFE	; 254
    1602:	20 81       	ld	r18, Z
    1604:	31 81       	ldd	r19, Z+1	; 0x01
    1606:	6b 5e       	subi	r22, 0xEB	; 235
    1608:	7e 4f       	sbci	r23, 0xFE	; 254
    160a:	fb 01       	movw	r30, r22
    160c:	80 81       	ld	r24, Z
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	04 c0       	rjmp	.+8      	; 0x161a <CALLBACK_USB_GetDescriptor+0x56>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1612:	82 e1       	ldi	r24, 0x12	; 18
    1614:	90 e0       	ldi	r25, 0x00	; 0
            Address = &DeviceDescriptor;
    1616:	26 ee       	ldi	r18, 0xE6	; 230
    1618:	31 e0       	ldi	r19, 0x01	; 1
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    161a:	fa 01       	movw	r30, r20
    161c:	31 83       	std	Z+1, r19	; 0x01
    161e:	20 83       	st	Z, r18
    return Size;
}
    1620:	08 95       	ret
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1622:	8d e8       	ldi	r24, 0x8D	; 141
    1624:	90 e0       	ldi	r25, 0x00	; 0
            Address = &ConfigurationDescriptor;
    1626:	29 e5       	ldi	r18, 0x59	; 89
    1628:	31 e0       	ldi	r19, 0x01	; 1
            break;
    162a:	f7 cf       	rjmp	.-18     	; 0x161a <CALLBACK_USB_GetDescriptor+0x56>
            switch (DescriptorIndex )
    162c:	99 27       	eor	r25, r25
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	91 05       	cpc	r25, r1
    1632:	61 f0       	breq	.+24     	; 0x164c <CALLBACK_USB_GetDescriptor+0x88>
    1634:	28 f0       	brcs	.+10     	; 0x1640 <CALLBACK_USB_GetDescriptor+0x7c>
    1636:	02 97       	sbiw	r24, 0x02	; 2
    1638:	89 f6       	brne	.-94     	; 0x15dc <CALLBACK_USB_GetDescriptor+0x18>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    163a:	e5 e3       	ldi	r30, 0x35	; 53
    163c:	f1 e0       	ldi	r31, 0x01	; 1
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <CALLBACK_USB_GetDescriptor+0x80>
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1640:	e5 e5       	ldi	r30, 0x55	; 85
    1642:	f1 e0       	ldi	r31, 0x01	; 1
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1644:	84 91       	lpm	r24, Z
    1646:	90 e0       	ldi	r25, 0x00	; 0
                    Address = &ProductString;
    1648:	9f 01       	movw	r18, r30
                    break;
    164a:	e7 cf       	rjmp	.-50     	; 0x161a <CALLBACK_USB_GetDescriptor+0x56>
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    164c:	e1 e4       	ldi	r30, 0x41	; 65
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	f9 cf       	rjmp	.-14     	; 0x1644 <CALLBACK_USB_GetDescriptor+0x80>
    1652:	65 30       	cpi	r22, 0x05	; 5
    1654:	08 f0       	brcs	.+2      	; 0x1658 <CALLBACK_USB_GetDescriptor+0x94>
    1656:	c2 cf       	rjmp	.-124    	; 0x15dc <CALLBACK_USB_GetDescriptor+0x18>
    1658:	e6 2f       	mov	r30, r22
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	ec 5d       	subi	r30, 0xDC	; 220
    1662:	fe 4f       	sbci	r31, 0xFE	; 254
    1664:	20 81       	ld	r18, Z
    1666:	31 81       	ldd	r19, Z+1	; 0x01
    1668:	89 e0       	ldi	r24, 0x09	; 9
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	d6 cf       	rjmp	.-84     	; 0x161a <CALLBACK_USB_GetDescriptor+0x56>

0000166e <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    166e:	80 e1       	ldi	r24, 0x10	; 16
    1670:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1672:	82 e1       	ldi	r24, 0x12	; 18
    1674:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1676:	09 b4       	in	r0, 0x29	; 41
    1678:	00 fe       	sbrs	r0, 0
    167a:	fd cf       	rjmp	.-6      	; 0x1676 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    167c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1680:	8f 7d       	andi	r24, 0xDF	; 223
    1682:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1686:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    168a:	82 60       	ori	r24, 0x02	; 2
    168c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	while (UDCON & (1 << RMWKUP));
    1690:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1694:	81 fd       	sbrc	r24, 1
    1696:	fc cf       	rjmp	.-8      	; 0x1690 <USB_Device_SendRemoteWakeup+0x22>
}
    1698:	08 95       	ret

0000169a <Endpoint_Write_Stream_LE>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    169a:	af 92       	push	r10
    169c:	bf 92       	push	r11
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	ec 01       	movw	r28, r24
    16ae:	8b 01       	movw	r16, r22
    16b0:	7a 01       	movw	r14, r20
    16b2:	0e 94 ab 0c 	call	0x1956	; 0x1956 <Endpoint_WaitUntilReady>
    16b6:	d8 2e       	mov	r13, r24
    16b8:	81 11       	cpse	r24, r1
    16ba:	24 c0       	rjmp	.+72     	; 0x1704 <Endpoint_Write_Stream_LE+0x6a>
    16bc:	e1 14       	cp	r14, r1
    16be:	f1 04       	cpc	r15, r1
    16c0:	39 f0       	breq	.+14     	; 0x16d0 <Endpoint_Write_Stream_LE+0x36>
    16c2:	f7 01       	movw	r30, r14
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	08 1b       	sub	r16, r24
    16ca:	19 0b       	sbc	r17, r25
    16cc:	c8 0f       	add	r28, r24
    16ce:	d9 1f       	adc	r29, r25
    16d0:	a1 2c       	mov	r10, r1
    16d2:	b1 2c       	mov	r11, r1
    16d4:	01 15       	cp	r16, r1
    16d6:	11 05       	cpc	r17, r1
    16d8:	a9 f0       	breq	.+42     	; 0x1704 <Endpoint_Write_Stream_LE+0x6a>
    16da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16de:	85 fd       	sbrc	r24, 5
    16e0:	22 c0       	rjmp	.+68     	; 0x1726 <Endpoint_Write_Stream_LE+0x8c>
    16e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16e6:	8e 77       	andi	r24, 0x7E	; 126
    16e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16ec:	e1 14       	cp	r14, r1
    16ee:	f1 04       	cpc	r15, r1
    16f0:	a1 f0       	breq	.+40     	; 0x171a <Endpoint_Write_Stream_LE+0x80>
    16f2:	f7 01       	movw	r30, r14
    16f4:	80 81       	ld	r24, Z
    16f6:	91 81       	ldd	r25, Z+1	; 0x01
    16f8:	a8 0e       	add	r10, r24
    16fa:	b9 1e       	adc	r11, r25
    16fc:	b1 82       	std	Z+1, r11	; 0x01
    16fe:	a0 82       	st	Z, r10
    1700:	85 e0       	ldi	r24, 0x05	; 5
    1702:	d8 2e       	mov	r13, r24
    1704:	8d 2d       	mov	r24, r13
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	bf 90       	pop	r11
    1716:	af 90       	pop	r10
    1718:	08 95       	ret
    171a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <Endpoint_WaitUntilReady>
    171e:	88 23       	and	r24, r24
    1720:	c9 f2       	breq	.-78     	; 0x16d4 <Endpoint_Write_Stream_LE+0x3a>
    1722:	d8 2e       	mov	r13, r24
    1724:	ef cf       	rjmp	.-34     	; 0x1704 <Endpoint_Write_Stream_LE+0x6a>
    1726:	89 91       	ld	r24, Y+
    1728:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    172c:	01 50       	subi	r16, 0x01	; 1
    172e:	11 09       	sbc	r17, r1
    1730:	ff ef       	ldi	r31, 0xFF	; 255
    1732:	af 1a       	sub	r10, r31
    1734:	bf 0a       	sbc	r11, r31
    1736:	ce cf       	rjmp	.-100    	; 0x16d4 <Endpoint_Write_Stream_LE+0x3a>

00001738 <Endpoint_Write_Control_Stream_LE>:
    1738:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <USB_ControlRequest+0x6>
    173c:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <USB_ControlRequest+0x7>
    1740:	26 17       	cp	r18, r22
    1742:	37 07       	cpc	r19, r23
    1744:	a8 f0       	brcs	.+42     	; 0x1770 <Endpoint_Write_Control_Stream_LE+0x38>
    1746:	61 15       	cp	r22, r1
    1748:	71 05       	cpc	r23, r1
    174a:	29 f4       	brne	.+10     	; 0x1756 <Endpoint_Write_Control_Stream_LE+0x1e>
    174c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1750:	2e 77       	andi	r18, 0x7E	; 126
    1752:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1756:	fc 01       	movw	r30, r24
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	61 15       	cp	r22, r1
    175c:	71 05       	cpc	r23, r1
    175e:	51 f4       	brne	.+20     	; 0x1774 <Endpoint_Write_Control_Stream_LE+0x3c>
    1760:	21 11       	cpse	r18, r1
    1762:	08 c0       	rjmp	.+16     	; 0x1774 <Endpoint_Write_Control_Stream_LE+0x3c>
    1764:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1768:	82 ff       	sbrs	r24, 2
    176a:	33 c0       	rjmp	.+102    	; 0x17d2 <Endpoint_Write_Control_Stream_LE+0x9a>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	08 95       	ret
    1770:	b9 01       	movw	r22, r18
    1772:	f1 cf       	rjmp	.-30     	; 0x1756 <Endpoint_Write_Control_Stream_LE+0x1e>
    1774:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
    1778:	88 23       	and	r24, r24
    177a:	b9 f1       	breq	.+110    	; 0x17ea <Endpoint_Write_Control_Stream_LE+0xb2>
    177c:	85 30       	cpi	r24, 0x05	; 5
    177e:	b9 f1       	breq	.+110    	; 0x17ee <Endpoint_Write_Control_Stream_LE+0xb6>
    1780:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1784:	83 fd       	sbrc	r24, 3
    1786:	2f c0       	rjmp	.+94     	; 0x17e6 <Endpoint_Write_Control_Stream_LE+0xae>
    1788:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    178c:	82 fd       	sbrc	r24, 2
    178e:	ea cf       	rjmp	.-44     	; 0x1764 <Endpoint_Write_Control_Stream_LE+0x2c>
    1790:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1794:	80 ff       	sbrs	r24, 0
    1796:	e1 cf       	rjmp	.-62     	; 0x175a <Endpoint_Write_Control_Stream_LE+0x22>
    1798:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    179c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	92 2b       	or	r25, r18
    17a4:	61 15       	cp	r22, r1
    17a6:	71 05       	cpc	r23, r1
    17a8:	19 f0       	breq	.+6      	; 0x17b0 <Endpoint_Write_Control_Stream_LE+0x78>
    17aa:	88 30       	cpi	r24, 0x08	; 8
    17ac:	91 05       	cpc	r25, r1
    17ae:	50 f0       	brcs	.+20     	; 0x17c4 <Endpoint_Write_Control_Stream_LE+0x8c>
    17b0:	21 e0       	ldi	r18, 0x01	; 1
    17b2:	08 97       	sbiw	r24, 0x08	; 8
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <Endpoint_Write_Control_Stream_LE+0x80>
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17bc:	8e 77       	andi	r24, 0x7E	; 126
    17be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17c2:	cb cf       	rjmp	.-106    	; 0x175a <Endpoint_Write_Control_Stream_LE+0x22>
    17c4:	21 91       	ld	r18, Z+
    17c6:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    17ca:	61 50       	subi	r22, 0x01	; 1
    17cc:	71 09       	sbc	r23, r1
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	e9 cf       	rjmp	.-46     	; 0x17a4 <Endpoint_Write_Control_Stream_LE+0x6c>
    17d2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
    17d6:	88 23       	and	r24, r24
    17d8:	41 f0       	breq	.+16     	; 0x17ea <Endpoint_Write_Control_Stream_LE+0xb2>
    17da:	85 30       	cpi	r24, 0x05	; 5
    17dc:	41 f0       	breq	.+16     	; 0x17ee <Endpoint_Write_Control_Stream_LE+0xb6>
    17de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17e2:	83 ff       	sbrs	r24, 3
    17e4:	bf cf       	rjmp	.-130    	; 0x1764 <Endpoint_Write_Control_Stream_LE+0x2c>
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	08 95       	ret
    17ea:	82 e0       	ldi	r24, 0x02	; 2
    17ec:	08 95       	ret
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	08 95       	ret

000017f2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    17f2:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <USB_ControlRequest+0x6>
    17f6:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <USB_ControlRequest+0x7>
    17fa:	26 17       	cp	r18, r22
    17fc:	37 07       	cpc	r19, r23
    17fe:	a8 f0       	brcs	.+42     	; 0x182a <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1800:	61 15       	cp	r22, r1
    1802:	71 05       	cpc	r23, r1
    1804:	29 f4       	brne	.+10     	; 0x1810 <Endpoint_Write_Control_PStream_LE+0x1e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1806:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    180a:	2e 77       	andi	r18, 0x7E	; 126
    180c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1810:	fc 01       	movw	r30, r24
    1812:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1814:	61 15       	cp	r22, r1
    1816:	71 05       	cpc	r23, r1
    1818:	51 f4       	brne	.+20     	; 0x182e <Endpoint_Write_Control_PStream_LE+0x3c>
    181a:	21 11       	cpse	r18, r1
    181c:	08 c0       	rjmp	.+16     	; 0x182e <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    181e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1822:	82 ff       	sbrs	r24, 2
    1824:	34 c0       	rjmp	.+104    	; 0x188e <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	08 95       	ret
    182a:	b9 01       	movw	r22, r18
    182c:	f1 cf       	rjmp	.-30     	; 0x1810 <Endpoint_Write_Control_PStream_LE+0x1e>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    182e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1832:	88 23       	and	r24, r24
    1834:	c1 f1       	breq	.+112    	; 0x18a6 <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1836:	85 30       	cpi	r24, 0x05	; 5
    1838:	c1 f1       	breq	.+112    	; 0x18aa <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    183a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    183e:	83 fd       	sbrc	r24, 3
    1840:	30 c0       	rjmp	.+96     	; 0x18a2 <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1842:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    1846:	82 fd       	sbrc	r24, 2
    1848:	ea cf       	rjmp	.-44     	; 0x181e <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    184a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    184e:	80 ff       	sbrs	r24, 0
    1850:	e1 cf       	rjmp	.-62     	; 0x1814 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1852:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1856:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	92 2b       	or	r25, r18
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    185e:	61 15       	cp	r22, r1
    1860:	71 05       	cpc	r23, r1
    1862:	19 f0       	breq	.+6      	; 0x186a <Endpoint_Write_Control_PStream_LE+0x78>
    1864:	88 30       	cpi	r24, 0x08	; 8
    1866:	91 05       	cpc	r25, r1
    1868:	50 f0       	brcs	.+20     	; 0x187e <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    186a:	21 e0       	ldi	r18, 0x01	; 1
    186c:	08 97       	sbiw	r24, 0x08	; 8
    186e:	09 f0       	breq	.+2      	; 0x1872 <Endpoint_Write_Control_PStream_LE+0x80>
    1870:	20 e0       	ldi	r18, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1872:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1876:	8e 77       	andi	r24, 0x7E	; 126
    1878:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    187c:	cb cf       	rjmp	.-106    	; 0x1814 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    187e:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1880:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1884:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1886:	61 50       	subi	r22, 0x01	; 1
    1888:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	e8 cf       	rjmp	.-48     	; 0x185e <Endpoint_Write_Control_PStream_LE+0x6c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    188e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1892:	88 23       	and	r24, r24
    1894:	41 f0       	breq	.+16     	; 0x18a6 <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1896:	85 30       	cpi	r24, 0x05	; 5
    1898:	41 f0       	breq	.+16     	; 0x18aa <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    189a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    189e:	83 ff       	sbrs	r24, 3
    18a0:	be cf       	rjmp	.-132    	; 0x181e <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
}
    18a4:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18a6:	82 e0       	ldi	r24, 0x02	; 2
    18a8:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18aa:	83 e0       	ldi	r24, 0x03	; 3
    18ac:	08 95       	ret

000018ae <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    18ae:	98 2f       	mov	r25, r24
    18b0:	97 30       	cpi	r25, 0x07	; 7
    18b2:	28 f0       	brcs	.+10     	; 0x18be <Endpoint_ConfigureEndpoint_Prv+0x10>
    18b4:	8f 70       	andi	r24, 0x0F	; 15
    18b6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	08 95       	ret
    18be:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    18c2:	98 17       	cp	r25, r24
    18c4:	51 f0       	breq	.+20     	; 0x18da <Endpoint_ConfigureEndpoint_Prv+0x2c>
    18c6:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    18ca:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    18ce:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    18d2:	21 fd       	sbrc	r18, 1
    18d4:	06 c0       	rjmp	.+12     	; 0x18e2 <Endpoint_ConfigureEndpoint_Prv+0x34>
    18d6:	9f 5f       	subi	r25, 0xFF	; 255
    18d8:	eb cf       	rjmp	.-42     	; 0x18b0 <Endpoint_ConfigureEndpoint_Prv+0x2>
    18da:	24 2f       	mov	r18, r20
    18dc:	76 2f       	mov	r23, r22
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	f8 cf       	rjmp	.-16     	; 0x18d2 <Endpoint_ConfigureEndpoint_Prv+0x24>
    18e2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    18e6:	3e 7f       	andi	r19, 0xFE	; 254
    18e8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    18ec:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    18f0:	3d 7f       	andi	r19, 0xFD	; 253
    18f2:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    18f6:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    18fa:	31 60       	ori	r19, 0x01	; 1
    18fc:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1900:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1904:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1908:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    190c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1910:	27 fd       	sbrc	r18, 7
    1912:	e1 cf       	rjmp	.-62     	; 0x18d6 <Endpoint_ConfigureEndpoint_Prv+0x28>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	08 95       	ret

00001918 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1918:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest>
    191c:	87 ff       	sbrs	r24, 7
    191e:	13 c0       	rjmp	.+38     	; 0x1946 <Endpoint_ClearStatusStage+0x2e>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1920:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1924:	82 ff       	sbrs	r24, 2
    1926:	06 c0       	rjmp	.+12     	; 0x1934 <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1928:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    192c:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    192e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1932:	04 c0       	rjmp	.+8      	; 0x193c <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1934:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
    1938:	81 11       	cpse	r24, r1
    193a:	f2 cf       	rjmp	.-28     	; 0x1920 <Endpoint_ClearStatusStage+0x8>
    193c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    193e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
    1942:	88 23       	and	r24, r24
    1944:	d9 f3       	breq	.-10     	; 0x193c <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1946:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    194a:	80 ff       	sbrs	r24, 0
    194c:	f8 cf       	rjmp	.-16     	; 0x193e <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    194e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1952:	8e 77       	andi	r24, 0x7E	; 126
    1954:	ec cf       	rjmp	.-40     	; 0x192e <Endpoint_ClearStatusStage+0x16>

00001956 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1956:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    195a:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    195e:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1960:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1964:	90 fd       	sbrc	r25, 0
    1966:	20 c0       	rjmp	.+64     	; 0x19a8 <Endpoint_WaitUntilReady+0x52>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1968:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    196c:	92 fd       	sbrc	r25, 2
    196e:	20 c0       	rjmp	.+64     	; 0x19b0 <Endpoint_WaitUntilReady+0x5a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1970:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1974:	99 23       	and	r25, r25
    1976:	91 f0       	breq	.+36     	; 0x199c <Endpoint_WaitUntilReady+0x46>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1978:	95 30       	cpi	r25, 0x05	; 5
    197a:	91 f0       	breq	.+36     	; 0x19a0 <Endpoint_WaitUntilReady+0x4a>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    197c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1980:	95 fd       	sbrc	r25, 5
    1982:	10 c0       	rjmp	.+32     	; 0x19a4 <Endpoint_WaitUntilReady+0x4e>
    1984:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1988:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    198c:	42 17       	cp	r20, r18
    198e:	53 07       	cpc	r21, r19
    1990:	39 f3       	breq	.-50     	; 0x1960 <Endpoint_WaitUntilReady+0xa>
    1992:	81 50       	subi	r24, 0x01	; 1
    1994:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1996:	21 f7       	brne	.-56     	; 0x1960 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1998:	84 e0       	ldi	r24, 0x04	; 4
    199a:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    19a0:	83 e0       	ldi	r24, 0x03	; 3
    19a2:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	08 95       	ret
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19a8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
    19ac:	90 ff       	sbrs	r25, 0
    19ae:	e0 cf       	rjmp	.-64     	; 0x1970 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	08 95       	ret

000019b4 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    19b4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    19b8:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    19bc:	e0 ee       	ldi	r30, 0xE0	; 224
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	81 60       	ori	r24, 0x01	; 1
    19c4:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    19c6:	e8 ed       	ldi	r30, 0xD8	; 216
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	8f 77       	andi	r24, 0x7F	; 127
    19ce:	80 83       	st	Z, r24
				PLLCSR = 0;
    19d0:	19 bc       	out	0x29, r1	; 41
				UHWCON &= ~(1 << UVREGE);
    19d2:	a7 ed       	ldi	r26, 0xD7	; 215
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	8c 91       	ld	r24, X
    19d8:	8e 7f       	andi	r24, 0xFE	; 254
    19da:	8c 93       	st	X, r24
				USBCON &= ~(1 << OTGPADE);
    19dc:	80 81       	ld	r24, Z
    19de:	8f 7e       	andi	r24, 0xEF	; 239
    19e0:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    19e2:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <USB_IsInitialized>
    19e6:	08 95       	ret

000019e8 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    19f0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    19f4:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    19f8:	c8 ed       	ldi	r28, 0xD8	; 216
    19fa:	d0 e0       	ldi	r29, 0x00	; 0
    19fc:	88 81       	ld	r24, Y
    19fe:	8f 77       	andi	r24, 0x7F	; 127
    1a00:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1a02:	88 81       	ld	r24, Y
    1a04:	80 68       	ori	r24, 0x80	; 128
    1a06:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    1a08:	88 81       	ld	r24, Y
    1a0a:	8f 7d       	andi	r24, 0xDF	; 223
    1a0c:	88 83       	st	Y, r24
				PLLCSR = 0;
    1a0e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1a10:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1a14:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1a18:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1a1c:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1a20:	00 ee       	ldi	r16, 0xE0	; 224
    1a22:	10 e0       	ldi	r17, 0x00	; 0
    1a24:	f8 01       	movw	r30, r16
    1a26:	80 81       	ld	r24, Z
    1a28:	8b 7f       	andi	r24, 0xFB	; 251
    1a2a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1a2c:	88 81       	ld	r24, Y
    1a2e:	81 60       	ori	r24, 0x01	; 1
    1a30:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a32:	42 e0       	ldi	r20, 0x02	; 2
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1a3c:	e1 ee       	ldi	r30, 0xE1	; 225
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8e 7f       	andi	r24, 0xFE	; 254
    1a44:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    1a46:	e2 ee       	ldi	r30, 0xE2	; 226
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	81 60       	ori	r24, 0x01	; 1
    1a4e:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    1a50:	80 81       	ld	r24, Z
    1a52:	88 60       	ori	r24, 0x08	; 8
    1a54:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    1a56:	f8 01       	movw	r30, r16
    1a58:	80 81       	ld	r24, Z
    1a5a:	8e 7f       	andi	r24, 0xFE	; 254
    1a5c:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    1a5e:	88 81       	ld	r24, Y
    1a60:	80 61       	ori	r24, 0x10	; 16
    1a62:	88 83       	st	Y, r24
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	08 95       	ret

00001a6e <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    1a6e:	e8 ed       	ldi	r30, 0xD8	; 216
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	8f 7e       	andi	r24, 0xEF	; 239
    1a76:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    1a78:	e7 ed       	ldi	r30, 0xD7	; 215
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	81 60       	ori	r24, 0x01	; 1
    1a80:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    1a82:	84 e0       	ldi	r24, 0x04	; 4
    1a84:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <USB_IsInitialized>
	USB_ResetInterface();
    1a8c:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <USB_ResetInterface>

00001a90 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1a90:	e8 ed       	ldi	r30, 0xD8	; 216
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	8e 7f       	andi	r24, 0xFE	; 254
    1a98:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1a9a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1a9e:	08 95       	ret

00001aa0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1aa0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1aa4:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1aa8:	08 95       	ret

00001aaa <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1aaa:	1f 92       	push	r1
    1aac:	0f 92       	push	r0
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	0f 92       	push	r0
    1ab2:	11 24       	eor	r1, r1
    1ab4:	2f 93       	push	r18
    1ab6:	3f 93       	push	r19
    1ab8:	4f 93       	push	r20
    1aba:	5f 93       	push	r21
    1abc:	6f 93       	push	r22
    1abe:	7f 93       	push	r23
    1ac0:	8f 93       	push	r24
    1ac2:	9f 93       	push	r25
    1ac4:	af 93       	push	r26
    1ac6:	bf 93       	push	r27
    1ac8:	ef 93       	push	r30
    1aca:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1acc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1ad0:	82 ff       	sbrs	r24, 2
    1ad2:	0b c0       	rjmp	.+22     	; 0x1aea <__vector_10+0x40>
						return (UDIEN  & (1 << SOFE));
    1ad4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ad8:	82 ff       	sbrs	r24, 2
    1ada:	07 c0       	rjmp	.+14     	; 0x1aea <__vector_10+0x40>
						UDINT  &= ~(1 << SOFI);
    1adc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ae0:	8b 7f       	andi	r24, 0xFB	; 251
    1ae2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1ae6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <EVENT_USB_Device_StartOfFrame>
						return (USBINT & (1 << VBUSTI));
    1aea:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1aee:	80 ff       	sbrs	r24, 0
    1af0:	19 c0       	rjmp	.+50     	; 0x1b24 <__vector_10+0x7a>
						return (USBCON & (1 << VBUSTE));
    1af2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1af6:	80 ff       	sbrs	r24, 0
    1af8:	15 c0       	rjmp	.+42     	; 0x1b24 <__vector_10+0x7a>
						USBINT &= ~(1 << VBUSTI);
    1afa:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1afe:	8e 7f       	andi	r24, 0xFE	; 254
    1b00:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1b04:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1b08:	80 ff       	sbrs	r24, 0
    1b0a:	94 c0       	rjmp	.+296    	; 0x1c34 <__vector_10+0x18a>
				PLLCSR = USB_PLL_PSC;
    1b0c:	80 e1       	ldi	r24, 0x10	; 16
    1b0e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1b10:	82 e1       	ldi	r24, 0x12	; 18
    1b12:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1b14:	09 b4       	in	r0, 0x29	; 41
    1b16:	00 fe       	sbrs	r0, 0
    1b18:	fd cf       	rjmp	.-6      	; 0x1b14 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1b20:	0e 94 4e 09 	call	0x129c	; 0x129c <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    1b24:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1b28:	80 ff       	sbrs	r24, 0
    1b2a:	19 c0       	rjmp	.+50     	; 0x1b5e <__vector_10+0xb4>
						return (UDIEN  & (1 << SUSPE));
    1b2c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b30:	80 ff       	sbrs	r24, 0
    1b32:	15 c0       	rjmp	.+42     	; 0x1b5e <__vector_10+0xb4>
						UDIEN  &= ~(1 << SUSPE);
    1b34:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b38:	8e 7f       	andi	r24, 0xFE	; 254
    1b3a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1b3e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b42:	80 61       	ori	r24, 0x10	; 16
    1b44:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				USBCON |=  (1 << FRZCLK);
    1b48:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1b4c:	80 62       	ori	r24, 0x20	; 32
    1b4e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    1b52:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1b54:	85 e0       	ldi	r24, 0x05	; 5
    1b56:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1b5a:	0e 94 80 0a 	call	0x1500	; 0x1500 <EVENT_USB_Device_Suspend>
						return (UDINT  & (1 << WAKEUPI));
    1b5e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1b62:	84 ff       	sbrs	r24, 4
    1b64:	29 c0       	rjmp	.+82     	; 0x1bb8 <__vector_10+0x10e>
						return (UDIEN  & (1 << WAKEUPE));
    1b66:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b6a:	84 ff       	sbrs	r24, 4
    1b6c:	25 c0       	rjmp	.+74     	; 0x1bb8 <__vector_10+0x10e>
				PLLCSR = USB_PLL_PSC;
    1b6e:	80 e1       	ldi	r24, 0x10	; 16
    1b70:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1b72:	82 e1       	ldi	r24, 0x12	; 18
    1b74:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1b76:	09 b4       	in	r0, 0x29	; 41
    1b78:	00 fe       	sbrs	r0, 0
    1b7a:	fd cf       	rjmp	.-6      	; 0x1b76 <__vector_10+0xcc>
				USBCON &= ~(1 << FRZCLK);
    1b7c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1b80:	8f 7d       	andi	r24, 0xDF	; 223
    1b82:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    1b86:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1b8a:	8f 7e       	andi	r24, 0xEF	; 239
    1b8c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    1b90:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b94:	8f 7e       	andi	r24, 0xEF	; 239
    1b96:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    1b9a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b9e:	81 60       	ori	r24, 0x01	; 1
    1ba0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1ba4:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_Device_ConfigurationNumber>
    1ba8:	88 23       	and	r24, r24
    1baa:	09 f4       	brne	.+2      	; 0x1bae <__vector_10+0x104>
    1bac:	49 c0       	rjmp	.+146    	; 0x1c40 <__vector_10+0x196>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1bae:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1bb0:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1bb4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <EVENT_USB_Device_WakeUp>
						return (UDINT  & (1 << EORSTI));
    1bb8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1bbc:	83 ff       	sbrs	r24, 3
    1bbe:	29 c0       	rjmp	.+82     	; 0x1c12 <__vector_10+0x168>
						return (UDIEN  & (1 << EORSTE));
    1bc0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1bc4:	83 ff       	sbrs	r24, 3
    1bc6:	25 c0       	rjmp	.+74     	; 0x1c12 <__vector_10+0x168>
						UDINT  &= ~(1 << EORSTI);
    1bc8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1bcc:	87 7f       	andi	r24, 0xF7	; 247
    1bce:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1bd8:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1bdc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1be0:	8e 7f       	andi	r24, 0xFE	; 254
    1be2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    1be6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1bea:	8e 7f       	andi	r24, 0xFE	; 254
    1bec:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1bf0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1bf4:	80 61       	ori	r24, 0x10	; 16
    1bf6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1bfa:	42 e0       	ldi	r20, 0x02	; 2
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    1c04:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1c08:	88 60       	ori	r24, 0x08	; 8
    1c0a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1c0e:	0e 94 67 09 	call	0x12ce	; 0x12ce <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1c12:	ff 91       	pop	r31
    1c14:	ef 91       	pop	r30
    1c16:	bf 91       	pop	r27
    1c18:	af 91       	pop	r26
    1c1a:	9f 91       	pop	r25
    1c1c:	8f 91       	pop	r24
    1c1e:	7f 91       	pop	r23
    1c20:	6f 91       	pop	r22
    1c22:	5f 91       	pop	r21
    1c24:	4f 91       	pop	r20
    1c26:	3f 91       	pop	r19
    1c28:	2f 91       	pop	r18
    1c2a:	0f 90       	pop	r0
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	0f 90       	pop	r0
    1c30:	1f 90       	pop	r1
    1c32:	18 95       	reti
				PLLCSR = 0;
    1c34:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    1c36:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1c3a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <EVENT_USB_Device_Disconnect>
    1c3e:	72 cf       	rjmp	.-284    	; 0x1b24 <__vector_10+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1c40:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1c44:	87 fd       	sbrc	r24, 7
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <__vector_10+0x1a2>
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	b2 cf       	rjmp	.-156    	; 0x1bb0 <__vector_10+0x106>
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	b0 cf       	rjmp	.-160    	; 0x1bb0 <__vector_10+0x106>

00001c50 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1c50:	1f 92       	push	r1
    1c52:	0f 92       	push	r0
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	0f 92       	push	r0
    1c58:	11 24       	eor	r1, r1
    1c5a:	2f 93       	push	r18
    1c5c:	3f 93       	push	r19
    1c5e:	4f 93       	push	r20
    1c60:	5f 93       	push	r21
    1c62:	6f 93       	push	r22
    1c64:	7f 93       	push	r23
    1c66:	8f 93       	push	r24
    1c68:	9f 93       	push	r25
    1c6a:	af 93       	push	r26
    1c6c:	bf 93       	push	r27
    1c6e:	cf 93       	push	r28
    1c70:	ef 93       	push	r30
    1c72:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1c74:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1c78:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c7a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c7e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    1c82:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1c86:	87 7f       	andi	r24, 0xF7	; 247
    1c88:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1c8c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1c8e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <USB_Device_ProcessControlRequest>
    1c92:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    1c96:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1c9a:	88 60       	ori	r24, 0x08	; 8
    1c9c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1ca0:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1ca4:	ff 91       	pop	r31
    1ca6:	ef 91       	pop	r30
    1ca8:	cf 91       	pop	r28
    1caa:	bf 91       	pop	r27
    1cac:	af 91       	pop	r26
    1cae:	9f 91       	pop	r25
    1cb0:	8f 91       	pop	r24
    1cb2:	7f 91       	pop	r23
    1cb4:	6f 91       	pop	r22
    1cb6:	5f 91       	pop	r21
    1cb8:	4f 91       	pop	r20
    1cba:	3f 91       	pop	r19
    1cbc:	2f 91       	pop	r18
    1cbe:	0f 90       	pop	r0
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	0f 90       	pop	r0
    1cc4:	1f 90       	pop	r1
    1cc6:	18 95       	reti

00001cc8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	aa 97       	sbiw	r28, 0x2a	; 42
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	e0 e0       	ldi	r30, 0x00	; 0
    1ce0:	f2 e0       	ldi	r31, 0x02	; 2
				return UEDATX;
    1ce2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1ce6:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1ce8:	22 e0       	ldi	r18, 0x02	; 2
    1cea:	e8 30       	cpi	r30, 0x08	; 8
    1cec:	f2 07       	cpc	r31, r18
    1cee:	c9 f7       	brne	.-14     	; 0x1ce2 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    1cf0:	0e 94 c3 09 	call	0x1386	; 0x1386 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cf4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1cf8:	83 ff       	sbrs	r24, 3
    1cfa:	44 c0       	rjmp	.+136    	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1cfc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1d00:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <USB_ControlRequest+0x1>
    1d04:	49 2f       	mov	r20, r25
    1d06:	50 e0       	ldi	r21, 0x00	; 0
    1d08:	4a 30       	cpi	r20, 0x0A	; 10
    1d0a:	51 05       	cpc	r21, r1
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <USB_Device_ProcessControlRequest+0x48>
    1d0e:	3a c0       	rjmp	.+116    	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
    1d10:	fa 01       	movw	r30, r20
    1d12:	e3 57       	subi	r30, 0x73	; 115
    1d14:	f1 4f       	sbci	r31, 0xF1	; 241
    1d16:	0c 94 ea 29 	jmp	0x53d4	; 0x53d4 <__tablejump2__>
    1d1a:	97 0e       	add	r9, r23
    1d1c:	bb 0e       	add	r11, r27
    1d1e:	c2 0e       	add	r12, r18
    1d20:	bb 0e       	add	r11, r27
    1d22:	c2 0e       	add	r12, r18
    1d24:	16 0f       	add	r17, r22
    1d26:	39 0f       	add	r19, r25
    1d28:	c2 0e       	add	r12, r18
    1d2a:	8e 0f       	add	r24, r30
    1d2c:	9b 0f       	add	r25, r27
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d2e:	80 38       	cpi	r24, 0x80	; 128
    1d30:	79 f0       	breq	.+30     	; 0x1d50 <USB_Device_ProcessControlRequest+0x88>
    1d32:	82 38       	cpi	r24, 0x82	; 130
    1d34:	39 f5       	brne	.+78     	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1d36:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest+0x4>
    1d3a:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d3c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d40:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1d44:	85 fb       	bst	r24, 5
    1d46:	88 27       	eor	r24, r24
    1d48:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d4a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1d4e:	06 c0       	rjmp	.+12     	; 0x1d5c <USB_Device_ProcessControlRequest+0x94>
	uint8_t CurrentStatus = 0;
    1d50:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    1d54:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <USB_Device_RemoteWakeupEnabled>
    1d58:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1d5a:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    1d5c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d60:	97 7f       	andi	r25, 0xF7	; 247
    1d62:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1d66:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1d6a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d6e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d72:	8e 77       	andi	r24, 0x7E	; 126
    1d74:	2d c0       	rjmp	.+90     	; 0x1dd0 <USB_Device_ProcessControlRequest+0x108>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d76:	28 2f       	mov	r18, r24
    1d78:	2d 7f       	andi	r18, 0xFD	; 253
    1d7a:	21 f4       	brne	.+8      	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1d7c:	88 23       	and	r24, r24
    1d7e:	d1 f0       	breq	.+52     	; 0x1db4 <USB_Device_ProcessControlRequest+0xec>
    1d80:	82 30       	cpi	r24, 0x02	; 2
    1d82:	59 f1       	breq	.+86     	; 0x1dda <USB_Device_ProcessControlRequest+0x112>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsSETUPReceived())
    1d88:	83 ff       	sbrs	r24, 3
    1d8a:	0a c0       	rjmp	.+20     	; 0x1da0 <USB_Device_ProcessControlRequest+0xd8>
				UEINTX &= ~(1 << RXSTPI);
    1d8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d90:	87 7f       	andi	r24, 0xF7	; 247
    1d92:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    1d96:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1d9a:	80 62       	ori	r24, 0x20	; 32
    1d9c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
    1da0:	aa 96       	adiw	r28, 0x2a	; 42
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	08 95       	ret
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1db4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_ControlRequest+0x2>
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	21 f7       	brne	.-56     	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1dbc:	93 30       	cpi	r25, 0x03	; 3
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <USB_Device_ProcessControlRequest+0xfa>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dc6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    1dca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1dce:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1dd0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1dd4:	0e 94 8c 0c 	call	0x1918	; 0x1918 <Endpoint_ClearStatusStage>
    1dd8:	d5 cf       	rjmp	.-86     	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1dda:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_ControlRequest+0x2>
    1dde:	81 11       	cpse	r24, r1
    1de0:	f2 cf       	rjmp	.-28     	; 0x1dc6 <USB_Device_ProcessControlRequest+0xfe>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1de2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest+0x4>
    1de6:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1de8:	69 f2       	breq	.-102    	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1dee:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1df2:	20 ff       	sbrs	r18, 0
    1df4:	e8 cf       	rjmp	.-48     	; 0x1dc6 <USB_Device_ProcessControlRequest+0xfe>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1df6:	93 30       	cpi	r25, 0x03	; 3
    1df8:	31 f4       	brne	.+12     	; 0x1e06 <USB_Device_ProcessControlRequest+0x13e>
				UECONX |= (1 << STALLRQ);
    1dfa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1dfe:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    1e00:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e04:	e0 cf       	rjmp	.-64     	; 0x1dc6 <USB_Device_ProcessControlRequest+0xfe>
				UECONX |= (1 << STALLRQC);
    1e06:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e0a:	90 61       	ori	r25, 0x10	; 16
    1e0c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e10:	21 e0       	ldi	r18, 0x01	; 1
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <USB_Device_ProcessControlRequest+0x150>
    1e16:	22 0f       	add	r18, r18
    1e18:	8a 95       	dec	r24
    1e1a:	ea f7       	brpl	.-6      	; 0x1e16 <USB_Device_ProcessControlRequest+0x14e>
    1e1c:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1e20:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    1e24:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e28:	88 60       	ori	r24, 0x08	; 8
    1e2a:	ea cf       	rjmp	.-44     	; 0x1e00 <USB_Device_ProcessControlRequest+0x138>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	aa cf       	rjmp	.-172    	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1e30:	10 91 02 02 	lds	r17, 0x0202	; 0x800202 <USB_ControlRequest+0x2>
    1e34:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1e36:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1e3a:	80 78       	andi	r24, 0x80	; 128
    1e3c:	81 2b       	or	r24, r17
    1e3e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    1e42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e46:	87 7f       	andi	r24, 0xF7	; 247
    1e48:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1e4c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    1e54:	80 ff       	sbrs	r24, 0
    1e56:	fc cf       	rjmp	.-8      	; 0x1e50 <USB_Device_ProcessControlRequest+0x188>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1e58:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1e5c:	80 68       	ori	r24, 0x80	; 128
    1e5e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1e62:	11 11       	cpse	r17, r1
    1e64:	04 c0       	rjmp	.+8      	; 0x1e6e <USB_Device_ProcessControlRequest+0x1a6>
    1e66:	82 e0       	ldi	r24, 0x02	; 2
    1e68:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <USB_DeviceState>
    1e6c:	8b cf       	rjmp	.-234    	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
    1e6e:	83 e0       	ldi	r24, 0x03	; 3
    1e70:	fb cf       	rjmp	.-10     	; 0x1e68 <USB_Device_ProcessControlRequest+0x1a0>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e72:	80 58       	subi	r24, 0x80	; 128
    1e74:	82 30       	cpi	r24, 0x02	; 2
    1e76:	08 f0       	brcs	.+2      	; 0x1e7a <USB_Device_ProcessControlRequest+0x1b2>
    1e78:	85 cf       	rjmp	.-246    	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1e7a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_ControlRequest+0x2>
    1e7e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <USB_ControlRequest+0x3>
    1e82:	8c 3d       	cpi	r24, 0xDC	; 220
    1e84:	23 e0       	ldi	r18, 0x03	; 3
    1e86:	92 07       	cpc	r25, r18
    1e88:	a1 f5       	brne	.+104    	; 0x1ef2 <USB_Device_ProcessControlRequest+0x22a>
	SignatureDescriptor.Header.Type = DTYPE_String;
    1e8a:	83 e0       	ldi	r24, 0x03	; 3
    1e8c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1e8e:	8a e2       	ldi	r24, 0x2A	; 42
    1e90:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1e92:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1e94:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1e96:	de 01       	movw	r26, r28
    1e98:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1e9c:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1e9e:	51 e2       	ldi	r21, 0x21	; 33
    1ea0:	e3 2f       	mov	r30, r19
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1ea8:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1eaa:	20 ff       	sbrs	r18, 0
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <USB_Device_ProcessControlRequest+0x1ec>
					{
						SerialByte >>= 4;
    1eae:	e2 95       	swap	r30
    1eb0:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1eb2:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1eb4:	ef 70       	andi	r30, 0x0F	; 15
    1eb6:	8e 2f       	mov	r24, r30
    1eb8:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1eba:	ea 30       	cpi	r30, 0x0A	; 10
    1ebc:	c0 f0       	brcs	.+48     	; 0x1eee <USB_Device_ProcessControlRequest+0x226>
    1ebe:	c7 96       	adiw	r24, 0x37	; 55
    1ec0:	8d 93       	st	X+, r24
    1ec2:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ec4:	2f 5f       	subi	r18, 0xFF	; 255
    1ec6:	24 31       	cpi	r18, 0x14	; 20
    1ec8:	59 f7       	brne	.-42     	; 0x1ea0 <USB_Device_ProcessControlRequest+0x1d8>
				SREG = GlobalIntState;
    1eca:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    1ecc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ed0:	87 7f       	andi	r24, 0xF7	; 247
    1ed2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1ed6:	6a e2       	ldi	r22, 0x2A	; 42
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	ce 01       	movw	r24, r28
    1edc:	01 96       	adiw	r24, 0x01	; 1
    1ede:	0e 94 9c 0b 	call	0x1738	; 0x1738 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ee2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ee6:	8b 77       	andi	r24, 0x7B	; 123
    1ee8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1eec:	4b cf       	rjmp	.-362    	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1eee:	c0 96       	adiw	r24, 0x30	; 48
    1ef0:	e7 cf       	rjmp	.-50     	; 0x1ec0 <USB_Device_ProcessControlRequest+0x1f8>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1ef2:	ae 01       	movw	r20, r28
    1ef4:	4f 5f       	subi	r20, 0xFF	; 255
    1ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef8:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <USB_ControlRequest+0x4>
    1efc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <CALLBACK_USB_GetDescriptor>
    1f00:	bc 01       	movw	r22, r24
    1f02:	89 2b       	or	r24, r25
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <USB_Device_ProcessControlRequest+0x240>
    1f06:	3e cf       	rjmp	.-388    	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
				UEINTX &= ~(1 << RXSTPI);
    1f08:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f0c:	97 7f       	andi	r25, 0xF7	; 247
    1f0e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	9a 81       	ldd	r25, Y+2	; 0x02
    1f16:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <Endpoint_Write_Control_PStream_LE>
    1f1a:	e3 cf       	rjmp	.-58     	; 0x1ee2 <USB_Device_ProcessControlRequest+0x21a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1f1c:	80 38       	cpi	r24, 0x80	; 128
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <USB_Device_ProcessControlRequest+0x25a>
    1f20:	31 cf       	rjmp	.-414    	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
    1f22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f26:	87 7f       	andi	r24, 0xF7	; 247
    1f28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1f2c:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    1f30:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1f34:	1c cf       	rjmp	.-456    	; 0x1d6e <USB_Device_ProcessControlRequest+0xa6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f36:	81 11       	cpse	r24, r1
    1f38:	25 cf       	rjmp	.-438    	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1f3a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USB_ControlRequest+0x2>
    1f3e:	92 30       	cpi	r25, 0x02	; 2
    1f40:	08 f0       	brcs	.+2      	; 0x1f44 <USB_Device_ProcessControlRequest+0x27c>
    1f42:	20 cf       	rjmp	.-448    	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>
				UEINTX &= ~(1 << RXSTPI);
    1f44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f48:	87 7f       	andi	r24, 0xF7	; 247
    1f4a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1f4e:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    1f52:	0e 94 8c 0c 	call	0x1918	; 0x1918 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    1f56:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_Device_ConfigurationNumber>
    1f5a:	88 23       	and	r24, r24
    1f5c:	11 f0       	breq	.+4      	; 0x1f62 <USB_Device_ProcessControlRequest+0x29a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1f5e:	84 e0       	ldi	r24, 0x04	; 4
    1f60:	05 c0       	rjmp	.+10     	; 0x1f6c <USB_Device_ProcessControlRequest+0x2a4>
				return (UDADDR & (1 << ADDEN));
    1f62:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1f66:	87 fd       	sbrc	r24, 7
    1f68:	fa cf       	rjmp	.-12     	; 0x1f5e <USB_Device_ProcessControlRequest+0x296>
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1f70:	0e 94 aa 09 	call	0x1354	; 0x1354 <EVENT_USB_Device_ConfigurationChanged>
    1f74:	07 cf       	rjmp	.-498    	; 0x1d84 <USB_Device_ProcessControlRequest+0xbc>

00001f76 <host_set_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    1f76:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <driver+0x1>
    1f7a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <driver>
    1f7e:	08 95       	ret

00001f80 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1f80:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    1f84:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    1f88:	30 97       	sbiw	r30, 0x00	; 0
    1f8a:	21 f0       	breq	.+8      	; 0x1f94 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1f8c:	01 90       	ld	r0, Z+
    1f8e:	f0 81       	ld	r31, Z
    1f90:	e0 2d       	mov	r30, r0
    1f92:	09 94       	ijmp
}
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	08 95       	ret

00001f98 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	f8 2e       	mov	r15, r24
    1fa4:	19 2f       	mov	r17, r25
    if (!driver) return;
    1fa6:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    1faa:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    1fae:	30 97       	sbiw	r30, 0x00	; 0
    1fb0:	a9 f1       	breq	.+106    	; 0x201c <host_keyboard_send+0x84>
    (*driver->send_keyboard)(report);
    1fb2:	02 80       	ldd	r0, Z+2	; 0x02
    1fb4:	f3 81       	ldd	r31, Z+3	; 0x03
    1fb6:	e0 2d       	mov	r30, r0
    1fb8:	09 95       	icall

    if (debug_keyboard) {
    1fba:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    1fbe:	82 ff       	sbrs	r24, 2
    1fc0:	2d c0       	rjmp	.+90     	; 0x201c <host_keyboard_send+0x84>
        dprint("keyboard: ");
    1fc2:	80 ff       	sbrs	r24, 0
    1fc4:	04 c0       	rjmp	.+8      	; 0x1fce <host_keyboard_send+0x36>
    1fc6:	8c e3       	ldi	r24, 0x3C	; 60
    1fc8:	93 e0       	ldi	r25, 0x03	; 3
    1fca:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    1fce:	cf 2d       	mov	r28, r15
    1fd0:	d1 2f       	mov	r29, r17
{
    1fd2:	10 e2       	ldi	r17, 0x20	; 32
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    1fd4:	86 e3       	ldi	r24, 0x36	; 54
    1fd6:	e8 2e       	mov	r14, r24
    1fd8:	83 e0       	ldi	r24, 0x03	; 3
    1fda:	f8 2e       	mov	r15, r24
    1fdc:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    1fe0:	80 ff       	sbrs	r24, 0
    1fe2:	0b c0       	rjmp	.+22     	; 0x1ffa <host_keyboard_send+0x62>
    1fe4:	88 81       	ld	r24, Y
    1fe6:	1f 92       	push	r1
    1fe8:	8f 93       	push	r24
    1fea:	ff 92       	push	r15
    1fec:	ef 92       	push	r14
    1fee:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	11 50       	subi	r17, 0x01	; 1
    1ffc:	21 96       	adiw	r28, 0x01	; 1
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    1ffe:	11 11       	cpse	r17, r1
    2000:	ed cf       	rjmp	.-38     	; 0x1fdc <host_keyboard_send+0x44>
        }
        dprint("\n");
    2002:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    2006:	80 ff       	sbrs	r24, 0
    2008:	09 c0       	rjmp	.+18     	; 0x201c <host_keyboard_send+0x84>
    200a:	84 e3       	ldi	r24, 0x34	; 52
    200c:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	ff 90       	pop	r15
    2016:	ef 90       	pop	r14
        dprint("\n");
    2018:	0c 94 00 06 	jmp	0xc00	; 0xc00 <xputs>
}
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	1f 91       	pop	r17
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	08 95       	ret

00002028 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2028:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    202c:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    2030:	30 97       	sbiw	r30, 0x00	; 0
    2032:	21 f0       	breq	.+8      	; 0x203c <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2034:	04 80       	ldd	r0, Z+4	; 0x04
    2036:	f5 81       	ldd	r31, Z+5	; 0x05
    2038:	e0 2d       	mov	r30, r0
    203a:	09 94       	ijmp
    203c:	08 95       	ret

0000203e <host_system_send>:
}

void host_system_send(uint16_t report)
{
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    2044:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <last_system_report>
    2048:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <last_system_report+0x1>
    204c:	8c 17       	cp	r24, r28
    204e:	9d 07       	cpc	r25, r29
    2050:	01 f1       	breq	.+64     	; 0x2092 <host_system_send+0x54>
    last_system_report = report;
    2052:	d0 93 79 01 	sts	0x0179, r29	; 0x800179 <last_system_report+0x1>
    2056:	c0 93 78 01 	sts	0x0178, r28	; 0x800178 <last_system_report>

    if (!driver) return;
    205a:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    205e:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    2062:	30 97       	sbiw	r30, 0x00	; 0
    2064:	b1 f0       	breq	.+44     	; 0x2092 <host_system_send+0x54>
    (*driver->send_system)(report);
    2066:	06 80       	ldd	r0, Z+6	; 0x06
    2068:	f7 81       	ldd	r31, Z+7	; 0x07
    206a:	e0 2d       	mov	r30, r0
    206c:	ce 01       	movw	r24, r28
    206e:	09 95       	icall

    if (debug_keyboard) {
        dprintf("system: %04X\n", report);
    2070:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    2074:	85 70       	andi	r24, 0x05	; 5
    2076:	85 30       	cpi	r24, 0x05	; 5
    2078:	61 f4       	brne	.+24     	; 0x2092 <host_system_send+0x54>
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	86 e2       	ldi	r24, 0x26	; 38
    2080:	93 e0       	ldi	r25, 0x03	; 3
    2082:	9f 93       	push	r25
    2084:	8f 93       	push	r24
    2086:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    }
}
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	08 95       	ret

00002098 <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    209e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <last_consumer_report>
    20a2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <last_consumer_report+0x1>
    20a6:	8c 17       	cp	r24, r28
    20a8:	9d 07       	cpc	r25, r29
    20aa:	01 f1       	breq	.+64     	; 0x20ec <host_consumer_send+0x54>
    last_consumer_report = report;
    20ac:	d0 93 77 01 	sts	0x0177, r29	; 0x800177 <last_consumer_report+0x1>
    20b0:	c0 93 76 01 	sts	0x0176, r28	; 0x800176 <last_consumer_report>

    if (!driver) return;
    20b4:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    20b8:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    20bc:	30 97       	sbiw	r30, 0x00	; 0
    20be:	b1 f0       	breq	.+44     	; 0x20ec <host_consumer_send+0x54>
    (*driver->send_consumer)(report);
    20c0:	00 84       	ldd	r0, Z+8	; 0x08
    20c2:	f1 85       	ldd	r31, Z+9	; 0x09
    20c4:	e0 2d       	mov	r30, r0
    20c6:	ce 01       	movw	r24, r28
    20c8:	09 95       	icall

    if (debug_keyboard) {
        dprintf("consumer: %04X\n", report);
    20ca:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    20ce:	85 70       	andi	r24, 0x05	; 5
    20d0:	85 30       	cpi	r24, 0x05	; 5
    20d2:	61 f4       	brne	.+24     	; 0x20ec <host_consumer_send+0x54>
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	86 e1       	ldi	r24, 0x16	; 22
    20da:	93 e0       	ldi	r25, 0x03	; 3
    20dc:	9f 93       	push	r25
    20de:	8f 93       	push	r24
    20e0:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    }
}
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    20f2:	0c 94 4f 11 	jmp	0x229e	; 0x229e <matrix_setup>

000020f6 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    20f6:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <timer_init>
    matrix_init();
    20fa:	0e 94 a9 06 	call	0xd52	; 0xd52 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    20fe:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <bootmagic>

00002102 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2102:	5f 92       	push	r5
    2104:	6f 92       	push	r6
    2106:	7f 92       	push	r7
    2108:	8f 92       	push	r8
    210a:	9f 92       	push	r9
    210c:	af 92       	push	r10
    210e:	bf 92       	push	r11
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	00 d0       	rcall	.+0      	; 0x2122 <keyboard_task+0x20>
    2122:	00 d0       	rcall	.+0      	; 0x2124 <keyboard_task+0x22>
    2124:	1f 92       	push	r1
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    212a:	0e 94 cc 06 	call	0xd98	; 0xd98 <matrix_scan>
    212e:	0d e7       	ldi	r16, 0x7D	; 125
    2130:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2132:	51 2c       	mov	r5, r1
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2134:	66 24       	eor	r6, r6
    2136:	63 94       	inc	r6
    2138:	71 2c       	mov	r7, r1
        matrix_row = matrix_get_row(r);
    213a:	85 2d       	mov	r24, r5
    213c:	0e 94 fa 07 	call	0xff4	; 0xff4 <matrix_get_row>
    2140:	5c 01       	movw	r10, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2142:	f8 01       	movw	r30, r16
    2144:	c0 80       	ld	r12, Z
    2146:	d1 80       	ldd	r13, Z+1	; 0x01
        if (matrix_change) {
    2148:	8c 15       	cp	r24, r12
    214a:	9d 05       	cpc	r25, r13
    214c:	09 f0       	breq	.+2      	; 0x2150 <keyboard_task+0x4e>
    214e:	4e c0       	rjmp	.+156    	; 0x21ec <keyboard_task+0xea>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2150:	53 94       	inc	r5
    2152:	0e 5f       	subi	r16, 0xFE	; 254
    2154:	1f 4f       	sbci	r17, 0xFF	; 255
    2156:	f5 e0       	ldi	r31, 0x05	; 5
    2158:	5f 12       	cpse	r5, r31
    215a:	ef cf       	rjmp	.-34     	; 0x213a <keyboard_task+0x38>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    215c:	8f ef       	ldi	r24, 0xFF	; 255
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	8a 83       	std	Y+2, r24	; 0x02
    2162:	1b 82       	std	Y+3, r1	; 0x03
    2164:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <timer_read>
    2168:	81 60       	ori	r24, 0x01	; 1
    216a:	78 2f       	mov	r23, r24
    216c:	9d 83       	std	Y+5, r25	; 0x05
    216e:	8c 83       	std	Y+4, r24	; 0x04
    2170:	49 81       	ldd	r20, Y+1	; 0x01
    2172:	5a 81       	ldd	r21, Y+2	; 0x02
    2174:	6b 81       	ldd	r22, Y+3	; 0x03
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	0e 94 86 11 	call	0x230c	; 0x230c <action_exec>

MATRIX_LOOP_END:

    hook_keyboard_loop();
    217c:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2180:	0e 94 e5 22 	call	0x45ca	; 0x45ca <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2184:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <host_keyboard_leds>
    2188:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <led_status.4900>
    218c:	89 17       	cp	r24, r25
    218e:	09 f4       	brne	.+2      	; 0x2192 <keyboard_task+0x90>
    2190:	6e c0       	rjmp	.+220    	; 0x226e <keyboard_task+0x16c>
        led_status = host_keyboard_leds();
    2192:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <host_keyboard_leds>
    2196:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <led_status.4900>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    219a:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <debug_config>
    219e:	95 70       	andi	r25, 0x05	; 5
    21a0:	95 30       	cpi	r25, 0x05	; 5
    21a2:	61 f4       	brne	.+24     	; 0x21bc <keyboard_task+0xba>
    21a4:	1f 92       	push	r1
    21a6:	8f 93       	push	r24
    21a8:	87 e4       	ldi	r24, 0x47	; 71
    21aa:	93 e0       	ldi	r25, 0x03	; 3
    21ac:	9f 93       	push	r25
    21ae:	8f 93       	push	r24
    21b0:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    21bc:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <led_status.4900>
    }
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	1f 91       	pop	r17
    21d0:	0f 91       	pop	r16
    21d2:	ff 90       	pop	r15
    21d4:	ef 90       	pop	r14
    21d6:	df 90       	pop	r13
    21d8:	cf 90       	pop	r12
    21da:	bf 90       	pop	r11
    21dc:	af 90       	pop	r10
    21de:	9f 90       	pop	r9
    21e0:	8f 90       	pop	r8
    21e2:	7f 90       	pop	r7
    21e4:	6f 90       	pop	r6
    21e6:	5f 90       	pop	r5
        hook_keyboard_leds_change(led_status);
    21e8:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <hook_keyboard_leds_change>
            if (debug_matrix) matrix_print();
    21ec:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    21f0:	81 fd       	sbrc	r24, 1
    21f2:	0e 94 50 11 	call	0x22a0	; 0x22a0 <matrix_print>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    21f6:	e1 2c       	mov	r14, r1
    21f8:	f1 2c       	mov	r15, r1
        matrix_change = matrix_row ^ matrix_prev[r];
    21fa:	ca 24       	eor	r12, r10
    21fc:	db 24       	eor	r13, r11
                if (matrix_change & ((matrix_row_t)1<<c)) {
    21fe:	43 01       	movw	r8, r6
    2200:	0e 2c       	mov	r0, r14
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <keyboard_task+0x106>
    2204:	88 0c       	add	r8, r8
    2206:	99 1c       	adc	r9, r9
    2208:	0a 94       	dec	r0
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <keyboard_task+0x102>
    220c:	c6 01       	movw	r24, r12
    220e:	88 21       	and	r24, r8
    2210:	99 21       	and	r25, r9
    2212:	89 2b       	or	r24, r25
    2214:	21 f1       	breq	.+72     	; 0x225e <keyboard_task+0x15c>
                    keyevent_t e = (keyevent_t){
    2216:	e9 82       	std	Y+1, r14	; 0x01
    2218:	5a 82       	std	Y+2, r5	; 0x02
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    221a:	21 e0       	ldi	r18, 0x01	; 1
    221c:	c5 01       	movw	r24, r10
    221e:	88 21       	and	r24, r8
    2220:	99 21       	and	r25, r9
    2222:	89 2b       	or	r24, r25
    2224:	09 f4       	brne	.+2      	; 0x2228 <keyboard_task+0x126>
    2226:	20 e0       	ldi	r18, 0x00	; 0
                    keyevent_t e = (keyevent_t){
    2228:	2b 83       	std	Y+3, r18	; 0x03
                        .time = (timer_read() | 1) /* time should not be 0 */
    222a:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <timer_read>
    222e:	81 60       	ori	r24, 0x01	; 1
                    keyevent_t e = (keyevent_t){
    2230:	78 2f       	mov	r23, r24
    2232:	9d 83       	std	Y+5, r25	; 0x05
    2234:	8c 83       	std	Y+4, r24	; 0x04
                    action_exec(e);
    2236:	49 81       	ldd	r20, Y+1	; 0x01
    2238:	5a 81       	ldd	r21, Y+2	; 0x02
    223a:	6b 81       	ldd	r22, Y+3	; 0x03
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	0e 94 86 11 	call	0x230c	; 0x230c <action_exec>
                    hook_matrix_change(e);
    2242:	49 81       	ldd	r20, Y+1	; 0x01
    2244:	5a 81       	ldd	r21, Y+2	; 0x02
    2246:	6b 81       	ldd	r22, Y+3	; 0x03
    2248:	7c 81       	ldd	r23, Y+4	; 0x04
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <hook_matrix_change>
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2250:	f8 01       	movw	r30, r16
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
    2256:	88 26       	eor	r8, r24
    2258:	99 26       	eor	r9, r25
    225a:	91 82       	std	Z+1, r9	; 0x01
    225c:	80 82       	st	Z, r8
    225e:	ff ef       	ldi	r31, 0xFF	; 255
    2260:	ef 1a       	sub	r14, r31
    2262:	ff 0a       	sbc	r15, r31
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2264:	8e e0       	ldi	r24, 0x0E	; 14
    2266:	e8 16       	cp	r14, r24
    2268:	f1 04       	cpc	r15, r1
    226a:	49 f6       	brne	.-110    	; 0x21fe <keyboard_task+0xfc>
    226c:	71 cf       	rjmp	.-286    	; 0x2150 <keyboard_task+0x4e>
}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	ff 90       	pop	r15
    2282:	ef 90       	pop	r14
    2284:	df 90       	pop	r13
    2286:	cf 90       	pop	r12
    2288:	bf 90       	pop	r11
    228a:	af 90       	pop	r10
    228c:	9f 90       	pop	r9
    228e:	8f 90       	pop	r8
    2290:	7f 90       	pop	r7
    2292:	6f 90       	pop	r6
    2294:	5f 90       	pop	r5
    2296:	08 95       	ret

00002298 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    2298:	0c 94 03 08 	jmp	0x1006	; 0x1006 <led_set>

0000229c <matrix_clear>:
    229c:	08 95       	ret

0000229e <matrix_setup>:
    229e:	08 95       	ret

000022a0 <matrix_print>:
    return (matrix_get_row(row) & (1<<col));
}

__attribute__ ((weak))
void matrix_print(void)
{
    22a0:	ef 92       	push	r14
    22a2:	ff 92       	push	r15
    22a4:	0f 93       	push	r16
    22a6:	1f 93       	push	r17
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
#elif (MATRIX_COLS <= 16)
    print("r/c 0123456789ABCDEF\n");
    22ac:	81 e6       	ldi	r24, 0x61	; 97
    22ae:	93 e0       	ldi	r25, 0x03	; 3
    22b0:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    22b4:	c0 e0       	ldi	r28, 0x00	; 0
    22b6:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
#elif (MATRIX_COLS <= 16)
        xprintf("%02X: %016b%s\n", row, bitrev16(matrix_get_row(row)),
    22b8:	8e e2       	ldi	r24, 0x2E	; 46
    22ba:	e8 2e       	mov	r14, r24
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	f8 2e       	mov	r15, r24
    22c0:	02 e5       	ldi	r16, 0x52	; 82
    22c2:	13 e0       	ldi	r17, 0x03	; 3
    22c4:	8c 2f       	mov	r24, r28
    22c6:	0e 94 fa 07 	call	0xff4	; 0xff4 <matrix_get_row>
    22ca:	0e 94 c6 1c 	call	0x398c	; 0x398c <bitrev16>
    22ce:	ff 92       	push	r15
    22d0:	ef 92       	push	r14
    22d2:	9f 93       	push	r25
    22d4:	8f 93       	push	r24
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	1f 93       	push	r17
    22dc:	0f 93       	push	r16
    22de:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    22e2:	21 96       	adiw	r28, 0x01	; 1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    22e4:	8d b7       	in	r24, 0x3d	; 61
    22e6:	9e b7       	in	r25, 0x3e	; 62
    22e8:	08 96       	adiw	r24, 0x08	; 8
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	9e bf       	out	0x3e, r25	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	8d bf       	out	0x3d, r24	; 61
    22f4:	c5 30       	cpi	r28, 0x05	; 5
    22f6:	d1 05       	cpc	r29, r1
    22f8:	29 f7       	brne	.-54     	; 0x22c4 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	ff 90       	pop	r15
    2304:	ef 90       	pop	r14
    2306:	08 95       	ret

00002308 <matrix_power_up>:
    2308:	08 95       	ret

0000230a <matrix_power_down>:
    return false;
}
#endif

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
    230a:	08 95       	ret

0000230c <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	2b 97       	sbiw	r28, 0x0b	; 11
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	94 2f       	mov	r25, r20
    2322:	4f 83       	std	Y+7, r20	; 0x07
    2324:	25 2f       	mov	r18, r21
    2326:	58 87       	std	Y+8, r21	; 0x08
    2328:	69 87       	std	Y+9, r22	; 0x09
    232a:	7a 87       	std	Y+10, r23	; 0x0a
    232c:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    232e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2330:	5b 85       	ldd	r21, Y+11	; 0x0b
    2332:	45 2b       	or	r20, r21
    2334:	39 f0       	breq	.+14     	; 0x2344 <action_exec+0x38>
    2336:	2f 3f       	cpi	r18, 0xFF	; 255
    2338:	19 f4       	brne	.+6      	; 0x2340 <action_exec+0x34>
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	9f 3f       	cpi	r25, 0xFF	; 255
    233e:	19 f0       	breq	.+6      	; 0x2346 <action_exec+0x3a>
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <action_exec+0x3a>
    2344:	81 e0       	ldi	r24, 0x01	; 1
    if (!IS_NOEVENT(event)) {
    2346:	80 fd       	sbrc	r24, 0
    2348:	07 c0       	rjmp	.+14     	; 0x2358 <action_exec+0x4c>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    234a:	4f 81       	ldd	r20, Y+7	; 0x07
    234c:	58 85       	ldd	r21, Y+8	; 0x08
    234e:	69 85       	ldd	r22, Y+9	; 0x09
    2350:	7a 85       	ldd	r23, Y+10	; 0x0a
    2352:	8b 85       	ldd	r24, Y+11	; 0x0b
    2354:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    2358:	de 01       	movw	r26, r28
    235a:	11 96       	adiw	r26, 0x01	; 1
    235c:	86 e0       	ldi	r24, 0x06	; 6
    235e:	fd 01       	movw	r30, r26
    2360:	11 92       	st	Z+, r1
    2362:	8a 95       	dec	r24
    2364:	e9 f7       	brne	.-6      	; 0x2360 <action_exec+0x54>
    2366:	85 e0       	ldi	r24, 0x05	; 5
    2368:	fe 01       	movw	r30, r28
    236a:	37 96       	adiw	r30, 0x07	; 7
    236c:	01 90       	ld	r0, Z+
    236e:	0d 92       	st	X+, r0
    2370:	8a 95       	dec	r24
    2372:	e1 f7       	brne	.-8      	; 0x236c <action_exec+0x60>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2374:	49 81       	ldd	r20, Y+1	; 0x01
    2376:	5a 81       	ldd	r21, Y+2	; 0x02
    2378:	6b 81       	ldd	r22, Y+3	; 0x03
    237a:	7c 81       	ldd	r23, Y+4	; 0x04
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	9e 81       	ldd	r25, Y+6	; 0x06
    2380:	0e 94 1b 19 	call	0x3236	; 0x3236 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2384:	2b 96       	adiw	r28, 0x0b	; 11
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	08 95       	ret

00002396 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2396:	cf 93       	push	r28
    2398:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    239a:	88 23       	and	r24, r24
    239c:	09 f4       	brne	.+2      	; 0x23a0 <register_code+0xa>
    239e:	fb c0       	rjmp	.+502    	; 0x2596 <register_code+0x200>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    23a0:	82 38       	cpi	r24, 0x82	; 130
    23a2:	c1 f4       	brne	.+48     	; 0x23d4 <register_code+0x3e>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    23a4:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <host_keyboard_leds>
    23a8:	81 fd       	sbrc	r24, 1
    23aa:	f5 c0       	rjmp	.+490    	; 0x2596 <register_code+0x200>
#endif
        add_key(KC_CAPSLOCK);
    23ac:	89 e3       	ldi	r24, 0x39	; 57
    23ae:	0e 94 a7 1b 	call	0x374e	; 0x374e <add_key>
        send_keyboard_report();
    23b2:	0e 94 83 1c 	call	0x3906	; 0x3906 <send_keyboard_report>
	__builtin_avr_delay_cycles(__ticks_dc);
    23b6:	2f ef       	ldi	r18, 0xFF	; 255
    23b8:	81 ee       	ldi	r24, 0xE1	; 225
    23ba:	94 e0       	ldi	r25, 0x04	; 4
    23bc:	21 50       	subi	r18, 0x01	; 1
    23be:	80 40       	sbci	r24, 0x00	; 0
    23c0:	90 40       	sbci	r25, 0x00	; 0
    23c2:	e1 f7       	brne	.-8      	; 0x23bc <register_code+0x26>
    23c4:	00 c0       	rjmp	.+0      	; 0x23c6 <register_code+0x30>
    23c6:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    23c8:	89 e3       	ldi	r24, 0x39	; 57
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    23ca:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    23ce:	cf 91       	pop	r28
        send_keyboard_report();
    23d0:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    23d4:	83 38       	cpi	r24, 0x83	; 131
    23d6:	a1 f4       	brne	.+40     	; 0x2400 <register_code+0x6a>
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    23d8:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <host_keyboard_leds>
    23dc:	80 fd       	sbrc	r24, 0
    23de:	db c0       	rjmp	.+438    	; 0x2596 <register_code+0x200>
        add_key(KC_NUMLOCK);
    23e0:	83 e5       	ldi	r24, 0x53	; 83
    23e2:	0e 94 a7 1b 	call	0x374e	; 0x374e <add_key>
        send_keyboard_report();
    23e6:	0e 94 83 1c 	call	0x3906	; 0x3906 <send_keyboard_report>
    23ea:	2f ef       	ldi	r18, 0xFF	; 255
    23ec:	81 ee       	ldi	r24, 0xE1	; 225
    23ee:	94 e0       	ldi	r25, 0x04	; 4
    23f0:	21 50       	subi	r18, 0x01	; 1
    23f2:	80 40       	sbci	r24, 0x00	; 0
    23f4:	90 40       	sbci	r25, 0x00	; 0
    23f6:	e1 f7       	brne	.-8      	; 0x23f0 <register_code+0x5a>
    23f8:	00 c0       	rjmp	.+0      	; 0x23fa <register_code+0x64>
    23fa:	00 00       	nop
        del_key(KC_NUMLOCK);
    23fc:	83 e5       	ldi	r24, 0x53	; 83
    23fe:	e5 cf       	rjmp	.-54     	; 0x23ca <register_code+0x34>
    else if (KC_LOCKING_SCROLL == code) {
    2400:	84 38       	cpi	r24, 0x84	; 132
    2402:	a1 f4       	brne	.+40     	; 0x242c <register_code+0x96>
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2404:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <host_keyboard_leds>
    2408:	82 fd       	sbrc	r24, 2
    240a:	c5 c0       	rjmp	.+394    	; 0x2596 <register_code+0x200>
        add_key(KC_SCROLLLOCK);
    240c:	87 e4       	ldi	r24, 0x47	; 71
    240e:	0e 94 a7 1b 	call	0x374e	; 0x374e <add_key>
        send_keyboard_report();
    2412:	0e 94 83 1c 	call	0x3906	; 0x3906 <send_keyboard_report>
    2416:	2f ef       	ldi	r18, 0xFF	; 255
    2418:	81 ee       	ldi	r24, 0xE1	; 225
    241a:	94 e0       	ldi	r25, 0x04	; 4
    241c:	21 50       	subi	r18, 0x01	; 1
    241e:	80 40       	sbci	r24, 0x00	; 0
    2420:	90 40       	sbci	r25, 0x00	; 0
    2422:	e1 f7       	brne	.-8      	; 0x241c <register_code+0x86>
    2424:	00 c0       	rjmp	.+0      	; 0x2426 <register_code+0x90>
    2426:	00 00       	nop
        del_key(KC_SCROLLLOCK);
    2428:	87 e4       	ldi	r24, 0x47	; 71
    242a:	cf cf       	rjmp	.-98     	; 0x23ca <register_code+0x34>
    else if IS_KEY(code) {
    242c:	8c ef       	ldi	r24, 0xFC	; 252
    242e:	8c 0f       	add	r24, r28
    2430:	81 3a       	cpi	r24, 0xA1	; 161
    2432:	48 f4       	brcc	.+18     	; 0x2446 <register_code+0xb0>
        if (command_proc(code)) return;
    2434:	8c 2f       	mov	r24, r28
    2436:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <command_proc>
    243a:	81 11       	cpse	r24, r1
    243c:	ac c0       	rjmp	.+344    	; 0x2596 <register_code+0x200>
            add_key(code);
    243e:	8c 2f       	mov	r24, r28
    2440:	0e 94 a7 1b 	call	0x374e	; 0x374e <add_key>
    2444:	c4 cf       	rjmp	.-120    	; 0x23ce <register_code+0x38>
    else if IS_MOD(code) {
    2446:	80 e2       	ldi	r24, 0x20	; 32
    2448:	8c 0f       	add	r24, r28
    244a:	88 30       	cpi	r24, 0x08	; 8
    244c:	48 f4       	brcc	.+18     	; 0x2460 <register_code+0xca>
        add_mods(MOD_BIT(code));
    244e:	c7 70       	andi	r28, 0x07	; 7
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <register_code+0xc0>
    2454:	88 0f       	add	r24, r24
    2456:	ca 95       	dec	r28
    2458:	ea f7       	brpl	.-6      	; 0x2454 <register_code+0xbe>
    245a:	0e 94 48 1c 	call	0x3890	; 0x3890 <add_mods>
    245e:	b7 cf       	rjmp	.-146    	; 0x23ce <register_code+0x38>
    else if IS_SYSTEM(code) {
    2460:	8b e5       	ldi	r24, 0x5B	; 91
    2462:	8c 0f       	add	r24, r28
    2464:	83 30       	cpi	r24, 0x03	; 3
    2466:	78 f4       	brcc	.+30     	; 0x2486 <register_code+0xf0>
        host_system_send(KEYCODE2SYSTEM(code));
    2468:	c5 3a       	cpi	r28, 0xA5	; 165
    246a:	39 f0       	breq	.+14     	; 0x247a <register_code+0xe4>
    246c:	c6 3a       	cpi	r28, 0xA6	; 166
    246e:	41 f0       	breq	.+16     	; 0x2480 <register_code+0xea>
    2470:	83 e8       	ldi	r24, 0x83	; 131
    2472:	90 e0       	ldi	r25, 0x00	; 0
}
    2474:	cf 91       	pop	r28
        host_system_send(KEYCODE2SYSTEM(code));
    2476:	0c 94 1f 10 	jmp	0x203e	; 0x203e <host_system_send>
    247a:	81 e8       	ldi	r24, 0x81	; 129
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	fa cf       	rjmp	.-12     	; 0x2474 <register_code+0xde>
    2480:	82 e8       	ldi	r24, 0x82	; 130
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	f7 cf       	rjmp	.-18     	; 0x2474 <register_code+0xde>
    else if IS_CONSUMER(code) {
    2486:	88 e5       	ldi	r24, 0x58	; 88
    2488:	8c 0f       	add	r24, r28
    248a:	85 31       	cpi	r24, 0x15	; 21
    248c:	08 f0       	brcs	.+2      	; 0x2490 <register_code+0xfa>
    248e:	83 c0       	rjmp	.+262    	; 0x2596 <register_code+0x200>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2490:	c8 3a       	cpi	r28, 0xA8	; 168
    2492:	09 f4       	brne	.+2      	; 0x2496 <register_code+0x100>
    2494:	41 c0       	rjmp	.+130    	; 0x2518 <register_code+0x182>
    2496:	c9 3a       	cpi	r28, 0xA9	; 169
    2498:	09 f4       	brne	.+2      	; 0x249c <register_code+0x106>
    249a:	41 c0       	rjmp	.+130    	; 0x251e <register_code+0x188>
    249c:	ca 3a       	cpi	r28, 0xAA	; 170
    249e:	09 f4       	brne	.+2      	; 0x24a2 <register_code+0x10c>
    24a0:	41 c0       	rjmp	.+130    	; 0x2524 <register_code+0x18e>
    24a2:	cb 3a       	cpi	r28, 0xAB	; 171
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <register_code+0x112>
    24a6:	41 c0       	rjmp	.+130    	; 0x252a <register_code+0x194>
    24a8:	cc 3a       	cpi	r28, 0xAC	; 172
    24aa:	09 f4       	brne	.+2      	; 0x24ae <register_code+0x118>
    24ac:	41 c0       	rjmp	.+130    	; 0x2530 <register_code+0x19a>
    24ae:	cd 3a       	cpi	r28, 0xAD	; 173
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <register_code+0x11e>
    24b2:	41 c0       	rjmp	.+130    	; 0x2536 <register_code+0x1a0>
    24b4:	ce 3a       	cpi	r28, 0xAE	; 174
    24b6:	09 f4       	brne	.+2      	; 0x24ba <register_code+0x124>
    24b8:	41 c0       	rjmp	.+130    	; 0x253c <register_code+0x1a6>
    24ba:	cf 3a       	cpi	r28, 0xAF	; 175
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <register_code+0x12a>
    24be:	41 c0       	rjmp	.+130    	; 0x2542 <register_code+0x1ac>
    24c0:	c1 3b       	cpi	r28, 0xB1	; 177
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <register_code+0x130>
    24c4:	41 c0       	rjmp	.+130    	; 0x2548 <register_code+0x1b2>
    24c6:	c0 3b       	cpi	r28, 0xB0	; 176
    24c8:	09 f4       	brne	.+2      	; 0x24cc <register_code+0x136>
    24ca:	41 c0       	rjmp	.+130    	; 0x254e <register_code+0x1b8>
    24cc:	c2 3b       	cpi	r28, 0xB2	; 178
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <register_code+0x13c>
    24d0:	41 c0       	rjmp	.+130    	; 0x2554 <register_code+0x1be>
    24d2:	c3 3b       	cpi	r28, 0xB3	; 179
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <register_code+0x142>
    24d6:	41 c0       	rjmp	.+130    	; 0x255a <register_code+0x1c4>
    24d8:	c4 3b       	cpi	r28, 0xB4	; 180
    24da:	09 f4       	brne	.+2      	; 0x24de <register_code+0x148>
    24dc:	41 c0       	rjmp	.+130    	; 0x2560 <register_code+0x1ca>
    24de:	c5 3b       	cpi	r28, 0xB5	; 181
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <register_code+0x14e>
    24e2:	41 c0       	rjmp	.+130    	; 0x2566 <register_code+0x1d0>
    24e4:	c6 3b       	cpi	r28, 0xB6	; 182
    24e6:	09 f4       	brne	.+2      	; 0x24ea <register_code+0x154>
    24e8:	41 c0       	rjmp	.+130    	; 0x256c <register_code+0x1d6>
    24ea:	c7 3b       	cpi	r28, 0xB7	; 183
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <register_code+0x15a>
    24ee:	41 c0       	rjmp	.+130    	; 0x2572 <register_code+0x1dc>
    24f0:	c8 3b       	cpi	r28, 0xB8	; 184
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <register_code+0x160>
    24f4:	41 c0       	rjmp	.+130    	; 0x2578 <register_code+0x1e2>
    24f6:	c9 3b       	cpi	r28, 0xB9	; 185
    24f8:	09 f4       	brne	.+2      	; 0x24fc <register_code+0x166>
    24fa:	41 c0       	rjmp	.+130    	; 0x257e <register_code+0x1e8>
    24fc:	ca 3b       	cpi	r28, 0xBA	; 186
    24fe:	09 f4       	brne	.+2      	; 0x2502 <register_code+0x16c>
    2500:	41 c0       	rjmp	.+130    	; 0x2584 <register_code+0x1ee>
    2502:	cb 3b       	cpi	r28, 0xBB	; 187
    2504:	09 f4       	brne	.+2      	; 0x2508 <register_code+0x172>
    2506:	41 c0       	rjmp	.+130    	; 0x258a <register_code+0x1f4>
    2508:	cc 3b       	cpi	r28, 0xBC	; 188
    250a:	09 f4       	brne	.+2      	; 0x250e <register_code+0x178>
    250c:	41 c0       	rjmp	.+130    	; 0x2590 <register_code+0x1fa>
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
}
    2512:	cf 91       	pop	r28
        host_consumer_send(KEYCODE2CONSUMER(code));
    2514:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <host_consumer_send>
    2518:	82 ee       	ldi	r24, 0xE2	; 226
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	fa cf       	rjmp	.-12     	; 0x2512 <register_code+0x17c>
    251e:	89 ee       	ldi	r24, 0xE9	; 233
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	f7 cf       	rjmp	.-18     	; 0x2512 <register_code+0x17c>
    2524:	8a ee       	ldi	r24, 0xEA	; 234
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	f4 cf       	rjmp	.-24     	; 0x2512 <register_code+0x17c>
    252a:	85 eb       	ldi	r24, 0xB5	; 181
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	f1 cf       	rjmp	.-30     	; 0x2512 <register_code+0x17c>
    2530:	86 eb       	ldi	r24, 0xB6	; 182
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	ee cf       	rjmp	.-36     	; 0x2512 <register_code+0x17c>
    2536:	83 eb       	ldi	r24, 0xB3	; 179
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	eb cf       	rjmp	.-42     	; 0x2512 <register_code+0x17c>
    253c:	84 eb       	ldi	r24, 0xB4	; 180
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	e8 cf       	rjmp	.-48     	; 0x2512 <register_code+0x17c>
    2542:	87 eb       	ldi	r24, 0xB7	; 183
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	e5 cf       	rjmp	.-54     	; 0x2512 <register_code+0x17c>
    2548:	8c ec       	ldi	r24, 0xCC	; 204
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	e2 cf       	rjmp	.-60     	; 0x2512 <register_code+0x17c>
    254e:	8d ec       	ldi	r24, 0xCD	; 205
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	df cf       	rjmp	.-66     	; 0x2512 <register_code+0x17c>
    2554:	83 e8       	ldi	r24, 0x83	; 131
    2556:	91 e0       	ldi	r25, 0x01	; 1
    2558:	dc cf       	rjmp	.-72     	; 0x2512 <register_code+0x17c>
    255a:	8a e8       	ldi	r24, 0x8A	; 138
    255c:	91 e0       	ldi	r25, 0x01	; 1
    255e:	d9 cf       	rjmp	.-78     	; 0x2512 <register_code+0x17c>
    2560:	82 e9       	ldi	r24, 0x92	; 146
    2562:	91 e0       	ldi	r25, 0x01	; 1
    2564:	d6 cf       	rjmp	.-84     	; 0x2512 <register_code+0x17c>
    2566:	84 e9       	ldi	r24, 0x94	; 148
    2568:	91 e0       	ldi	r25, 0x01	; 1
    256a:	d3 cf       	rjmp	.-90     	; 0x2512 <register_code+0x17c>
    256c:	81 e2       	ldi	r24, 0x21	; 33
    256e:	92 e0       	ldi	r25, 0x02	; 2
    2570:	d0 cf       	rjmp	.-96     	; 0x2512 <register_code+0x17c>
    2572:	83 e2       	ldi	r24, 0x23	; 35
    2574:	92 e0       	ldi	r25, 0x02	; 2
    2576:	cd cf       	rjmp	.-102    	; 0x2512 <register_code+0x17c>
    2578:	84 e2       	ldi	r24, 0x24	; 36
    257a:	92 e0       	ldi	r25, 0x02	; 2
    257c:	ca cf       	rjmp	.-108    	; 0x2512 <register_code+0x17c>
    257e:	85 e2       	ldi	r24, 0x25	; 37
    2580:	92 e0       	ldi	r25, 0x02	; 2
    2582:	c7 cf       	rjmp	.-114    	; 0x2512 <register_code+0x17c>
    2584:	86 e2       	ldi	r24, 0x26	; 38
    2586:	92 e0       	ldi	r25, 0x02	; 2
    2588:	c4 cf       	rjmp	.-120    	; 0x2512 <register_code+0x17c>
    258a:	87 e2       	ldi	r24, 0x27	; 39
    258c:	92 e0       	ldi	r25, 0x02	; 2
    258e:	c1 cf       	rjmp	.-126    	; 0x2512 <register_code+0x17c>
    2590:	8a e2       	ldi	r24, 0x2A	; 42
    2592:	92 e0       	ldi	r25, 0x02	; 2
    2594:	be cf       	rjmp	.-132    	; 0x2512 <register_code+0x17c>
}
    2596:	cf 91       	pop	r28
    2598:	08 95       	ret

0000259a <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    259a:	88 23       	and	r24, r24
    259c:	09 f4       	brne	.+2      	; 0x25a0 <unregister_code+0x6>
    259e:	66 c0       	rjmp	.+204    	; 0x266c <unregister_code+0xd2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    25a0:	82 38       	cpi	r24, 0x82	; 130
    25a2:	b9 f4       	brne	.+46     	; 0x25d2 <unregister_code+0x38>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    25a4:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <host_keyboard_leds>
    25a8:	81 ff       	sbrs	r24, 1
    25aa:	60 c0       	rjmp	.+192    	; 0x266c <unregister_code+0xd2>
#endif
        add_key(KC_CAPSLOCK);
    25ac:	89 e3       	ldi	r24, 0x39	; 57
    25ae:	0e 94 a7 1b 	call	0x374e	; 0x374e <add_key>
        send_keyboard_report();
    25b2:	0e 94 83 1c 	call	0x3906	; 0x3906 <send_keyboard_report>
    25b6:	2f ef       	ldi	r18, 0xFF	; 255
    25b8:	81 ee       	ldi	r24, 0xE1	; 225
    25ba:	94 e0       	ldi	r25, 0x04	; 4
    25bc:	21 50       	subi	r18, 0x01	; 1
    25be:	80 40       	sbci	r24, 0x00	; 0
    25c0:	90 40       	sbci	r25, 0x00	; 0
    25c2:	e1 f7       	brne	.-8      	; 0x25bc <unregister_code+0x22>
    25c4:	00 c0       	rjmp	.+0      	; 0x25c6 <unregister_code+0x2c>
    25c6:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    25c8:	89 e3       	ldi	r24, 0x39	; 57
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    25ca:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <del_key>
        send_keyboard_report();
    25ce:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    25d2:	83 38       	cpi	r24, 0x83	; 131
    25d4:	a1 f4       	brne	.+40     	; 0x25fe <unregister_code+0x64>
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    25d6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <host_keyboard_leds>
    25da:	80 ff       	sbrs	r24, 0
    25dc:	47 c0       	rjmp	.+142    	; 0x266c <unregister_code+0xd2>
        add_key(KC_NUMLOCK);
    25de:	83 e5       	ldi	r24, 0x53	; 83
    25e0:	0e 94 a7 1b 	call	0x374e	; 0x374e <add_key>
        send_keyboard_report();
    25e4:	0e 94 83 1c 	call	0x3906	; 0x3906 <send_keyboard_report>
    25e8:	2f ef       	ldi	r18, 0xFF	; 255
    25ea:	81 ee       	ldi	r24, 0xE1	; 225
    25ec:	94 e0       	ldi	r25, 0x04	; 4
    25ee:	21 50       	subi	r18, 0x01	; 1
    25f0:	80 40       	sbci	r24, 0x00	; 0
    25f2:	90 40       	sbci	r25, 0x00	; 0
    25f4:	e1 f7       	brne	.-8      	; 0x25ee <unregister_code+0x54>
    25f6:	00 c0       	rjmp	.+0      	; 0x25f8 <unregister_code+0x5e>
    25f8:	00 00       	nop
        del_key(KC_NUMLOCK);
    25fa:	83 e5       	ldi	r24, 0x53	; 83
    25fc:	e6 cf       	rjmp	.-52     	; 0x25ca <unregister_code+0x30>
    }

    else if (KC_LOCKING_SCROLL == code) {
    25fe:	84 38       	cpi	r24, 0x84	; 132
    2600:	a1 f4       	brne	.+40     	; 0x262a <unregister_code+0x90>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2602:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <host_keyboard_leds>
    2606:	82 ff       	sbrs	r24, 2
    2608:	31 c0       	rjmp	.+98     	; 0x266c <unregister_code+0xd2>
#endif
        add_key(KC_SCROLLLOCK);
    260a:	87 e4       	ldi	r24, 0x47	; 71
    260c:	0e 94 a7 1b 	call	0x374e	; 0x374e <add_key>
        send_keyboard_report();
    2610:	0e 94 83 1c 	call	0x3906	; 0x3906 <send_keyboard_report>
    2614:	2f ef       	ldi	r18, 0xFF	; 255
    2616:	81 ee       	ldi	r24, 0xE1	; 225
    2618:	94 e0       	ldi	r25, 0x04	; 4
    261a:	21 50       	subi	r18, 0x01	; 1
    261c:	80 40       	sbci	r24, 0x00	; 0
    261e:	90 40       	sbci	r25, 0x00	; 0
    2620:	e1 f7       	brne	.-8      	; 0x261a <unregister_code+0x80>
    2622:	00 c0       	rjmp	.+0      	; 0x2624 <unregister_code+0x8a>
    2624:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    2626:	87 e4       	ldi	r24, 0x47	; 71
    2628:	d0 cf       	rjmp	.-96     	; 0x25ca <unregister_code+0x30>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    262a:	9c ef       	ldi	r25, 0xFC	; 252
    262c:	98 0f       	add	r25, r24
    262e:	91 3a       	cpi	r25, 0xA1	; 161
    2630:	60 f2       	brcs	.-104    	; 0x25ca <unregister_code+0x30>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2632:	90 e2       	ldi	r25, 0x20	; 32
    2634:	98 0f       	add	r25, r24
    2636:	98 30       	cpi	r25, 0x08	; 8
    2638:	50 f4       	brcc	.+20     	; 0x264e <unregister_code+0xb4>
        del_mods(MOD_BIT(code));
    263a:	87 70       	andi	r24, 0x07	; 7
    263c:	91 e0       	ldi	r25, 0x01	; 1
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <unregister_code+0xa8>
    2640:	99 0f       	add	r25, r25
    2642:	8a 95       	dec	r24
    2644:	ea f7       	brpl	.-6      	; 0x2640 <unregister_code+0xa6>
    2646:	89 2f       	mov	r24, r25
    2648:	0e 94 4e 1c 	call	0x389c	; 0x389c <del_mods>
    264c:	c0 cf       	rjmp	.-128    	; 0x25ce <unregister_code+0x34>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    264e:	9b e5       	ldi	r25, 0x5B	; 91
    2650:	98 0f       	add	r25, r24
    2652:	93 30       	cpi	r25, 0x03	; 3
    2654:	20 f4       	brcc	.+8      	; 0x265e <unregister_code+0xc4>
        host_system_send(0);
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0c 94 1f 10 	jmp	0x203e	; 0x203e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    265e:	88 5a       	subi	r24, 0xA8	; 168
    2660:	85 31       	cpi	r24, 0x15	; 21
    2662:	20 f4       	brcc	.+8      	; 0x266c <unregister_code+0xd2>
        host_consumer_send(0);
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <host_consumer_send>
    266c:	08 95       	ret

0000266e <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    266e:	88 23       	and	r24, r24
    2670:	21 f0       	breq	.+8      	; 0x267a <register_mods+0xc>
        add_mods(mods);
    2672:	0e 94 48 1c 	call	0x3890	; 0x3890 <add_mods>
        send_keyboard_report();
    2676:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <send_keyboard_report>
    267a:	08 95       	ret

0000267c <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    267c:	88 23       	and	r24, r24
    267e:	21 f0       	breq	.+8      	; 0x2688 <unregister_mods+0xc>
        del_mods(mods);
    2680:	0e 94 4e 1c 	call	0x389c	; 0x389c <del_mods>
        send_keyboard_report();
    2684:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <send_keyboard_report>
    2688:	08 95       	ret

0000268a <process_action>:
{
    268a:	cf 92       	push	r12
    268c:	df 92       	push	r13
    268e:	ef 92       	push	r14
    2690:	ff 92       	push	r15
    2692:	0f 93       	push	r16
    2694:	1f 93       	push	r17
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	00 d0       	rcall	.+0      	; 0x269c <process_action+0x12>
    269c:	00 d0       	rcall	.+0      	; 0x269e <process_action+0x14>
    269e:	1f 92       	push	r1
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	6c 01       	movw	r12, r24
    keyevent_t event = record->event;
    26a6:	85 e0       	ldi	r24, 0x05	; 5
    26a8:	f6 01       	movw	r30, r12
    26aa:	de 01       	movw	r26, r28
    26ac:	11 96       	adiw	r26, 0x01	; 1
    26ae:	01 90       	ld	r0, Z+
    26b0:	0d 92       	st	X+, r0
    26b2:	8a 95       	dec	r24
    26b4:	e1 f7       	brne	.-8      	; 0x26ae <process_action+0x24>
    26b6:	f6 01       	movw	r30, r12
    26b8:	20 81       	ld	r18, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	43 81       	ldd	r20, Z+3	; 0x03
    26be:	54 81       	ldd	r21, Z+4	; 0x04
    26c0:	45 2b       	or	r20, r21
    26c2:	39 f0       	breq	.+14     	; 0x26d2 <process_action+0x48>
    26c4:	9f 3f       	cpi	r25, 0xFF	; 255
    26c6:	19 f4       	brne	.+6      	; 0x26ce <process_action+0x44>
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	2f 3f       	cpi	r18, 0xFF	; 255
    26cc:	19 f0       	breq	.+6      	; 0x26d4 <process_action+0x4a>
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <process_action+0x4a>
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    if (IS_NOEVENT(event)) { return; }
    26d4:	80 fd       	sbrc	r24, 0
    26d6:	b9 c0       	rjmp	.+370    	; 0x284a <process_action+0x1c0>
    keyevent_t event = record->event;
    26d8:	f6 01       	movw	r30, r12
    26da:	f2 80       	ldd	r15, Z+2	; 0x02
    uint8_t tap_count = record->tap.count;
    26dc:	e5 80       	ldd	r14, Z+5	; 0x05
    26de:	e2 94       	swap	r14
    26e0:	8f e0       	ldi	r24, 0x0F	; 15
    26e2:	e8 22       	and	r14, r24
    action_t action = layer_switch_get_action(event.key);
    26e4:	29 83       	std	Y+1, r18	; 0x01
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	0e 94 65 1b 	call	0x36ca	; 0x36ca <layer_switch_get_action>
    26f0:	8c 01       	movw	r16, r24
    dprint(" layer_state: "); layer_debug();
    26f2:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    26f6:	0e 94 76 1a 	call	0x34ec	; 0x34ec <default_layer_debug>
    switch (action.kind.id) {
    26fa:	e1 2f       	mov	r30, r17
    26fc:	e2 95       	swap	r30
    26fe:	ef 70       	andi	r30, 0x0F	; 15
    2700:	8e 2f       	mov	r24, r30
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	fc 01       	movw	r30, r24
    2706:	e9 57       	subi	r30, 0x79	; 121
    2708:	fc 4e       	sbci	r31, 0xEC	; 236
    270a:	0c 94 ea 29 	jmp	0x53d4	; 0x53d4 <__tablejump2__>
    270e:	97 13       	cpse	r25, r23
    2710:	97 13       	cpse	r25, r23
    2712:	cf 13       	cpse	r28, r31
    2714:	cf 13       	cpse	r28, r31
    2716:	54 14       	cp	r5, r4
    2718:	87 14       	cp	r8, r7
    271a:	25 14       	cp	r2, r5
    271c:	25 14       	cp	r2, r5
    271e:	9e 14       	cp	r9, r14
    2720:	25 14       	cp	r2, r5
    2722:	82 15       	cp	r24, r2
    2724:	82 15       	cp	r24, r2
    2726:	1d 16       	cp	r1, r29
    2728:	25 14       	cp	r2, r5
    272a:	25 14       	cp	r2, r5
    272c:	32 16       	cp	r3, r18
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    272e:	81 2f       	mov	r24, r17
    2730:	80 7f       	andi	r24, 0xF0	; 240
    2732:	1f 70       	andi	r17, 0x0F	; 15
    2734:	88 23       	and	r24, r24
    2736:	11 f0       	breq	.+4      	; 0x273c <process_action+0xb2>
    2738:	12 95       	swap	r17
    273a:	10 7f       	andi	r17, 0xF0	; 240
                if (event.pressed) {
    273c:	ff 20       	and	r15, r15
    273e:	b9 f0       	breq	.+46     	; 0x276e <process_action+0xe4>
                    if (mods) {
    2740:	11 23       	and	r17, r17
    2742:	29 f0       	breq	.+10     	; 0x274e <process_action+0xc4>
                        add_weak_mods(mods);
    2744:	81 2f       	mov	r24, r17
    2746:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <add_weak_mods>
                        send_keyboard_report();
    274a:	0e 94 83 1c 	call	0x3906	; 0x3906 <send_keyboard_report>
                            register_code(action.layer_tap.code);
    274e:	80 2f       	mov	r24, r16
}
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	ff 90       	pop	r15
    2764:	ef 90       	pop	r14
    2766:	df 90       	pop	r13
    2768:	cf 90       	pop	r12
                            register_code(action.layer_tap.code);
    276a:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <register_code>
                    unregister_code(action.key.code);
    276e:	80 2f       	mov	r24, r16
    2770:	0e 94 cd 12 	call	0x259a	; 0x259a <unregister_code>
                    if (mods) {
    2774:	11 23       	and	r17, r17
    2776:	09 f4       	brne	.+2      	; 0x277a <process_action+0xf0>
    2778:	68 c0       	rjmp	.+208    	; 0x284a <process_action+0x1c0>
                        del_weak_mods(mods);
    277a:	81 2f       	mov	r24, r17
    277c:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <del_weak_mods>
}
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	ff 90       	pop	r15
    2794:	ef 90       	pop	r14
    2796:	df 90       	pop	r13
    2798:	cf 90       	pop	r12
                        send_keyboard_report();
    279a:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <send_keyboard_report>
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    279e:	81 2f       	mov	r24, r17
    27a0:	80 7f       	andi	r24, 0xF0	; 240
    27a2:	1f 70       	andi	r17, 0x0F	; 15
    27a4:	80 32       	cpi	r24, 0x20	; 32
    27a6:	11 f0       	breq	.+4      	; 0x27ac <process_action+0x122>
    27a8:	12 95       	swap	r17
    27aa:	10 7f       	andi	r17, 0xF0	; 240
                switch (action.key.code) {
    27ac:	00 23       	and	r16, r16
    27ae:	79 f0       	breq	.+30     	; 0x27ce <process_action+0x144>
    27b0:	01 30       	cpi	r16, 0x01	; 1
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <process_action+0x12c>
    27b4:	58 c0       	rjmp	.+176    	; 0x2866 <process_action+0x1dc>
                        if (event.pressed) {
    27b6:	ff 20       	and	r15, r15
    27b8:	09 f4       	brne	.+2      	; 0x27bc <process_action+0x132>
    27ba:	64 c0       	rjmp	.+200    	; 0x2884 <process_action+0x1fa>
                            if (tap_count > 0) {
    27bc:	ee 20       	and	r14, r14
    27be:	59 f0       	breq	.+22     	; 0x27d6 <process_action+0x14c>
                                if (record->tap.interrupted) {
    27c0:	f6 01       	movw	r30, r12
    27c2:	85 81       	ldd	r24, Z+5	; 0x05
    27c4:	80 ff       	sbrs	r24, 0
    27c6:	c3 cf       	rjmp	.-122    	; 0x274e <process_action+0xc4>
                                    record->tap.count = 0;
    27c8:	8f 70       	andi	r24, 0x0F	; 15
    27ca:	85 83       	std	Z+5, r24	; 0x05
    27cc:	04 c0       	rjmp	.+8      	; 0x27d6 <process_action+0x14c>
                        if (event.pressed) {
    27ce:	ff 20       	and	r15, r15
    27d0:	29 f1       	breq	.+74     	; 0x281c <process_action+0x192>
                            if (tap_count == 0) {
    27d2:	e1 10       	cpse	r14, r1
    27d4:	10 c0       	rjmp	.+32     	; 0x27f6 <process_action+0x16c>
                                    register_mods(mods);
    27d6:	81 2f       	mov	r24, r17
}
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	df 91       	pop	r29
    27e4:	cf 91       	pop	r28
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
    27ea:	ff 90       	pop	r15
    27ec:	ef 90       	pop	r14
    27ee:	df 90       	pop	r13
    27f0:	cf 90       	pop	r12
                                    register_mods(mods);
    27f2:	0c 94 37 13 	jmp	0x266e	; 0x266e <register_mods>
                            else if (tap_count == 1) {
    27f6:	f1 e0       	ldi	r31, 0x01	; 1
                                set_oneshot_mods(mods);
    27f8:	81 2f       	mov	r24, r17
                            else if (tap_count == 1) {
    27fa:	ef 12       	cpse	r14, r31
    27fc:	ed cf       	rjmp	.-38     	; 0x27d8 <process_action+0x14e>
}
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	ff 90       	pop	r15
    2812:	ef 90       	pop	r14
    2814:	df 90       	pop	r13
    2816:	cf 90       	pop	r12
                                set_oneshot_mods(mods);
    2818:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <set_oneshot_mods>
                            if (tap_count == 0) {
    281c:	e1 10       	cpse	r14, r1
    281e:	12 c0       	rjmp	.+36     	; 0x2844 <process_action+0x1ba>
                                clear_oneshot_mods();
    2820:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <clear_oneshot_mods>
                                unregister_mods(mods);
    2824:	81 2f       	mov	r24, r17
}
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	1f 91       	pop	r17
    2836:	0f 91       	pop	r16
    2838:	ff 90       	pop	r15
    283a:	ef 90       	pop	r14
    283c:	df 90       	pop	r13
    283e:	cf 90       	pop	r12
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2840:	0c 94 3e 13 	jmp	0x267c	; 0x267c <unregister_mods>
                            else if (tap_count == 1) {
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	e8 12       	cpse	r14, r24
    2848:	eb cf       	rjmp	.-42     	; 0x2820 <process_action+0x196>
}
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	ff 90       	pop	r15
    285e:	ef 90       	pop	r14
    2860:	df 90       	pop	r13
    2862:	cf 90       	pop	r12
    2864:	08 95       	ret
                        if (event.pressed) {
    2866:	ff 20       	and	r15, r15
    2868:	49 f0       	breq	.+18     	; 0x287c <process_action+0x1f2>
                            if (tap_count <= TAPPING_TOGGLE) {
    286a:	e5 e0       	ldi	r30, 0x05	; 5
    286c:	ee 15       	cp	r30, r14
    286e:	68 f3       	brcs	.-38     	; 0x284a <process_action+0x1c0>
                                if (mods & get_mods()) {
    2870:	0e 94 45 1c 	call	0x388a	; 0x388a <get_mods>
    2874:	81 23       	and	r24, r17
    2876:	09 f4       	brne	.+2      	; 0x287a <process_action+0x1f0>
    2878:	ae cf       	rjmp	.-164    	; 0x27d6 <process_action+0x14c>
    287a:	d4 cf       	rjmp	.-88     	; 0x2824 <process_action+0x19a>
                            if (tap_count < TAPPING_TOGGLE) {
    287c:	f4 e0       	ldi	r31, 0x04	; 4
    287e:	fe 15       	cp	r31, r14
    2880:	20 f3       	brcs	.-56     	; 0x284a <process_action+0x1c0>
    2882:	d0 cf       	rjmp	.-96     	; 0x2824 <process_action+0x19a>
                            if (tap_count > 0) {
    2884:	ee 20       	and	r14, r14
    2886:	71 f2       	breq	.-100    	; 0x2824 <process_action+0x19a>
                            unregister_code(action.layer_tap.code);
    2888:	80 2f       	mov	r24, r16
}
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	ff 90       	pop	r15
    289e:	ef 90       	pop	r14
    28a0:	df 90       	pop	r13
    28a2:	cf 90       	pop	r12
                            unregister_code(action.layer_tap.code);
    28a4:	0c 94 cd 12 	jmp	0x259a	; 0x259a <unregister_code>
            switch (action.usage.page) {
    28a8:	81 2f       	mov	r24, r17
    28aa:	86 95       	lsr	r24
    28ac:	86 95       	lsr	r24
    28ae:	83 70       	andi	r24, 0x03	; 3
    28b0:	a9 f0       	breq	.+42     	; 0x28dc <process_action+0x252>
    28b2:	81 30       	cpi	r24, 0x01	; 1
    28b4:	51 f6       	brne	.-108    	; 0x284a <process_action+0x1c0>
                    if (event.pressed) {
    28b6:	ff 20       	and	r15, r15
    28b8:	39 f1       	breq	.+78     	; 0x2908 <process_action+0x27e>
                        host_consumer_send(action.usage.code);
    28ba:	c8 01       	movw	r24, r16
    28bc:	93 70       	andi	r25, 0x03	; 3
}
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	df 91       	pop	r29
    28ca:	cf 91       	pop	r28
    28cc:	1f 91       	pop	r17
    28ce:	0f 91       	pop	r16
    28d0:	ff 90       	pop	r15
    28d2:	ef 90       	pop	r14
    28d4:	df 90       	pop	r13
    28d6:	cf 90       	pop	r12
                        host_consumer_send(0);
    28d8:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <host_consumer_send>
                    if (event.pressed) {
    28dc:	ff 20       	and	r15, r15
    28de:	89 f0       	breq	.+34     	; 0x2902 <process_action+0x278>
                        host_system_send(action.usage.code);
    28e0:	c8 01       	movw	r24, r16
    28e2:	93 70       	andi	r25, 0x03	; 3
}
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	1f 91       	pop	r17
    28f4:	0f 91       	pop	r16
    28f6:	ff 90       	pop	r15
    28f8:	ef 90       	pop	r14
    28fa:	df 90       	pop	r13
    28fc:	cf 90       	pop	r12
                        host_system_send(0);
    28fe:	0c 94 1f 10 	jmp	0x203e	; 0x203e <host_system_send>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	ee cf       	rjmp	.-36     	; 0x28e4 <process_action+0x25a>
                        host_consumer_send(0);
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	d8 cf       	rjmp	.-80     	; 0x28be <process_action+0x234>
                mousekey_on(action.key.code);
    290e:	80 2f       	mov	r24, r16
            if (event.pressed) {
    2910:	ff 20       	and	r15, r15
    2912:	89 f0       	breq	.+34     	; 0x2936 <process_action+0x2ac>
                mousekey_on(action.key.code);
    2914:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <mousekey_on>
}
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	df 91       	pop	r29
    2924:	cf 91       	pop	r28
    2926:	1f 91       	pop	r17
    2928:	0f 91       	pop	r16
    292a:	ff 90       	pop	r15
    292c:	ef 90       	pop	r14
    292e:	df 90       	pop	r13
    2930:	cf 90       	pop	r12
                mousekey_send();
    2932:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <mousekey_send>
                mousekey_off(action.key.code);
    2936:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <mousekey_off>
    293a:	ee cf       	rjmp	.-36     	; 0x2918 <process_action+0x28e>
            if (action.layer_bitop.on == 0) {
    293c:	81 2f       	mov	r24, r17
    293e:	83 70       	andi	r24, 0x03	; 3
    2940:	09 f0       	breq	.+2      	; 0x2944 <process_action+0x2ba>
    2942:	6c c0       	rjmp	.+216    	; 0x2a1c <process_action+0x392>
                if (!event.pressed) {
    2944:	f1 10       	cpse	r15, r1
    2946:	81 cf       	rjmp	.-254    	; 0x284a <process_action+0x1c0>
                    uint8_t shift = action.layer_bitop.part*4;
    2948:	20 2f       	mov	r18, r16
    294a:	22 95       	swap	r18
    294c:	26 95       	lsr	r18
    294e:	27 70       	andi	r18, 0x07	; 7
    2950:	22 0f       	add	r18, r18
    2952:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2954:	60 2f       	mov	r22, r16
    2956:	6f 70       	andi	r22, 0x0F	; 15
    2958:	c6 2e       	mov	r12, r22
    295a:	d1 2c       	mov	r13, r1
    295c:	e1 2c       	mov	r14, r1
    295e:	f1 2c       	mov	r15, r1
    2960:	02 2e       	mov	r0, r18
    2962:	04 c0       	rjmp	.+8      	; 0x296c <process_action+0x2e2>
    2964:	cc 0c       	add	r12, r12
    2966:	dd 1c       	adc	r13, r13
    2968:	ee 1c       	adc	r14, r14
    296a:	ff 1c       	adc	r15, r15
    296c:	0a 94       	dec	r0
    296e:	d2 f7       	brpl	.-12     	; 0x2964 <process_action+0x2da>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2970:	04 ff       	sbrs	r16, 4
    2972:	2a c0       	rjmp	.+84     	; 0x29c8 <process_action+0x33e>
    2974:	6f e0       	ldi	r22, 0x0F	; 15
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	04 c0       	rjmp	.+8      	; 0x2986 <process_action+0x2fc>
    297e:	66 0f       	add	r22, r22
    2980:	77 1f       	adc	r23, r23
    2982:	88 1f       	adc	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	2a 95       	dec	r18
    2988:	d2 f7       	brpl	.-12     	; 0x297e <process_action+0x2f4>
    298a:	60 95       	com	r22
    298c:	70 95       	com	r23
    298e:	80 95       	com	r24
    2990:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2992:	16 95       	lsr	r17
    2994:	16 95       	lsr	r17
    2996:	13 70       	andi	r17, 0x03	; 3
    2998:	12 30       	cpi	r17, 0x02	; 2
    299a:	d1 f0       	breq	.+52     	; 0x29d0 <process_action+0x346>
    299c:	60 f5       	brcc	.+88     	; 0x29f6 <process_action+0x36c>
    299e:	6c 29       	or	r22, r12
    29a0:	7d 29       	or	r23, r13
    29a2:	8e 29       	or	r24, r14
    29a4:	9f 29       	or	r25, r15
    29a6:	11 30       	cpi	r17, 0x01	; 1
    29a8:	51 f1       	breq	.+84     	; 0x29fe <process_action+0x374>
}
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	ff 90       	pop	r15
    29be:	ef 90       	pop	r14
    29c0:	df 90       	pop	r13
    29c2:	cf 90       	pop	r12
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    29c4:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <default_layer_and>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	70 e0       	ldi	r23, 0x00	; 0
    29cc:	cb 01       	movw	r24, r22
    29ce:	e1 cf       	rjmp	.-62     	; 0x2992 <process_action+0x308>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    29d0:	6c 29       	or	r22, r12
    29d2:	7d 29       	or	r23, r13
    29d4:	8e 29       	or	r24, r14
    29d6:	9f 29       	or	r25, r15
}
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	1f 91       	pop	r17
    29e8:	0f 91       	pop	r16
    29ea:	ff 90       	pop	r15
    29ec:	ef 90       	pop	r14
    29ee:	df 90       	pop	r13
    29f0:	cf 90       	pop	r12
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    29f2:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    29f6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <default_layer_and>
    29fa:	c7 01       	movw	r24, r14
    29fc:	b6 01       	movw	r22, r12
}
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	df 90       	pop	r13
    2a16:	cf 90       	pop	r12
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a18:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <default_layer_or>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2a1c:	ff 20       	and	r15, r15
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <process_action+0x398>
    2a20:	45 c0       	rjmp	.+138    	; 0x2aac <process_action+0x422>
    2a22:	81 2f       	mov	r24, r17
    2a24:	81 70       	andi	r24, 0x01	; 1
    2a26:	88 23       	and	r24, r24
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <process_action+0x3a2>
    2a2a:	0f cf       	rjmp	.-482    	; 0x284a <process_action+0x1c0>
                    uint8_t shift = action.layer_bitop.part*4;
    2a2c:	20 2f       	mov	r18, r16
    2a2e:	22 95       	swap	r18
    2a30:	26 95       	lsr	r18
    2a32:	27 70       	andi	r18, 0x07	; 7
    2a34:	22 0f       	add	r18, r18
    2a36:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2a38:	60 2f       	mov	r22, r16
    2a3a:	6f 70       	andi	r22, 0x0F	; 15
    2a3c:	c6 2e       	mov	r12, r22
    2a3e:	d1 2c       	mov	r13, r1
    2a40:	e1 2c       	mov	r14, r1
    2a42:	f1 2c       	mov	r15, r1
    2a44:	02 2e       	mov	r0, r18
    2a46:	04 c0       	rjmp	.+8      	; 0x2a50 <process_action+0x3c6>
    2a48:	cc 0c       	add	r12, r12
    2a4a:	dd 1c       	adc	r13, r13
    2a4c:	ee 1c       	adc	r14, r14
    2a4e:	ff 1c       	adc	r15, r15
    2a50:	0a 94       	dec	r0
    2a52:	d2 f7       	brpl	.-12     	; 0x2a48 <process_action+0x3be>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2a54:	04 ff       	sbrs	r16, 4
    2a56:	2c c0       	rjmp	.+88     	; 0x2ab0 <process_action+0x426>
    2a58:	6f e0       	ldi	r22, 0x0F	; 15
    2a5a:	70 e0       	ldi	r23, 0x00	; 0
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	04 c0       	rjmp	.+8      	; 0x2a6a <process_action+0x3e0>
    2a62:	66 0f       	add	r22, r22
    2a64:	77 1f       	adc	r23, r23
    2a66:	88 1f       	adc	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	2a 95       	dec	r18
    2a6c:	d2 f7       	brpl	.-12     	; 0x2a62 <process_action+0x3d8>
    2a6e:	60 95       	com	r22
    2a70:	70 95       	com	r23
    2a72:	80 95       	com	r24
    2a74:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2a76:	16 95       	lsr	r17
    2a78:	16 95       	lsr	r17
    2a7a:	13 70       	andi	r17, 0x03	; 3
    2a7c:	12 30       	cpi	r17, 0x02	; 2
    2a7e:	e1 f0       	breq	.+56     	; 0x2ab8 <process_action+0x42e>
    2a80:	70 f5       	brcc	.+92     	; 0x2ade <process_action+0x454>
    2a82:	6c 29       	or	r22, r12
    2a84:	7d 29       	or	r23, r13
    2a86:	8e 29       	or	r24, r14
    2a88:	9f 29       	or	r25, r15
    2a8a:	11 30       	cpi	r17, 0x01	; 1
    2a8c:	61 f1       	breq	.+88     	; 0x2ae6 <process_action+0x45c>
}
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	df 90       	pop	r13
    2aa6:	cf 90       	pop	r12
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2aa8:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <layer_and>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2aac:	86 95       	lsr	r24
    2aae:	bb cf       	rjmp	.-138    	; 0x2a26 <process_action+0x39c>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2ab0:	60 e0       	ldi	r22, 0x00	; 0
    2ab2:	70 e0       	ldi	r23, 0x00	; 0
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	df cf       	rjmp	.-66     	; 0x2a76 <process_action+0x3ec>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2ab8:	6c 29       	or	r22, r12
    2aba:	7d 29       	or	r23, r13
    2abc:	8e 29       	or	r24, r14
    2abe:	9f 29       	or	r25, r15
}
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	df 90       	pop	r13
    2ad8:	cf 90       	pop	r12
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2ada:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2ade:	0e 94 40 1b 	call	0x3680	; 0x3680 <layer_and>
    2ae2:	c7 01       	movw	r24, r14
    2ae4:	b6 01       	movw	r22, r12
}
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	df 91       	pop	r29
    2af2:	cf 91       	pop	r28
    2af4:	1f 91       	pop	r17
    2af6:	0f 91       	pop	r16
    2af8:	ff 90       	pop	r15
    2afa:	ef 90       	pop	r14
    2afc:	df 90       	pop	r13
    2afe:	cf 90       	pop	r12
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b00:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <layer_or>
            switch (action.layer_tap.code) {
    2b04:	00 3f       	cpi	r16, 0xF0	; 240
    2b06:	09 f4       	brne	.+2      	; 0x2b0a <process_action+0x480>
    2b08:	44 c0       	rjmp	.+136    	; 0x2b92 <process_action+0x508>
    2b0a:	58 f4       	brcc	.+22     	; 0x2b22 <process_action+0x498>
    2b0c:	80 e4       	ldi	r24, 0x40	; 64
    2b0e:	80 0f       	add	r24, r16
    2b10:	80 32       	cpi	r24, 0x20	; 32
    2b12:	10 f1       	brcs	.+68     	; 0x2b58 <process_action+0x4ce>
                    if (event.pressed) {
    2b14:	ff 20       	and	r15, r15
    2b16:	09 f4       	brne	.+2      	; 0x2b1a <process_action+0x490>
    2b18:	8d c0       	rjmp	.+282    	; 0x2c34 <process_action+0x5aa>
                        if (tap_count > 0) {
    2b1a:	ee 20       	and	r14, r14
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <process_action+0x496>
    2b1e:	57 c0       	rjmp	.+174    	; 0x2bce <process_action+0x544>
    2b20:	16 ce       	rjmp	.-980    	; 0x274e <process_action+0xc4>
            switch (action.layer_tap.code) {
    2b22:	02 3f       	cpi	r16, 0xF2	; 242
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <process_action+0x49e>
    2b26:	64 c0       	rjmp	.+200    	; 0x2bf0 <process_action+0x566>
    2b28:	08 f4       	brcc	.+2      	; 0x2b2c <process_action+0x4a2>
    2b2a:	4f c0       	rjmp	.+158    	; 0x2bca <process_action+0x540>
    2b2c:	03 3f       	cpi	r16, 0xF3	; 243
    2b2e:	91 f7       	brne	.-28     	; 0x2b14 <process_action+0x48a>
                    event.pressed ? layer_move(action.layer_tap.val) :
    2b30:	ff 20       	and	r15, r15
    2b32:	09 f4       	brne	.+2      	; 0x2b36 <process_action+0x4ac>
    2b34:	70 c0       	rjmp	.+224    	; 0x2c16 <process_action+0x58c>
    2b36:	81 2f       	mov	r24, r17
    2b38:	8f 71       	andi	r24, 0x1F	; 31
}
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	ff 90       	pop	r15
    2b4e:	ef 90       	pop	r14
    2b50:	df 90       	pop	r13
    2b52:	cf 90       	pop	r12
                    event.pressed ? layer_move(action.layer_tap.val) :
    2b54:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <layer_move>
    2b58:	f0 2f       	mov	r31, r16
    2b5a:	f0 71       	andi	r31, 0x10	; 16
    2b5c:	ef 2e       	mov	r14, r31
    2b5e:	81 2f       	mov	r24, r17
    2b60:	8f 71       	andi	r24, 0x1F	; 31
                    if (event.pressed) {
    2b62:	ff 20       	and	r15, r15
    2b64:	59 f0       	breq	.+22     	; 0x2b7c <process_action+0x4f2>
                        layer_on(action.layer_tap.val);
    2b66:	0e 94 c9 1a 	call	0x3592	; 0x3592 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    2b6a:	ee 20       	and	r14, r14
    2b6c:	21 f0       	breq	.+8      	; 0x2b76 <process_action+0x4ec>
    2b6e:	80 2f       	mov	r24, r16
    2b70:	82 95       	swap	r24
    2b72:	80 7f       	andi	r24, 0xF0	; 240
    2b74:	31 ce       	rjmp	.-926    	; 0x27d8 <process_action+0x14e>
    2b76:	80 2f       	mov	r24, r16
    2b78:	8f 70       	andi	r24, 0x0F	; 15
    2b7a:	2e ce       	rjmp	.-932    	; 0x27d8 <process_action+0x14e>
                        layer_off(action.layer_tap.val);
    2b7c:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2b80:	ee 20       	and	r14, r14
    2b82:	21 f0       	breq	.+8      	; 0x2b8c <process_action+0x502>
    2b84:	80 2f       	mov	r24, r16
    2b86:	82 95       	swap	r24
    2b88:	80 7f       	andi	r24, 0xF0	; 240
    2b8a:	4d ce       	rjmp	.-870    	; 0x2826 <process_action+0x19c>
    2b8c:	80 2f       	mov	r24, r16
    2b8e:	8f 70       	andi	r24, 0x0F	; 15
    2b90:	4a ce       	rjmp	.-876    	; 0x2826 <process_action+0x19c>
                    if (event.pressed) {
    2b92:	ff 20       	and	r15, r15
    2b94:	a9 f0       	breq	.+42     	; 0x2bc0 <process_action+0x536>
                        if (tap_count < TAPPING_TOGGLE) {
    2b96:	84 e0       	ldi	r24, 0x04	; 4
    2b98:	8e 15       	cp	r24, r14
    2b9a:	08 f4       	brcc	.+2      	; 0x2b9e <process_action+0x514>
    2b9c:	56 ce       	rjmp	.-852    	; 0x284a <process_action+0x1c0>
                            layer_invert(action.layer_tap.val);
    2b9e:	81 2f       	mov	r24, r17
    2ba0:	8f 71       	andi	r24, 0x1F	; 31
}
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	0f 90       	pop	r0
    2bac:	df 91       	pop	r29
    2bae:	cf 91       	pop	r28
    2bb0:	1f 91       	pop	r17
    2bb2:	0f 91       	pop	r16
    2bb4:	ff 90       	pop	r15
    2bb6:	ef 90       	pop	r14
    2bb8:	df 90       	pop	r13
    2bba:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
    2bbc:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <layer_invert>
                        if (tap_count <= TAPPING_TOGGLE) {
    2bc0:	e5 e0       	ldi	r30, 0x05	; 5
    2bc2:	ee 15       	cp	r30, r14
    2bc4:	08 f4       	brcc	.+2      	; 0x2bc8 <process_action+0x53e>
    2bc6:	41 ce       	rjmp	.-894    	; 0x284a <process_action+0x1c0>
    2bc8:	ea cf       	rjmp	.-44     	; 0x2b9e <process_action+0x514>
                    event.pressed ? layer_on(action.layer_tap.val) :
    2bca:	ff 20       	and	r15, r15
    2bcc:	99 f0       	breq	.+38     	; 0x2bf4 <process_action+0x56a>
    2bce:	81 2f       	mov	r24, r17
    2bd0:	8f 71       	andi	r24, 0x1F	; 31
}
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	1f 91       	pop	r17
    2be2:	0f 91       	pop	r16
    2be4:	ff 90       	pop	r15
    2be6:	ef 90       	pop	r14
    2be8:	df 90       	pop	r13
    2bea:	cf 90       	pop	r12
                    event.pressed ? layer_on(action.layer_tap.val) :
    2bec:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <layer_on>
                    event.pressed ? layer_off(action.layer_tap.val) :
    2bf0:	ff 20       	and	r15, r15
    2bf2:	69 f3       	breq	.-38     	; 0x2bce <process_action+0x544>
                                    layer_off(action.layer_tap.val);
    2bf4:	81 2f       	mov	r24, r17
    2bf6:	8f 71       	andi	r24, 0x1F	; 31
}
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	1f 91       	pop	r17
    2c08:	0f 91       	pop	r16
    2c0a:	ff 90       	pop	r15
    2c0c:	ef 90       	pop	r14
    2c0e:	df 90       	pop	r13
    2c10:	cf 90       	pop	r12
                                    layer_off(action.layer_tap.val);
    2c12:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <layer_off>
}
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	1f 91       	pop	r17
    2c26:	0f 91       	pop	r16
    2c28:	ff 90       	pop	r15
    2c2a:	ef 90       	pop	r14
    2c2c:	df 90       	pop	r13
    2c2e:	cf 90       	pop	r12
                                    layer_clear();
    2c30:	0c 94 af 1a 	jmp	0x355e	; 0x355e <layer_clear>
                        if (tap_count > 0) {
    2c34:	ee 20       	and	r14, r14
    2c36:	f1 f2       	breq	.-68     	; 0x2bf4 <process_action+0x56a>
    2c38:	27 ce       	rjmp	.-946    	; 0x2888 <process_action+0x1fe>
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2c3a:	41 2f       	mov	r20, r17
    2c3c:	4f 70       	andi	r20, 0x0F	; 15
    2c3e:	60 2f       	mov	r22, r16
    2c40:	c6 01       	movw	r24, r12
    2c42:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <action_get_macro>
}
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	ef 90       	pop	r14
    2c5c:	df 90       	pop	r13
    2c5e:	cf 90       	pop	r12
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2c60:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <action_macro_play>
            action_function(record, action.func.id, action.func.opt);
    2c64:	41 2f       	mov	r20, r17
    2c66:	4f 70       	andi	r20, 0x0F	; 15
    2c68:	60 2f       	mov	r22, r16
    2c6a:	c6 01       	movw	r24, r12
}
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	df 91       	pop	r29
    2c78:	cf 91       	pop	r28
    2c7a:	1f 91       	pop	r17
    2c7c:	0f 91       	pop	r16
    2c7e:	ff 90       	pop	r15
    2c80:	ef 90       	pop	r14
    2c82:	df 90       	pop	r13
    2c84:	cf 90       	pop	r12
            action_function(record, action.func.id, action.func.opt);
    2c86:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <action_function>

00002c8a <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2c8a:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <clear_weak_mods>
    clear_keys();
    2c8e:	0e 94 37 1c 	call	0x386e	; 0x386e <clear_keys>
    send_keyboard_report();
    2c92:	0e 94 83 1c 	call	0x3906	; 0x3906 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2c96:	0e 94 88 23 	call	0x4710	; 0x4710 <mousekey_clear>
    mousekey_send();
    2c9a:	0e 94 58 22 	call	0x44b0	; 0x44b0 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	0e 94 1f 10 	call	0x203e	; 0x203e <host_system_send>
    host_consumer_send(0);
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <host_consumer_send>

00002cae <clear_keyboard>:
    clear_mods();
    2cae:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <clear_mods>
    clear_keyboard_but_mods();
    2cb2:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <clear_keyboard_but_mods>

00002cb6 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2cb6:	0e 94 65 1b 	call	0x36ca	; 0x36ca <layer_switch_get_action>

    switch (action.kind.id) {
    2cba:	29 2f       	mov	r18, r25
    2cbc:	22 95       	swap	r18
    2cbe:	2f 70       	andi	r18, 0x0F	; 15
    2cc0:	2c 30       	cpi	r18, 0x0C	; 12
    2cc2:	38 f4       	brcc	.+14     	; 0x2cd2 <is_tap_key+0x1c>
    2cc4:	2a 30       	cpi	r18, 0x0A	; 10
    2cc6:	c8 f4       	brcc	.+50     	; 0x2cfa <is_tap_key+0x44>
    2cc8:	22 50       	subi	r18, 0x02	; 2
    2cca:	22 30       	cpi	r18, 0x02	; 2
    2ccc:	50 f0       	brcs	.+20     	; 0x2ce2 <is_tap_key+0x2c>
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0xc0 ... 0xdf:         // with modifiers
                    return false;
    2cce:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2cd0:	08 95       	ret
    switch (action.kind.id) {
    2cd2:	2c 30       	cpi	r18, 0x0C	; 12
    2cd4:	11 f0       	breq	.+4      	; 0x2cda <is_tap_key+0x24>
    2cd6:	2f 30       	cpi	r18, 0x0F	; 15
    2cd8:	d1 f7       	brne	.-12     	; 0x2cce <is_tap_key+0x18>
            if (action.func.opt & FUNC_TAP) { return true; }
    2cda:	93 fb       	bst	r25, 3
    2cdc:	88 27       	eor	r24, r24
    2cde:	80 f9       	bld	r24, 0
    2ce0:	08 95       	ret
            switch (action.key.code) {
    2ce2:	85 3a       	cpi	r24, 0xA5	; 165
    2ce4:	30 f4       	brcc	.+12     	; 0x2cf2 <is_tap_key+0x3c>
    2ce6:	84 30       	cpi	r24, 0x04	; 4
    2ce8:	10 f4       	brcc	.+4      	; 0x2cee <is_tap_key+0x38>
    2cea:	82 30       	cpi	r24, 0x02	; 2
    2cec:	30 f4       	brcc	.+12     	; 0x2cfa <is_tap_key+0x44>
                    return true;
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	08 95       	ret
            switch (action.key.code) {
    2cf2:	90 e2       	ldi	r25, 0x20	; 32
    2cf4:	98 0f       	add	r25, r24
    2cf6:	98 30       	cpi	r25, 0x08	; 8
    2cf8:	d0 f3       	brcs	.-12     	; 0x2cee <is_tap_key+0x38>
            switch (action.layer_tap.code) {
    2cfa:	88 3e       	cpi	r24, 0xE8	; 232
    2cfc:	30 f4       	brcc	.+12     	; 0x2d0a <is_tap_key+0x54>
    2cfe:	80 3e       	cpi	r24, 0xE0	; 224
    2d00:	b0 f7       	brcc	.-20     	; 0x2cee <is_tap_key+0x38>
    2d02:	84 50       	subi	r24, 0x04	; 4
    2d04:	81 3a       	cpi	r24, 0xA1	; 161
    2d06:	18 f7       	brcc	.-58     	; 0x2cce <is_tap_key+0x18>
    2d08:	f2 cf       	rjmp	.-28     	; 0x2cee <is_tap_key+0x38>
    2d0a:	80 3f       	cpi	r24, 0xF0	; 240
    2d0c:	01 f7       	brne	.-64     	; 0x2cce <is_tap_key+0x18>
    2d0e:	ef cf       	rjmp	.-34     	; 0x2cee <is_tap_key+0x38>

00002d10 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2d10:	cf 93       	push	r28
    2d12:	df 93       	push	r29
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <debug_event+0x6>
    2d16:	00 d0       	rcall	.+0      	; 0x2d18 <debug_event+0x8>
    2d18:	1f 92       	push	r1
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	df 91       	pop	r29
    2d2a:	cf 91       	pop	r28
    2d2c:	08 95       	ret

00002d2e <debug_record>:

void debug_record(keyrecord_t record)
{
    2d2e:	cf 93       	push	r28
    2d30:	df 93       	push	r29
    2d32:	00 d0       	rcall	.+0      	; 0x2d34 <debug_record+0x6>
    2d34:	00 d0       	rcall	.+0      	; 0x2d36 <debug_record+0x8>
    2d36:	00 d0       	rcall	.+0      	; 0x2d38 <debug_record+0xa>
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2d3c:	26 96       	adiw	r28, 0x06	; 6
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	08 95       	ret

00002d4e <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d54:	c0 91 87 01 	lds	r28, 0x0187	; 0x800187 <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d58:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d5a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <waiting_buffer_head>
    2d5e:	c8 13       	cpse	r28, r24
    2d60:	04 c0       	rjmp	.+8      	; 0x2d6a <debug_waiting_buffer+0x1c>
    }
    debug("}\n");
}
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	1f 91       	pop	r17
    2d68:	08 95       	ret
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d6a:	d0 e0       	ldi	r29, 0x00	; 0
    2d6c:	1c 9f       	mul	r17, r28
    2d6e:	f0 01       	movw	r30, r0
    2d70:	1d 9f       	mul	r17, r29
    2d72:	f0 0d       	add	r31, r0
    2d74:	11 24       	eor	r1, r1
    2d76:	e7 57       	subi	r30, 0x77	; 119
    2d78:	fe 4f       	sbci	r31, 0xFE	; 254
    2d7a:	40 81       	ld	r20, Z
    2d7c:	51 81       	ldd	r21, Z+1	; 0x01
    2d7e:	62 81       	ldd	r22, Z+2	; 0x02
    2d80:	73 81       	ldd	r23, Z+3	; 0x03
    2d82:	84 81       	ldd	r24, Z+4	; 0x04
    2d84:	95 81       	ldd	r25, Z+5	; 0x05
    2d86:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <debug_record>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d8a:	21 96       	adiw	r28, 0x01	; 1
    2d8c:	c7 70       	andi	r28, 0x07	; 7
    2d8e:	e5 cf       	rjmp	.-54     	; 0x2d5a <debug_waiting_buffer+0xc>

00002d90 <debug_tapping_key>:
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2d90:	40 91 b9 01 	lds	r20, 0x01B9	; 0x8001b9 <tapping_key>
    2d94:	50 91 ba 01 	lds	r21, 0x01BA	; 0x8001ba <tapping_key+0x1>
    2d98:	60 91 bb 01 	lds	r22, 0x01BB	; 0x8001bb <tapping_key+0x2>
    2d9c:	70 91 bc 01 	lds	r23, 0x01BC	; 0x8001bc <tapping_key+0x3>
    2da0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <tapping_key+0x4>
    2da4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <tapping_key+0x5>
    2da8:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <debug_record>

00002dac <waiting_buffer_scan_tap>:
{
    2dac:	1f 93       	push	r17
    2dae:	cf 93       	push	r28
    2db0:	df 93       	push	r29
    if (tapping_key.tap.count > 0) return;
    2db2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    2db6:	82 95       	swap	r24
    2db8:	8f 70       	andi	r24, 0x0F	; 15
    2dba:	d1 f4       	brne	.+52     	; 0x2df0 <waiting_buffer_scan_tap+0x44>
    if (!tapping_key.event.pressed) return;
    2dbc:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tapping_key+0x2>
    2dc0:	88 23       	and	r24, r24
    2dc2:	b1 f0       	breq	.+44     	; 0x2df0 <waiting_buffer_scan_tap+0x44>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dc4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <waiting_buffer_tail>
    2dc8:	d0 91 88 01 	lds	r29, 0x0188	; 0x800188 <waiting_buffer_head>
    2dcc:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <tapping_key>
    2dd0:	c0 91 ba 01 	lds	r28, 0x01BA	; 0x8001ba <tapping_key+0x1>
    2dd4:	40 91 bc 01 	lds	r20, 0x01BC	; 0x8001bc <tapping_key+0x3>
    2dd8:	50 91 bd 01 	lds	r21, 0x01BD	; 0x8001bd <tapping_key+0x4>
    2ddc:	a1 e0       	ldi	r26, 0x01	; 1
    2dde:	bf 3f       	cpi	r27, 0xFF	; 255
    2de0:	09 f0       	breq	.+2      	; 0x2de4 <waiting_buffer_scan_tap+0x38>
    2de2:	a0 e0       	ldi	r26, 0x00	; 0
    2de4:	ba 01       	movw	r22, r20
    2de6:	60 95       	com	r22
    2de8:	70 95       	com	r23
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2dea:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dec:	8d 13       	cpse	r24, r29
    2dee:	04 c0       	rjmp	.+8      	; 0x2df8 <waiting_buffer_scan_tap+0x4c>
}
    2df0:	df 91       	pop	r29
    2df2:	cf 91       	pop	r28
    2df4:	1f 91       	pop	r17
    2df6:	08 95       	ret
    2df8:	41 15       	cp	r20, r1
    2dfa:	51 05       	cpc	r21, r1
    2dfc:	d9 f1       	breq	.+118    	; 0x2e74 <waiting_buffer_scan_tap+0xc8>
    2dfe:	cf 3f       	cpi	r28, 0xFF	; 255
    2e00:	d9 f1       	breq	.+118    	; 0x2e78 <waiting_buffer_scan_tap+0xcc>
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	90 e0       	ldi	r25, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2e06:	20 fd       	sbrc	r18, 0
    2e08:	3c c0       	rjmp	.+120    	; 0x2e82 <waiting_buffer_scan_tap+0xd6>
    2e0a:	18 9f       	mul	r17, r24
    2e0c:	f0 01       	movw	r30, r0
    2e0e:	19 9f       	mul	r17, r25
    2e10:	f0 0d       	add	r31, r0
    2e12:	11 24       	eor	r1, r1
    2e14:	e7 57       	subi	r30, 0x77	; 119
    2e16:	fe 4f       	sbci	r31, 0xFE	; 254
    2e18:	21 81       	ldd	r18, Z+1	; 0x01
    2e1a:	2c 13       	cpse	r18, r28
    2e1c:	32 c0       	rjmp	.+100    	; 0x2e82 <waiting_buffer_scan_tap+0xd6>
    2e1e:	20 81       	ld	r18, Z
    2e20:	2b 13       	cpse	r18, r27
    2e22:	2f c0       	rjmp	.+94     	; 0x2e82 <waiting_buffer_scan_tap+0xd6>
    2e24:	22 81       	ldd	r18, Z+2	; 0x02
    2e26:	21 11       	cpse	r18, r1
    2e28:	2c c0       	rjmp	.+88     	; 0x2e82 <waiting_buffer_scan_tap+0xd6>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2e2a:	23 81       	ldd	r18, Z+3	; 0x03
    2e2c:	34 81       	ldd	r19, Z+4	; 0x04
    2e2e:	24 17       	cp	r18, r20
    2e30:	35 07       	cpc	r19, r21
    2e32:	20 f1       	brcs	.+72     	; 0x2e7c <waiting_buffer_scan_tap+0xd0>
    2e34:	24 1b       	sub	r18, r20
    2e36:	35 0b       	sbc	r19, r21
    2e38:	28 3c       	cpi	r18, 0xC8	; 200
    2e3a:	31 05       	cpc	r19, r1
    2e3c:	10 f5       	brcc	.+68     	; 0x2e82 <waiting_buffer_scan_tap+0xd6>
            tapping_key.tap.count = 1;
    2e3e:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <tapping_key+0x5>
    2e42:	2f 70       	andi	r18, 0x0F	; 15
    2e44:	20 61       	ori	r18, 0x10	; 16
    2e46:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    2e4a:	26 e0       	ldi	r18, 0x06	; 6
    2e4c:	28 9f       	mul	r18, r24
    2e4e:	f0 01       	movw	r30, r0
    2e50:	29 9f       	mul	r18, r25
    2e52:	f0 0d       	add	r31, r0
    2e54:	11 24       	eor	r1, r1
    2e56:	e2 57       	subi	r30, 0x72	; 114
    2e58:	fe 4f       	sbci	r31, 0xFE	; 254
    2e5a:	80 81       	ld	r24, Z
    2e5c:	8f 70       	andi	r24, 0x0F	; 15
    2e5e:	80 61       	ori	r24, 0x10	; 16
    2e60:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2e62:	89 eb       	ldi	r24, 0xB9	; 185
    2e64:	91 e0       	ldi	r25, 0x01	; 1
    2e66:	0e 94 45 13 	call	0x268a	; 0x268a <process_action>
}
    2e6a:	df 91       	pop	r29
    2e6c:	cf 91       	pop	r28
    2e6e:	1f 91       	pop	r17
            debug_waiting_buffer();
    2e70:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <debug_waiting_buffer>
    2e74:	21 e0       	ldi	r18, 0x01	; 1
    2e76:	c6 cf       	rjmp	.-116    	; 0x2e04 <waiting_buffer_scan_tap+0x58>
    2e78:	2a 2f       	mov	r18, r26
    2e7a:	c4 cf       	rjmp	.-120    	; 0x2e04 <waiting_buffer_scan_tap+0x58>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2e7c:	26 0f       	add	r18, r22
    2e7e:	37 1f       	adc	r19, r23
    2e80:	db cf       	rjmp	.-74     	; 0x2e38 <waiting_buffer_scan_tap+0x8c>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	87 70       	andi	r24, 0x07	; 7
    2e86:	b2 cf       	rjmp	.-156    	; 0x2dec <waiting_buffer_scan_tap+0x40>

00002e88 <process_tapping>:
{
    2e88:	af 92       	push	r10
    2e8a:	bf 92       	push	r11
    2e8c:	cf 92       	push	r12
    2e8e:	df 92       	push	r13
    2e90:	ef 92       	push	r14
    2e92:	ff 92       	push	r15
    2e94:	0f 93       	push	r16
    2e96:	1f 93       	push	r17
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	61 97       	sbiw	r28, 0x11	; 17
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
    2eac:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2eae:	85 e0       	ldi	r24, 0x05	; 5
    2eb0:	f8 01       	movw	r30, r16
    2eb2:	de 01       	movw	r26, r28
    2eb4:	1d 96       	adiw	r26, 0x0d	; 13
    2eb6:	01 90       	ld	r0, Z+
    2eb8:	0d 92       	st	X+, r0
    2eba:	8a 95       	dec	r24
    2ebc:	e1 f7       	brne	.-8      	; 0x2eb6 <process_tapping+0x2e>
    2ebe:	d8 01       	movw	r26, r16
    2ec0:	4c 91       	ld	r20, X
    2ec2:	11 96       	adiw	r26, 0x01	; 1
    2ec4:	5c 91       	ld	r21, X
    2ec6:	11 97       	sbiw	r26, 0x01	; 1
    2ec8:	12 96       	adiw	r26, 0x02	; 2
    2eca:	ec 90       	ld	r14, X
    2ecc:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <tapping_key>
    2ed0:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <tapping_key+0x1>
    2ed4:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <tapping_key+0x3>
    2ed8:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <tapping_key+0x4>
    2edc:	00 97       	sbiw	r24, 0x00	; 0
    2ede:	39 f0       	breq	.+14     	; 0x2eee <process_tapping+0x66>
    2ee0:	6f 3f       	cpi	r22, 0xFF	; 255
    2ee2:	19 f4       	brne	.+6      	; 0x2eea <process_tapping+0x62>
    2ee4:	21 e0       	ldi	r18, 0x01	; 1
    2ee6:	3f 3f       	cpi	r19, 0xFF	; 255
    2ee8:	19 f0       	breq	.+6      	; 0x2ef0 <process_tapping+0x68>
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	01 c0       	rjmp	.+2      	; 0x2ef0 <process_tapping+0x68>
    2eee:	21 e0       	ldi	r18, 0x01	; 1
    if (IS_TAPPING_PRESSED()) {
    2ef0:	b2 2f       	mov	r27, r18
    2ef2:	b1 70       	andi	r27, 0x01	; 1
    2ef4:	bb 2e       	mov	r11, r27
    2ef6:	20 fd       	sbrc	r18, 0
    2ef8:	90 c1       	rjmp	.+800    	; 0x321a <process_tapping+0x392>
    keyevent_t event = keyp->event;
    2efa:	f8 01       	movw	r30, r16
    2efc:	c3 80       	ldd	r12, Z+3	; 0x03
    2efe:	d4 80       	ldd	r13, Z+4	; 0x04
    if (IS_TAPPING_PRESSED()) {
    2f00:	a0 90 bb 01 	lds	r10, 0x01BB	; 0x8001bb <tapping_key+0x2>
    2f04:	aa 20       	and	r10, r10
    2f06:	09 f4       	brne	.+2      	; 0x2f0a <process_tapping+0x82>
    2f08:	32 c1       	rjmp	.+612    	; 0x316e <process_tapping+0x2e6>
    2f0a:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <tapping_key+0x5>
        if (WITHIN_TAPPING_TERM(event)) {
    2f0e:	c8 16       	cp	r12, r24
    2f10:	d9 06       	cpc	r13, r25
    2f12:	10 f1       	brcs	.+68     	; 0x2f58 <process_tapping+0xd0>
    2f14:	d6 01       	movw	r26, r12
    2f16:	a8 1b       	sub	r26, r24
    2f18:	b9 0b       	sbc	r27, r25
    2f1a:	cd 01       	movw	r24, r26
    2f1c:	ff 24       	eor	r15, r15
    2f1e:	f3 94       	inc	r15
    2f20:	88 3c       	cpi	r24, 0xC8	; 200
    2f22:	91 05       	cpc	r25, r1
    2f24:	f0 f0       	brcs	.+60     	; 0x2f62 <process_tapping+0xda>
    2f26:	f1 2c       	mov	r15, r1
            if (tapping_key.tap.count == 0) {
    2f28:	20 7f       	andi	r18, 0xF0	; 240
    2f2a:	09 f0       	breq	.+2      	; 0x2f2e <process_tapping+0xa6>
    2f2c:	e9 c0       	rjmp	.+466    	; 0x3100 <process_tapping+0x278>
                debug_event(event); debug("\n");
    2f2e:	7c 2d       	mov	r23, r12
    2f30:	d9 8a       	std	Y+17, r13	; 0x11
    2f32:	c8 8a       	std	Y+16, r12	; 0x10
    2f34:	6e 2d       	mov	r22, r14
    2f36:	89 89       	ldd	r24, Y+17	; 0x11
    2f38:	0e 94 88 16 	call	0x2d10	; 0x2d10 <debug_event>
                process_action(&tapping_key);
    2f3c:	89 eb       	ldi	r24, 0xB9	; 185
    2f3e:	91 e0       	ldi	r25, 0x01	; 1
    2f40:	0e 94 45 13 	call	0x268a	; 0x268a <process_action>
                tapping_key = (keyrecord_t){};
    2f44:	e9 eb       	ldi	r30, 0xB9	; 185
    2f46:	f1 e0       	ldi	r31, 0x01	; 1
    2f48:	86 e0       	ldi	r24, 0x06	; 6
    2f4a:	df 01       	movw	r26, r30
    2f4c:	1d 92       	st	X+, r1
    2f4e:	8a 95       	dec	r24
    2f50:	e9 f7       	brne	.-6      	; 0x2f4c <process_tapping+0xc4>
                debug_tapping_key();
    2f52:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <debug_tapping_key>
                return false;
    2f56:	1e c0       	rjmp	.+60     	; 0x2f94 <process_tapping+0x10c>
        if (WITHIN_TAPPING_TERM(event)) {
    2f58:	80 95       	com	r24
    2f5a:	90 95       	com	r25
    2f5c:	8c 0d       	add	r24, r12
    2f5e:	9d 1d       	adc	r25, r13
    2f60:	dd cf       	rjmp	.-70     	; 0x2f1c <process_tapping+0x94>
            if (tapping_key.tap.count == 0) {
    2f62:	82 2f       	mov	r24, r18
    2f64:	80 7f       	andi	r24, 0xF0	; 240
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <process_tapping+0xe2>
    2f68:	84 c0       	rjmp	.+264    	; 0x3072 <process_tapping+0x1ea>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f6a:	65 13       	cpse	r22, r21
    2f6c:	25 c0       	rjmp	.+74     	; 0x2fb8 <process_tapping+0x130>
    2f6e:	34 13       	cpse	r19, r20
    2f70:	23 c0       	rjmp	.+70     	; 0x2fb8 <process_tapping+0x130>
    2f72:	fe 2c       	mov	r15, r14
    2f74:	e1 10       	cpse	r14, r1
    2f76:	20 c0       	rjmp	.+64     	; 0x2fb8 <process_tapping+0x130>
                    tapping_key.tap.count = 1;
    2f78:	2f 70       	andi	r18, 0x0F	; 15
    2f7a:	20 61       	ori	r18, 0x10	; 16
    2f7c:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <tapping_key+0x5>
                    debug_tapping_key();
    2f80:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <debug_tapping_key>
                    process_action(&tapping_key);
    2f84:	89 eb       	ldi	r24, 0xB9	; 185
    2f86:	91 e0       	ldi	r25, 0x01	; 1
    2f88:	0e 94 45 13 	call	0x268a	; 0x268a <process_action>
                    keyp->tap = tapping_key.tap;
    2f8c:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    2f90:	f8 01       	movw	r30, r16
    2f92:	85 83       	std	Z+5, r24	; 0x05
}
    2f94:	8f 2d       	mov	r24, r15
    2f96:	61 96       	adiw	r28, 0x11	; 17
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
    2fa2:	df 91       	pop	r29
    2fa4:	cf 91       	pop	r28
    2fa6:	1f 91       	pop	r17
    2fa8:	0f 91       	pop	r16
    2faa:	ff 90       	pop	r15
    2fac:	ef 90       	pop	r14
    2fae:	df 90       	pop	r13
    2fb0:	cf 90       	pop	r12
    2fb2:	bf 90       	pop	r11
    2fb4:	af 90       	pop	r10
    2fb6:	08 95       	ret
    2fb8:	cd 28       	or	r12, r13
    2fba:	39 f0       	breq	.+14     	; 0x2fca <process_tapping+0x142>
    2fbc:	5f 3f       	cpi	r21, 0xFF	; 255
    2fbe:	19 f4       	brne	.+6      	; 0x2fc6 <process_tapping+0x13e>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	4f 3f       	cpi	r20, 0xFF	; 255
    2fc4:	19 f0       	breq	.+6      	; 0x2fcc <process_tapping+0x144>
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	01 c0       	rjmp	.+2      	; 0x2fcc <process_tapping+0x144>
    2fca:	81 e0       	ldi	r24, 0x01	; 1
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2fcc:	80 fd       	sbrc	r24, 0
    2fce:	24 c0       	rjmp	.+72     	; 0x3018 <process_tapping+0x190>
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	8e 25       	eor	r24, r14
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2fd4:	f8 2f       	mov	r31, r24
    2fd6:	f1 70       	andi	r31, 0x01	; 1
    2fd8:	ff 2e       	mov	r15, r31
    2fda:	80 ff       	sbrs	r24, 0
    2fdc:	3f c0       	rjmp	.+126    	; 0x305c <process_tapping+0x1d4>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fde:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <waiting_buffer_tail>
    2fe2:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2fe6:	36 e0       	ldi	r19, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fe8:	82 13       	cpse	r24, r18
    2fea:	18 c0       	rjmp	.+48     	; 0x301c <process_tapping+0x194>
                    action_t action = layer_switch_get_action(event.key);
    2fec:	4d 87       	std	Y+13, r20	; 0x0d
    2fee:	5e 87       	std	Y+14, r21	; 0x0e
    2ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff4:	0e 94 65 1b 	call	0x36ca	; 0x36ca <layer_switch_get_action>
                    switch (action.kind.id) {
    2ff8:	29 2f       	mov	r18, r25
    2ffa:	22 95       	swap	r18
    2ffc:	2f 70       	andi	r18, 0x0F	; 15
    2ffe:	22 30       	cpi	r18, 0x02	; 2
    3000:	08 f1       	brcs	.+66     	; 0x3044 <process_tapping+0x1bc>
    3002:	24 30       	cpi	r18, 0x04	; 4
    3004:	30 f5       	brcc	.+76     	; 0x3052 <process_tapping+0x1ca>
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3006:	9f 70       	andi	r25, 0x0F	; 15
    3008:	09 f1       	breq	.+66     	; 0x304c <process_tapping+0x1c4>
    300a:	d8 01       	movw	r26, r16
    300c:	15 96       	adiw	r26, 0x05	; 5
    300e:	9c 91       	ld	r25, X
    3010:	90 7f       	andi	r25, 0xF0	; 240
    3012:	e1 f4       	brne	.+56     	; 0x304c <process_tapping+0x1c4>
    3014:	fb 2c       	mov	r15, r11
    3016:	be cf       	rjmp	.-132    	; 0x2f94 <process_tapping+0x10c>
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	dc cf       	rjmp	.-72     	; 0x2fd4 <process_tapping+0x14c>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	38 9f       	mul	r19, r24
    3020:	f0 01       	movw	r30, r0
    3022:	39 9f       	mul	r19, r25
    3024:	f0 0d       	add	r31, r0
    3026:	11 24       	eor	r1, r1
    3028:	e7 57       	subi	r30, 0x77	; 119
    302a:	fe 4f       	sbci	r31, 0xFE	; 254
    302c:	61 81       	ldd	r22, Z+1	; 0x01
    302e:	56 13       	cpse	r21, r22
    3030:	06 c0       	rjmp	.+12     	; 0x303e <process_tapping+0x1b6>
    3032:	60 81       	ld	r22, Z
    3034:	64 13       	cpse	r22, r20
    3036:	03 c0       	rjmp	.+6      	; 0x303e <process_tapping+0x1b6>
    3038:	62 81       	ldd	r22, Z+2	; 0x02
    303a:	e6 12       	cpse	r14, r22
    303c:	0f c0       	rjmp	.+30     	; 0x305c <process_tapping+0x1d4>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    303e:	01 96       	adiw	r24, 0x01	; 1
    3040:	87 70       	andi	r24, 0x07	; 7
    3042:	d2 cf       	rjmp	.-92     	; 0x2fe8 <process_tapping+0x160>
                            if (action.key.mods && !action.key.code) return false;
    3044:	9f 70       	andi	r25, 0x0F	; 15
    3046:	11 f0       	breq	.+4      	; 0x304c <process_tapping+0x1c4>
    3048:	88 23       	and	r24, r24
    304a:	21 f3       	breq	.-56     	; 0x3014 <process_tapping+0x18c>
                            if (IS_MOD(action.key.code)) return false;
    304c:	80 5e       	subi	r24, 0xE0	; 224
    304e:	88 30       	cpi	r24, 0x08	; 8
    3050:	08 f3       	brcs	.-62     	; 0x3014 <process_tapping+0x18c>
                    process_action(keyp);
    3052:	c8 01       	movw	r24, r16
    3054:	0e 94 45 13 	call	0x268a	; 0x268a <process_action>
                    return true;
    3058:	bf 2c       	mov	r11, r15
    305a:	dc cf       	rjmp	.-72     	; 0x3014 <process_tapping+0x18c>
                    if (event.pressed) {
    305c:	fe 2c       	mov	r15, r14
    305e:	ee 20       	and	r14, r14
    3060:	09 f4       	brne	.+2      	; 0x3064 <process_tapping+0x1dc>
    3062:	98 cf       	rjmp	.-208    	; 0x2f94 <process_tapping+0x10c>
                        tapping_key.tap.interrupted = true;
    3064:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    3068:	81 60       	ori	r24, 0x01	; 1
    306a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <tapping_key+0x5>
                    return false;
    306e:	f1 2c       	mov	r15, r1
    3070:	91 cf       	rjmp	.-222    	; 0x2f94 <process_tapping+0x10c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3072:	65 13       	cpse	r22, r21
    3074:	14 c0       	rjmp	.+40     	; 0x309e <process_tapping+0x216>
    3076:	34 13       	cpse	r19, r20
    3078:	12 c0       	rjmp	.+36     	; 0x309e <process_tapping+0x216>
    307a:	e1 10       	cpse	r14, r1
    307c:	10 c0       	rjmp	.+32     	; 0x309e <process_tapping+0x216>
                    keyp->tap = tapping_key.tap;
    307e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    3082:	f8 01       	movw	r30, r16
    3084:	85 83       	std	Z+5, r24	; 0x05
                        process_action(keyp);
    3086:	c8 01       	movw	r24, r16
    3088:	0e 94 45 13 	call	0x268a	; 0x268a <process_action>
                        tapping_key = *keyp;
    308c:	86 e0       	ldi	r24, 0x06	; 6
    308e:	f8 01       	movw	r30, r16
    3090:	a9 eb       	ldi	r26, 0xB9	; 185
    3092:	b1 e0       	ldi	r27, 0x01	; 1
    3094:	01 90       	ld	r0, Z+
    3096:	0d 92       	st	X+, r0
    3098:	8a 95       	dec	r24
    309a:	e1 f7       	brne	.-8      	; 0x3094 <process_tapping+0x20c>
    309c:	5a cf       	rjmp	.-332    	; 0x2f52 <process_tapping+0xca>
                else if (is_tap_key(event.key) && event.pressed) {
    309e:	4d 87       	std	Y+13, r20	; 0x0d
    30a0:	5e 87       	std	Y+14, r21	; 0x0e
    30a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a6:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <is_tap_key>
    30aa:	88 23       	and	r24, r24
    30ac:	09 f4       	brne	.+2      	; 0x30b0 <process_tapping+0x228>
    30ae:	bf c0       	rjmp	.+382    	; 0x322e <process_tapping+0x3a6>
    30b0:	ee 20       	and	r14, r14
    30b2:	09 f4       	brne	.+2      	; 0x30b6 <process_tapping+0x22e>
    30b4:	bc c0       	rjmp	.+376    	; 0x322e <process_tapping+0x3a6>
                    if (tapping_key.tap.count > 1) {
    30b6:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <tapping_key+0x5>
    30ba:	82 2f       	mov	r24, r18
    30bc:	82 95       	swap	r24
    30be:	8f 70       	andi	r24, 0x0F	; 15
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	02 97       	sbiw	r24, 0x02	; 2
    30c4:	74 f0       	brlt	.+28     	; 0x30e2 <process_tapping+0x25a>
                        process_action(&(keyrecord_t){
    30c6:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <tapping_key>
    30ca:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <tapping_key+0x1>
    30ce:	98 87       	std	Y+8, r25	; 0x08
    30d0:	8f 83       	std	Y+7, r24	; 0x07
    30d2:	19 86       	std	Y+9, r1	; 0x09
    30d4:	db 86       	std	Y+11, r13	; 0x0b
    30d6:	ca 86       	std	Y+10, r12	; 0x0a
    30d8:	2c 87       	std	Y+12, r18	; 0x0c
    30da:	ce 01       	movw	r24, r28
    30dc:	07 96       	adiw	r24, 0x07	; 7
    30de:	0e 94 45 13 	call	0x268a	; 0x268a <process_action>
                    tapping_key = *keyp;
    30e2:	86 e0       	ldi	r24, 0x06	; 6
    30e4:	f8 01       	movw	r30, r16
    30e6:	a9 eb       	ldi	r26, 0xB9	; 185
    30e8:	b1 e0       	ldi	r27, 0x01	; 1
    30ea:	01 90       	ld	r0, Z+
    30ec:	0d 92       	st	X+, r0
    30ee:	8a 95       	dec	r24
    30f0:	e1 f7       	brne	.-8      	; 0x30ea <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    30f2:	0e 94 d6 16 	call	0x2dac	; 0x2dac <waiting_buffer_scan_tap>
                    debug_tapping_key();
    30f6:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <debug_tapping_key>
                    return true;
    30fa:	ff 24       	eor	r15, r15
    30fc:	f3 94       	inc	r15
    30fe:	4a cf       	rjmp	.-364    	; 0x2f94 <process_tapping+0x10c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3100:	65 13       	cpse	r22, r21
    3102:	14 c0       	rjmp	.+40     	; 0x312c <process_tapping+0x2a4>
    3104:	34 13       	cpse	r19, r20
    3106:	12 c0       	rjmp	.+36     	; 0x312c <process_tapping+0x2a4>
    3108:	e1 10       	cpse	r14, r1
    310a:	10 c0       	rjmp	.+32     	; 0x312c <process_tapping+0x2a4>
                    keyp->tap = tapping_key.tap;
    310c:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    3110:	f8 01       	movw	r30, r16
    3112:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    3114:	c8 01       	movw	r24, r16
    3116:	0e 94 45 13 	call	0x268a	; 0x268a <process_action>
                    tapping_key = (keyrecord_t){};
    311a:	86 e0       	ldi	r24, 0x06	; 6
    311c:	e9 eb       	ldi	r30, 0xB9	; 185
    311e:	f1 e0       	ldi	r31, 0x01	; 1
    3120:	df 01       	movw	r26, r30
    3122:	1d 92       	st	X+, r1
    3124:	8a 95       	dec	r24
    3126:	e9 f7       	brne	.-6      	; 0x3122 <process_tapping+0x29a>
                    return true;
    3128:	fa 2c       	mov	r15, r10
    312a:	34 cf       	rjmp	.-408    	; 0x2f94 <process_tapping+0x10c>
                else if (is_tap_key(event.key) && event.pressed) {
    312c:	4d 87       	std	Y+13, r20	; 0x0d
    312e:	5e 87       	std	Y+14, r21	; 0x0e
    3130:	8d 85       	ldd	r24, Y+13	; 0x0d
    3132:	9e 85       	ldd	r25, Y+14	; 0x0e
    3134:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <is_tap_key>
    3138:	88 23       	and	r24, r24
    313a:	09 f4       	brne	.+2      	; 0x313e <process_tapping+0x2b6>
    313c:	78 c0       	rjmp	.+240    	; 0x322e <process_tapping+0x3a6>
    313e:	ee 20       	and	r14, r14
    3140:	09 f4       	brne	.+2      	; 0x3144 <process_tapping+0x2bc>
    3142:	75 c0       	rjmp	.+234    	; 0x322e <process_tapping+0x3a6>
                    if (tapping_key.tap.count > 1) {
    3144:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <tapping_key+0x5>
    3148:	82 2f       	mov	r24, r18
    314a:	82 95       	swap	r24
    314c:	8f 70       	andi	r24, 0x0F	; 15
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	02 97       	sbiw	r24, 0x02	; 2
    3152:	3c f2       	brlt	.-114    	; 0x30e2 <process_tapping+0x25a>
                        process_action(&(keyrecord_t){
    3154:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <tapping_key>
    3158:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <tapping_key+0x1>
    315c:	9a 83       	std	Y+2, r25	; 0x02
    315e:	89 83       	std	Y+1, r24	; 0x01
    3160:	1b 82       	std	Y+3, r1	; 0x03
    3162:	dd 82       	std	Y+5, r13	; 0x05
    3164:	cc 82       	std	Y+4, r12	; 0x04
    3166:	2e 83       	std	Y+6, r18	; 0x06
    3168:	ce 01       	movw	r24, r28
    316a:	01 96       	adiw	r24, 0x01	; 1
    316c:	b8 cf       	rjmp	.-144    	; 0x30de <process_tapping+0x256>
        if (WITHIN_TAPPING_TERM(event)) {
    316e:	c8 16       	cp	r12, r24
    3170:	d9 06       	cpc	r13, r25
    3172:	80 f0       	brcs	.+32     	; 0x3194 <process_tapping+0x30c>
    3174:	f6 01       	movw	r30, r12
    3176:	e8 1b       	sub	r30, r24
    3178:	f9 0b       	sbc	r31, r25
    317a:	cf 01       	movw	r24, r30
    317c:	88 3c       	cpi	r24, 0xC8	; 200
    317e:	91 05       	cpc	r25, r1
    3180:	70 f0       	brcs	.+28     	; 0x319e <process_tapping+0x316>
    3182:	f1 2c       	mov	r15, r1
            debug_event(event); debug("\n");
    3184:	7c 2d       	mov	r23, r12
    3186:	d9 8a       	std	Y+17, r13	; 0x11
    3188:	c8 8a       	std	Y+16, r12	; 0x10
    318a:	6e 2d       	mov	r22, r14
    318c:	89 89       	ldd	r24, Y+17	; 0x11
    318e:	0e 94 88 16 	call	0x2d10	; 0x2d10 <debug_event>
    3192:	d8 ce       	rjmp	.-592    	; 0x2f44 <process_tapping+0xbc>
        if (WITHIN_TAPPING_TERM(event)) {
    3194:	80 95       	com	r24
    3196:	90 95       	com	r25
    3198:	8c 0d       	add	r24, r12
    319a:	9d 1d       	adc	r25, r13
    319c:	ef cf       	rjmp	.-34     	; 0x317c <process_tapping+0x2f4>
            if (event.pressed) {
    319e:	fe 2c       	mov	r15, r14
    31a0:	ee 20       	and	r14, r14
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <process_tapping+0x31e>
    31a4:	44 c0       	rjmp	.+136    	; 0x322e <process_tapping+0x3a6>
                if (IS_TAPPING_KEY(event.key)) {
    31a6:	65 13       	cpse	r22, r21
    31a8:	27 c0       	rjmp	.+78     	; 0x31f8 <process_tapping+0x370>
    31aa:	34 13       	cpse	r19, r20
    31ac:	25 c0       	rjmp	.+74     	; 0x31f8 <process_tapping+0x370>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    31ae:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    31b2:	80 fd       	sbrc	r24, 0
    31b4:	18 c0       	rjmp	.+48     	; 0x31e6 <process_tapping+0x35e>
    31b6:	98 2f       	mov	r25, r24
    31b8:	92 95       	swap	r25
    31ba:	9f 70       	andi	r25, 0x0F	; 15
    31bc:	29 2f       	mov	r18, r25
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	21 15       	cp	r18, r1
    31c2:	31 05       	cpc	r19, r1
    31c4:	81 f0       	breq	.+32     	; 0x31e6 <process_tapping+0x35e>
                        keyp->tap = tapping_key.tap;
    31c6:	d8 01       	movw	r26, r16
    31c8:	15 96       	adiw	r26, 0x05	; 5
    31ca:	8c 93       	st	X, r24
    31cc:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    31ce:	2f 30       	cpi	r18, 0x0F	; 15
    31d0:	31 05       	cpc	r19, r1
    31d2:	09 f4       	brne	.+2      	; 0x31d6 <process_tapping+0x34e>
    31d4:	58 cf       	rjmp	.-336    	; 0x3086 <process_tapping+0x1fe>
    31d6:	9f 5f       	subi	r25, 0xFF	; 255
    31d8:	92 95       	swap	r25
    31da:	90 7f       	andi	r25, 0xF0	; 240
    31dc:	8f 70       	andi	r24, 0x0F	; 15
    31de:	89 2b       	or	r24, r25
    31e0:	15 96       	adiw	r26, 0x05	; 5
    31e2:	8c 93       	st	X, r24
    31e4:	50 cf       	rjmp	.-352    	; 0x3086 <process_tapping+0x1fe>
                        tapping_key = *keyp;
    31e6:	86 e0       	ldi	r24, 0x06	; 6
    31e8:	f8 01       	movw	r30, r16
    31ea:	a9 eb       	ldi	r26, 0xB9	; 185
    31ec:	b1 e0       	ldi	r27, 0x01	; 1
    31ee:	01 90       	ld	r0, Z+
    31f0:	0d 92       	st	X+, r0
    31f2:	8a 95       	dec	r24
    31f4:	e1 f7       	brne	.-8      	; 0x31ee <process_tapping+0x366>
                        return true;
    31f6:	ce ce       	rjmp	.-612    	; 0x2f94 <process_tapping+0x10c>
                } else if (is_tap_key(event.key)) {
    31f8:	4d 87       	std	Y+13, r20	; 0x0d
    31fa:	5e 87       	std	Y+14, r21	; 0x0e
    31fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3200:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <is_tap_key>
    3204:	81 11       	cpse	r24, r1
    3206:	6d cf       	rjmp	.-294    	; 0x30e2 <process_tapping+0x25a>
                    tapping_key.tap.interrupted = true;
    3208:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    320c:	81 60       	ori	r24, 0x01	; 1
    320e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <tapping_key+0x5>
                    process_action(keyp);
    3212:	c8 01       	movw	r24, r16
    3214:	0e 94 45 13 	call	0x268a	; 0x268a <process_action>
                    return true;
    3218:	bd ce       	rjmp	.-646    	; 0x2f94 <process_tapping+0x10c>
        if (event.pressed && is_tap_key(event.key)) {
    321a:	ee 20       	and	r14, r14
    321c:	41 f0       	breq	.+16     	; 0x322e <process_tapping+0x3a6>
    321e:	4d 87       	std	Y+13, r20	; 0x0d
    3220:	5e 87       	std	Y+14, r21	; 0x0e
    3222:	8d 85       	ldd	r24, Y+13	; 0x0d
    3224:	9e 85       	ldd	r25, Y+14	; 0x0e
    3226:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <is_tap_key>
    322a:	81 11       	cpse	r24, r1
    322c:	5a cf       	rjmp	.-332    	; 0x30e2 <process_tapping+0x25a>
                    process_action(keyp);
    322e:	c8 01       	movw	r24, r16
    3230:	0e 94 45 13 	call	0x268a	; 0x268a <process_action>
    3234:	62 cf       	rjmp	.-316    	; 0x30fa <process_tapping+0x272>

00003236 <action_tapping_process>:
{
    3236:	1f 93       	push	r17
    3238:	cf 93       	push	r28
    323a:	df 93       	push	r29
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	2c 97       	sbiw	r28, 0x0c	; 12
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	4f 83       	std	Y+7, r20	; 0x07
    324e:	58 87       	std	Y+8, r21	; 0x08
    3250:	69 87       	std	Y+9, r22	; 0x09
    3252:	7a 87       	std	Y+10, r23	; 0x0a
    3254:	8b 87       	std	Y+11, r24	; 0x0b
    3256:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3258:	ce 01       	movw	r24, r28
    325a:	07 96       	adiw	r24, 0x07	; 7
    325c:	0e 94 44 17 	call	0x2e88	; 0x2e88 <process_tapping>
    3260:	88 23       	and	r24, r24
    3262:	49 f1       	breq	.+82     	; 0x32b6 <action_tapping_process+0x80>
    3264:	9f 81       	ldd	r25, Y+7	; 0x07
    3266:	88 85       	ldd	r24, Y+8	; 0x08
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3268:	2a 85       	ldd	r18, Y+10	; 0x0a
    326a:	3b 85       	ldd	r19, Y+11	; 0x0b
    326c:	23 2b       	or	r18, r19
    326e:	39 f0       	breq	.+14     	; 0x327e <action_tapping_process+0x48>
    3270:	8f 3f       	cpi	r24, 0xFF	; 255
    3272:	19 f4       	brne	.+6      	; 0x327a <action_tapping_process+0x44>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	9f 3f       	cpi	r25, 0xFF	; 255
    3278:	19 f0       	breq	.+6      	; 0x3280 <action_tapping_process+0x4a>
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	01 c0       	rjmp	.+2      	; 0x3280 <action_tapping_process+0x4a>
    327e:	81 e0       	ldi	r24, 0x01	; 1
        if (!IS_NOEVENT(record.event)) {
    3280:	80 fd       	sbrc	r24, 0
    3282:	08 c0       	rjmp	.+16     	; 0x3294 <action_tapping_process+0x5e>
            debug("processed: "); debug_record(record); debug("\n");
    3284:	4f 81       	ldd	r20, Y+7	; 0x07
    3286:	58 85       	ldd	r21, Y+8	; 0x08
    3288:	69 85       	ldd	r22, Y+9	; 0x09
    328a:	7a 85       	ldd	r23, Y+10	; 0x0a
    328c:	8b 85       	ldd	r24, Y+11	; 0x0b
    328e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3290:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <debug_record>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3294:	16 e0       	ldi	r17, 0x06	; 6
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3296:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <waiting_buffer_tail>
    329a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <waiting_buffer_head>
    329e:	89 13       	cpse	r24, r25
    32a0:	48 c0       	rjmp	.+144    	; 0x3332 <action_tapping_process+0xfc>
}
    32a2:	2c 96       	adiw	r28, 0x0c	; 12
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	f8 94       	cli
    32a8:	de bf       	out	0x3e, r29	; 62
    32aa:	0f be       	out	0x3f, r0	; 63
    32ac:	cd bf       	out	0x3d, r28	; 61
    32ae:	df 91       	pop	r29
    32b0:	cf 91       	pop	r28
    32b2:	1f 91       	pop	r17
    32b4:	08 95       	ret
    32b6:	86 e0       	ldi	r24, 0x06	; 6
    32b8:	fe 01       	movw	r30, r28
    32ba:	37 96       	adiw	r30, 0x07	; 7
    32bc:	de 01       	movw	r26, r28
    32be:	11 96       	adiw	r26, 0x01	; 1
    32c0:	01 90       	ld	r0, Z+
    32c2:	0d 92       	st	X+, r0
    32c4:	8a 95       	dec	r24
    32c6:	e1 f7       	brne	.-8      	; 0x32c0 <action_tapping_process+0x8a>
    32c8:	ff 81       	ldd	r31, Y+7	; 0x07
    32ca:	e8 85       	ldd	r30, Y+8	; 0x08
    32cc:	6a 85       	ldd	r22, Y+10	; 0x0a
    32ce:	7b 85       	ldd	r23, Y+11	; 0x0b
    32d0:	61 15       	cp	r22, r1
    32d2:	71 05       	cpc	r23, r1
    32d4:	39 f0       	breq	.+14     	; 0x32e4 <action_tapping_process+0xae>
    32d6:	ef 3f       	cpi	r30, 0xFF	; 255
    32d8:	19 f4       	brne	.+6      	; 0x32e0 <action_tapping_process+0xaa>
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	ff 3f       	cpi	r31, 0xFF	; 255
    32de:	19 f0       	breq	.+6      	; 0x32e6 <action_tapping_process+0xb0>
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	01 c0       	rjmp	.+2      	; 0x32e6 <action_tapping_process+0xb0>
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    if (IS_NOEVENT(record.event)) {
    32e6:	80 fd       	sbrc	r24, 0
    32e8:	d5 cf       	rjmp	.-86     	; 0x3294 <action_tapping_process+0x5e>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    32ea:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <waiting_buffer_head>
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	c9 01       	movw	r24, r18
    32f2:	01 96       	adiw	r24, 0x01	; 1
    32f4:	87 70       	andi	r24, 0x07	; 7
    32f6:	99 27       	eor	r25, r25
    32f8:	40 91 87 01 	lds	r20, 0x0187	; 0x800187 <waiting_buffer_tail>
    32fc:	50 e0       	ldi	r21, 0x00	; 0
    32fe:	84 17       	cp	r24, r20
    3300:	95 07       	cpc	r25, r21
    3302:	c9 f1       	breq	.+114    	; 0x3376 <action_tapping_process+0x140>
    waiting_buffer[waiting_buffer_head] = record;
    3304:	f9 83       	std	Y+1, r31	; 0x01
    3306:	ea 83       	std	Y+2, r30	; 0x02
    3308:	7d 83       	std	Y+5, r23	; 0x05
    330a:	6c 83       	std	Y+4, r22	; 0x04
    330c:	96 e0       	ldi	r25, 0x06	; 6
    330e:	92 9f       	mul	r25, r18
    3310:	d0 01       	movw	r26, r0
    3312:	93 9f       	mul	r25, r19
    3314:	b0 0d       	add	r27, r0
    3316:	11 24       	eor	r1, r1
    3318:	a7 57       	subi	r26, 0x77	; 119
    331a:	be 4f       	sbci	r27, 0xFE	; 254
    331c:	fe 01       	movw	r30, r28
    331e:	31 96       	adiw	r30, 0x01	; 1
    3320:	01 90       	ld	r0, Z+
    3322:	0d 92       	st	X+, r0
    3324:	9a 95       	dec	r25
    3326:	e1 f7       	brne	.-8      	; 0x3320 <action_tapping_process+0xea>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3328:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <waiting_buffer_head>
    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    332c:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <debug_waiting_buffer>
    3330:	b1 cf       	rjmp	.-158    	; 0x3294 <action_tapping_process+0x5e>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3332:	81 9f       	mul	r24, r17
    3334:	c0 01       	movw	r24, r0
    3336:	11 24       	eor	r1, r1
    3338:	87 57       	subi	r24, 0x77	; 119
    333a:	9e 4f       	sbci	r25, 0xFE	; 254
    333c:	0e 94 44 17 	call	0x2e88	; 0x2e88 <process_tapping>
    3340:	88 23       	and	r24, r24
    3342:	09 f4       	brne	.+2      	; 0x3346 <action_tapping_process+0x110>
    3344:	ae cf       	rjmp	.-164    	; 0x32a2 <action_tapping_process+0x6c>
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3346:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <waiting_buffer_tail>
    334a:	1e 9f       	mul	r17, r30
    334c:	f0 01       	movw	r30, r0
    334e:	11 24       	eor	r1, r1
    3350:	e7 57       	subi	r30, 0x77	; 119
    3352:	fe 4f       	sbci	r31, 0xFE	; 254
    3354:	40 81       	ld	r20, Z
    3356:	51 81       	ldd	r21, Z+1	; 0x01
    3358:	62 81       	ldd	r22, Z+2	; 0x02
    335a:	73 81       	ldd	r23, Z+3	; 0x03
    335c:	84 81       	ldd	r24, Z+4	; 0x04
    335e:	95 81       	ldd	r25, Z+5	; 0x05
    3360:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <debug_record>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3364:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <waiting_buffer_tail>
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	01 96       	adiw	r24, 0x01	; 1
    336c:	87 70       	andi	r24, 0x07	; 7
    336e:	99 27       	eor	r25, r25
    3370:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <waiting_buffer_tail>
    3374:	90 cf       	rjmp	.-224    	; 0x3296 <action_tapping_process+0x60>
            clear_keyboard();
    3376:	0e 94 57 16 	call	0x2cae	; 0x2cae <clear_keyboard>
    waiting_buffer_head = 0;
    337a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    337e:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <waiting_buffer_tail>
            tapping_key = (keyrecord_t){};
    3382:	e9 eb       	ldi	r30, 0xB9	; 185
    3384:	f1 e0       	ldi	r31, 0x01	; 1
    3386:	86 e0       	ldi	r24, 0x06	; 6
    3388:	df 01       	movw	r26, r30
    338a:	1d 92       	st	X+, r1
    338c:	8a 95       	dec	r24
    338e:	e9 f7       	brne	.-6      	; 0x338a <action_tapping_process+0x154>
    3390:	88 cf       	rjmp	.-240    	; 0x32a2 <action_tapping_process+0x6c>

00003392 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3392:	df 92       	push	r13
    3394:	ef 92       	push	r14
    3396:	ff 92       	push	r15
    3398:	0f 93       	push	r16
    339a:	1f 93       	push	r17
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    33a2:	89 2b       	or	r24, r25
    33a4:	b1 f0       	breq	.+44     	; 0x33d2 <action_macro_play+0x40>
    33a6:	e1 2c       	mov	r14, r1
    33a8:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    33aa:	dd 24       	eor	r13, r13
    33ac:	d3 94       	inc	r13
        switch (MACRO_READ()) {
    33ae:	e8 01       	movw	r28, r16
    33b0:	21 96       	adiw	r28, 0x01	; 1
    33b2:	f8 01       	movw	r30, r16
    33b4:	84 91       	lpm	r24, Z
    33b6:	85 37       	cpi	r24, 0x75	; 117
    33b8:	09 f4       	brne	.+2      	; 0x33bc <action_macro_play+0x2a>
    33ba:	69 c0       	rjmp	.+210    	; 0x348e <action_macro_play+0xfc>
    33bc:	90 f4       	brcc	.+36     	; 0x33e2 <action_macro_play+0x50>
    33be:	84 37       	cpi	r24, 0x74	; 116
    33c0:	08 f0       	brcs	.+2      	; 0x33c4 <action_macro_play+0x32>
    33c2:	57 c0       	rjmp	.+174    	; 0x3472 <action_macro_play+0xe0>
    33c4:	84 30       	cpi	r24, 0x04	; 4
    33c6:	08 f0       	brcs	.+2      	; 0x33ca <action_macro_play+0x38>
    33c8:	6e c0       	rjmp	.+220    	; 0x34a6 <action_macro_play+0x114>
    33ca:	81 30       	cpi	r24, 0x01	; 1
    33cc:	09 f1       	breq	.+66     	; 0x3410 <action_macro_play+0x7e>
    33ce:	82 30       	cpi	r24, 0x02	; 2
    33d0:	d9 f1       	breq	.+118    	; 0x3448 <action_macro_play+0xb6>
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    }
}
    33d2:	df 91       	pop	r29
    33d4:	cf 91       	pop	r28
    33d6:	1f 91       	pop	r17
    33d8:	0f 91       	pop	r16
    33da:	ff 90       	pop	r15
    33dc:	ef 90       	pop	r14
    33de:	df 90       	pop	r13
    33e0:	08 95       	ret
        switch (MACRO_READ()) {
    33e2:	88 37       	cpi	r24, 0x78	; 120
    33e4:	09 f4       	brne	.+2      	; 0x33e8 <action_macro_play+0x56>
    33e6:	5c c0       	rjmp	.+184    	; 0x34a0 <action_macro_play+0x10e>
    33e8:	58 f4       	brcc	.+22     	; 0x3400 <action_macro_play+0x6e>
    33ea:	86 37       	cpi	r24, 0x76	; 118
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <action_macro_play+0x5e>
    33ee:	54 c0       	rjmp	.+168    	; 0x3498 <action_macro_play+0x106>
    33f0:	87 37       	cpi	r24, 0x77	; 119
    33f2:	79 f7       	brne	.-34     	; 0x33d2 <action_macro_play+0x40>
                set_mods(mod_storage);
    33f4:	8e 2d       	mov	r24, r14
    33f6:	0e 94 56 1c 	call	0x38ac	; 0x38ac <set_mods>
                send_keyboard_report();
    33fa:	0e 94 83 1c 	call	0x3906	; 0x3906 <send_keyboard_report>
                break;
    33fe:	1f c0       	rjmp	.+62     	; 0x343e <action_macro_play+0xac>
        switch (MACRO_READ()) {
    3400:	9c e7       	ldi	r25, 0x7C	; 124
    3402:	98 0f       	add	r25, r24
    3404:	90 37       	cpi	r25, 0x70	; 112
    3406:	28 f7       	brcc	.-54     	; 0x33d2 <action_macro_play+0x40>
                unregister_code(macro&0x7F);
    3408:	8f 77       	andi	r24, 0x7F	; 127
    340a:	0e 94 cd 12 	call	0x259a	; 0x259a <unregister_code>
                break;
    340e:	17 c0       	rjmp	.+46     	; 0x343e <action_macro_play+0xac>
                MACRO_READ();
    3410:	0e 5f       	subi	r16, 0xFE	; 254
    3412:	1f 4f       	sbci	r17, 0xFF	; 255
    3414:	fe 01       	movw	r30, r28
    3416:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    3418:	90 e2       	ldi	r25, 0x20	; 32
    341a:	98 0f       	add	r25, r24
    341c:	98 30       	cpi	r25, 0x08	; 8
    341e:	60 f4       	brcc	.+24     	; 0x3438 <action_macro_play+0xa6>
                    add_weak_mods(MOD_BIT(macro));
    3420:	87 70       	andi	r24, 0x07	; 7
    3422:	fd 2d       	mov	r31, r13
    3424:	01 c0       	rjmp	.+2      	; 0x3428 <action_macro_play+0x96>
    3426:	ff 0f       	add	r31, r31
    3428:	8a 95       	dec	r24
    342a:	ea f7       	brpl	.-6      	; 0x3426 <action_macro_play+0x94>
    342c:	8f 2f       	mov	r24, r31
    342e:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <add_weak_mods>
                    send_keyboard_report();
    3432:	0e 94 83 1c 	call	0x3906	; 0x3906 <send_keyboard_report>
    3436:	02 c0       	rjmp	.+4      	; 0x343c <action_macro_play+0xaa>
                    register_code(macro);
    3438:	0e 94 cb 11 	call	0x2396	; 0x2396 <register_code>
                MACRO_READ();
    343c:	e8 01       	movw	r28, r16
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    343e:	8f 2d       	mov	r24, r15
    3440:	81 11       	cpse	r24, r1
    3442:	34 c0       	rjmp	.+104    	; 0x34ac <action_macro_play+0x11a>
    3444:	8e 01       	movw	r16, r28
    3446:	b3 cf       	rjmp	.-154    	; 0x33ae <action_macro_play+0x1c>
                MACRO_READ();
    3448:	0e 5f       	subi	r16, 0xFE	; 254
    344a:	1f 4f       	sbci	r17, 0xFF	; 255
    344c:	fe 01       	movw	r30, r28
    344e:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    3450:	90 e2       	ldi	r25, 0x20	; 32
    3452:	98 0f       	add	r25, r24
    3454:	98 30       	cpi	r25, 0x08	; 8
    3456:	50 f4       	brcc	.+20     	; 0x346c <action_macro_play+0xda>
                    del_weak_mods(MOD_BIT(macro));
    3458:	87 70       	andi	r24, 0x07	; 7
    345a:	fd 2d       	mov	r31, r13
    345c:	01 c0       	rjmp	.+2      	; 0x3460 <action_macro_play+0xce>
    345e:	ff 0f       	add	r31, r31
    3460:	8a 95       	dec	r24
    3462:	ea f7       	brpl	.-6      	; 0x345e <action_macro_play+0xcc>
    3464:	8f 2f       	mov	r24, r31
    3466:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <del_weak_mods>
    346a:	e3 cf       	rjmp	.-58     	; 0x3432 <action_macro_play+0xa0>
                    unregister_code(macro);
    346c:	0e 94 cd 12 	call	0x259a	; 0x259a <unregister_code>
    3470:	e5 cf       	rjmp	.-54     	; 0x343c <action_macro_play+0xaa>
                MACRO_READ();
    3472:	0e 5f       	subi	r16, 0xFE	; 254
    3474:	1f 4f       	sbci	r17, 0xFF	; 255
    3476:	fe 01       	movw	r30, r28
    3478:	c4 91       	lpm	r28, Z
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    347a:	cc 23       	and	r28, r28
    347c:	f9 f2       	breq	.-66     	; 0x343c <action_macro_play+0xaa>
    347e:	8f e9       	ldi	r24, 0x9F	; 159
    3480:	9f e0       	ldi	r25, 0x0F	; 15
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <action_macro_play+0xf0>
    3486:	00 c0       	rjmp	.+0      	; 0x3488 <action_macro_play+0xf6>
    3488:	00 00       	nop
    348a:	c1 50       	subi	r28, 0x01	; 1
    348c:	f6 cf       	rjmp	.-20     	; 0x347a <action_macro_play+0xe8>
                interval = MACRO_READ();
    348e:	0e 5f       	subi	r16, 0xFE	; 254
    3490:	1f 4f       	sbci	r17, 0xFF	; 255
    3492:	fe 01       	movw	r30, r28
    3494:	f4 90       	lpm	r15, Z
    3496:	d2 cf       	rjmp	.-92     	; 0x343c <action_macro_play+0xaa>
                mod_storage = get_mods();
    3498:	0e 94 45 1c 	call	0x388a	; 0x388a <get_mods>
    349c:	e8 2e       	mov	r14, r24
                break;
    349e:	cf cf       	rjmp	.-98     	; 0x343e <action_macro_play+0xac>
                clear_mods();
    34a0:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <clear_mods>
    34a4:	aa cf       	rjmp	.-172    	; 0x33fa <action_macro_play+0x68>
                register_code(macro);
    34a6:	0e 94 cb 11 	call	0x2396	; 0x2396 <register_code>
                break;
    34aa:	c9 cf       	rjmp	.-110    	; 0x343e <action_macro_play+0xac>
    34ac:	ef e9       	ldi	r30, 0x9F	; 159
    34ae:	ff e0       	ldi	r31, 0x0F	; 15
    34b0:	31 97       	sbiw	r30, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <action_macro_play+0x11e>
    34b4:	00 c0       	rjmp	.+0      	; 0x34b6 <action_macro_play+0x124>
    34b6:	00 00       	nop
    34b8:	81 50       	subi	r24, 0x01	; 1
    34ba:	c2 cf       	rjmp	.-124    	; 0x3440 <action_macro_play+0xae>

000034bc <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    34bc:	60 93 c3 01 	sts	0x01C3, r22	; 0x8001c3 <default_layer_state>
    34c0:	70 93 c4 01 	sts	0x01C4, r23	; 0x8001c4 <default_layer_state+0x1>
    34c4:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <default_layer_state+0x2>
    34c8:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    34cc:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    34d0:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <clear_keyboard_but_mods>

000034d4 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    34d4:	60 93 bf 01 	sts	0x01BF, r22	; 0x8001bf <layer_state>
    34d8:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <layer_state+0x1>
    34dc:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <layer_state+0x2>
    34e0:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <layer_state+0x3>
    hook_layer_change(layer_state);
    34e4:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    34e8:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <clear_keyboard_but_mods>

000034ec <default_layer_debug>:
    34ec:	08 95       	ret

000034ee <default_layer_set>:
    default_layer_state_set(state);
    34ee:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <default_layer_state_set>

000034f2 <default_layer_or>:
{
    34f2:	0f 93       	push	r16
    34f4:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    34f6:	00 91 c3 01 	lds	r16, 0x01C3	; 0x8001c3 <default_layer_state>
    34fa:	10 91 c4 01 	lds	r17, 0x01C4	; 0x8001c4 <default_layer_state+0x1>
    34fe:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <default_layer_state+0x2>
    3502:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <default_layer_state+0x3>
    3506:	60 2b       	or	r22, r16
    3508:	71 2b       	or	r23, r17
    350a:	82 2b       	or	r24, r18
    350c:	93 2b       	or	r25, r19
}
    350e:	1f 91       	pop	r17
    3510:	0f 91       	pop	r16
    default_layer_state_set(default_layer_state | state);
    3512:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <default_layer_state_set>

00003516 <default_layer_and>:
{
    3516:	0f 93       	push	r16
    3518:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    351a:	00 91 c3 01 	lds	r16, 0x01C3	; 0x8001c3 <default_layer_state>
    351e:	10 91 c4 01 	lds	r17, 0x01C4	; 0x8001c4 <default_layer_state+0x1>
    3522:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <default_layer_state+0x2>
    3526:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <default_layer_state+0x3>
    352a:	60 23       	and	r22, r16
    352c:	71 23       	and	r23, r17
    352e:	82 23       	and	r24, r18
    3530:	93 23       	and	r25, r19
}
    3532:	1f 91       	pop	r17
    3534:	0f 91       	pop	r16
    default_layer_state_set(default_layer_state & state);
    3536:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <default_layer_state_set>

0000353a <default_layer_xor>:
{
    353a:	0f 93       	push	r16
    353c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    353e:	00 91 c3 01 	lds	r16, 0x01C3	; 0x8001c3 <default_layer_state>
    3542:	10 91 c4 01 	lds	r17, 0x01C4	; 0x8001c4 <default_layer_state+0x1>
    3546:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <default_layer_state+0x2>
    354a:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <default_layer_state+0x3>
    354e:	60 27       	eor	r22, r16
    3550:	71 27       	eor	r23, r17
    3552:	82 27       	eor	r24, r18
    3554:	93 27       	eor	r25, r19
}
    3556:	1f 91       	pop	r17
    3558:	0f 91       	pop	r16
    default_layer_state_set(default_layer_state ^ state);
    355a:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <default_layer_state_set>

0000355e <layer_clear>:
}

void layer_clear(void)
{
    layer_state_set(0);
    355e:	60 e0       	ldi	r22, 0x00	; 0
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	cb 01       	movw	r24, r22
    3564:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <layer_state_set>

00003568 <layer_move>:
}

void layer_move(uint8_t layer)
{
    3568:	0f 93       	push	r16
    356a:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    356c:	41 e0       	ldi	r20, 0x01	; 1
    356e:	50 e0       	ldi	r21, 0x00	; 0
    3570:	60 e0       	ldi	r22, 0x00	; 0
    3572:	70 e0       	ldi	r23, 0x00	; 0
    3574:	8a 01       	movw	r16, r20
    3576:	9b 01       	movw	r18, r22
    3578:	04 c0       	rjmp	.+8      	; 0x3582 <layer_move+0x1a>
    357a:	00 0f       	add	r16, r16
    357c:	11 1f       	adc	r17, r17
    357e:	22 1f       	adc	r18, r18
    3580:	33 1f       	adc	r19, r19
    3582:	8a 95       	dec	r24
    3584:	d2 f7       	brpl	.-12     	; 0x357a <layer_move+0x12>
    3586:	c9 01       	movw	r24, r18
    3588:	b8 01       	movw	r22, r16
}
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
    358e:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <layer_state_set>

00003592 <layer_on>:

void layer_on(uint8_t layer)
{
    3592:	0f 93       	push	r16
    3594:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    3596:	41 e0       	ldi	r20, 0x01	; 1
    3598:	50 e0       	ldi	r21, 0x00	; 0
    359a:	60 e0       	ldi	r22, 0x00	; 0
    359c:	70 e0       	ldi	r23, 0x00	; 0
    359e:	04 c0       	rjmp	.+8      	; 0x35a8 <layer_on+0x16>
    35a0:	44 0f       	add	r20, r20
    35a2:	55 1f       	adc	r21, r21
    35a4:	66 1f       	adc	r22, r22
    35a6:	77 1f       	adc	r23, r23
    35a8:	8a 95       	dec	r24
    35aa:	d2 f7       	brpl	.-12     	; 0x35a0 <layer_on+0xe>
    35ac:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <layer_state>
    35b0:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <layer_state+0x1>
    35b4:	a0 91 c1 01 	lds	r26, 0x01C1	; 0x8001c1 <layer_state+0x2>
    35b8:	b0 91 c2 01 	lds	r27, 0x01C2	; 0x8001c2 <layer_state+0x3>
    35bc:	8a 01       	movw	r16, r20
    35be:	9b 01       	movw	r18, r22
    35c0:	08 2b       	or	r16, r24
    35c2:	19 2b       	or	r17, r25
    35c4:	2a 2b       	or	r18, r26
    35c6:	3b 2b       	or	r19, r27
    35c8:	c9 01       	movw	r24, r18
    35ca:	b8 01       	movw	r22, r16
}
    35cc:	1f 91       	pop	r17
    35ce:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
    35d0:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <layer_state_set>

000035d4 <layer_off>:

void layer_off(uint8_t layer)
{
    35d4:	0f 93       	push	r16
    35d6:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    35d8:	41 e0       	ldi	r20, 0x01	; 1
    35da:	50 e0       	ldi	r21, 0x00	; 0
    35dc:	60 e0       	ldi	r22, 0x00	; 0
    35de:	70 e0       	ldi	r23, 0x00	; 0
    35e0:	04 c0       	rjmp	.+8      	; 0x35ea <layer_off+0x16>
    35e2:	44 0f       	add	r20, r20
    35e4:	55 1f       	adc	r21, r21
    35e6:	66 1f       	adc	r22, r22
    35e8:	77 1f       	adc	r23, r23
    35ea:	8a 95       	dec	r24
    35ec:	d2 f7       	brpl	.-12     	; 0x35e2 <layer_off+0xe>
    35ee:	cb 01       	movw	r24, r22
    35f0:	ba 01       	movw	r22, r20
    35f2:	60 95       	com	r22
    35f4:	70 95       	com	r23
    35f6:	80 95       	com	r24
    35f8:	90 95       	com	r25
    35fa:	00 91 bf 01 	lds	r16, 0x01BF	; 0x8001bf <layer_state>
    35fe:	10 91 c0 01 	lds	r17, 0x01C0	; 0x8001c0 <layer_state+0x1>
    3602:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <layer_state+0x2>
    3606:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <layer_state+0x3>
    360a:	60 23       	and	r22, r16
    360c:	71 23       	and	r23, r17
    360e:	82 23       	and	r24, r18
    3610:	93 23       	and	r25, r19
}
    3612:	1f 91       	pop	r17
    3614:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
    3616:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <layer_state_set>

0000361a <layer_invert>:

void layer_invert(uint8_t layer)
{
    361a:	0f 93       	push	r16
    361c:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    361e:	41 e0       	ldi	r20, 0x01	; 1
    3620:	50 e0       	ldi	r21, 0x00	; 0
    3622:	60 e0       	ldi	r22, 0x00	; 0
    3624:	70 e0       	ldi	r23, 0x00	; 0
    3626:	04 c0       	rjmp	.+8      	; 0x3630 <layer_invert+0x16>
    3628:	44 0f       	add	r20, r20
    362a:	55 1f       	adc	r21, r21
    362c:	66 1f       	adc	r22, r22
    362e:	77 1f       	adc	r23, r23
    3630:	8a 95       	dec	r24
    3632:	d2 f7       	brpl	.-12     	; 0x3628 <layer_invert+0xe>
    3634:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <layer_state>
    3638:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <layer_state+0x1>
    363c:	a0 91 c1 01 	lds	r26, 0x01C1	; 0x8001c1 <layer_state+0x2>
    3640:	b0 91 c2 01 	lds	r27, 0x01C2	; 0x8001c2 <layer_state+0x3>
    3644:	8a 01       	movw	r16, r20
    3646:	9b 01       	movw	r18, r22
    3648:	08 27       	eor	r16, r24
    364a:	19 27       	eor	r17, r25
    364c:	2a 27       	eor	r18, r26
    364e:	3b 27       	eor	r19, r27
    3650:	c9 01       	movw	r24, r18
    3652:	b8 01       	movw	r22, r16
}
    3654:	1f 91       	pop	r17
    3656:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
    3658:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <layer_state_set>

0000365c <layer_or>:

void layer_or(uint32_t state)
{
    365c:	0f 93       	push	r16
    365e:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3660:	00 91 bf 01 	lds	r16, 0x01BF	; 0x8001bf <layer_state>
    3664:	10 91 c0 01 	lds	r17, 0x01C0	; 0x8001c0 <layer_state+0x1>
    3668:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <layer_state+0x2>
    366c:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <layer_state+0x3>
    3670:	60 2b       	or	r22, r16
    3672:	71 2b       	or	r23, r17
    3674:	82 2b       	or	r24, r18
    3676:	93 2b       	or	r25, r19
}
    3678:	1f 91       	pop	r17
    367a:	0f 91       	pop	r16
    layer_state_set(layer_state | state);
    367c:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <layer_state_set>

00003680 <layer_and>:
void layer_and(uint32_t state)
{
    3680:	0f 93       	push	r16
    3682:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3684:	00 91 bf 01 	lds	r16, 0x01BF	; 0x8001bf <layer_state>
    3688:	10 91 c0 01 	lds	r17, 0x01C0	; 0x8001c0 <layer_state+0x1>
    368c:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <layer_state+0x2>
    3690:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <layer_state+0x3>
    3694:	60 23       	and	r22, r16
    3696:	71 23       	and	r23, r17
    3698:	82 23       	and	r24, r18
    369a:	93 23       	and	r25, r19
}
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    layer_state_set(layer_state & state);
    36a0:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <layer_state_set>

000036a4 <layer_xor>:
void layer_xor(uint32_t state)
{
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    36a8:	00 91 bf 01 	lds	r16, 0x01BF	; 0x8001bf <layer_state>
    36ac:	10 91 c0 01 	lds	r17, 0x01C0	; 0x8001c0 <layer_state+0x1>
    36b0:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <layer_state+0x2>
    36b4:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <layer_state+0x3>
    36b8:	60 27       	eor	r22, r16
    36ba:	71 27       	eor	r23, r17
    36bc:	82 27       	eor	r24, r18
    36be:	93 27       	eor	r25, r19
}
    36c0:	1f 91       	pop	r17
    36c2:	0f 91       	pop	r16
    layer_state_set(layer_state ^ state);
    36c4:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <layer_state_set>

000036c8 <layer_debug>:

void layer_debug(void)
{
    36c8:	08 95       	ret

000036ca <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    36ca:	cf 92       	push	r12
    36cc:	df 92       	push	r13
    36ce:	ef 92       	push	r14
    36d0:	ff 92       	push	r15
    36d2:	0f 93       	push	r16
    36d4:	1f 93       	push	r17
    36d6:	cf 93       	push	r28
    36d8:	df 93       	push	r29
    36da:	8c 01       	movw	r16, r24
    action_t action = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    36dc:	c0 90 bf 01 	lds	r12, 0x01BF	; 0x8001bf <layer_state>
    36e0:	d0 90 c0 01 	lds	r13, 0x01C0	; 0x8001c0 <layer_state+0x1>
    36e4:	e0 90 c1 01 	lds	r14, 0x01C1	; 0x8001c1 <layer_state+0x2>
    36e8:	f0 90 c2 01 	lds	r15, 0x01C2	; 0x8001c2 <layer_state+0x3>
    36ec:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <default_layer_state>
    36f0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <default_layer_state+0x1>
    36f4:	a0 91 c5 01 	lds	r26, 0x01C5	; 0x8001c5 <default_layer_state+0x2>
    36f8:	b0 91 c6 01 	lds	r27, 0x01C6	; 0x8001c6 <default_layer_state+0x3>
    36fc:	c8 2a       	or	r12, r24
    36fe:	d9 2a       	or	r13, r25
    3700:	ea 2a       	or	r14, r26
    3702:	fb 2a       	or	r15, r27
    3704:	cf e1       	ldi	r28, 0x1F	; 31
    3706:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3708:	d7 01       	movw	r26, r14
    370a:	c6 01       	movw	r24, r12
    370c:	0c 2e       	mov	r0, r28
    370e:	04 c0       	rjmp	.+8      	; 0x3718 <layer_switch_get_action+0x4e>
    3710:	b6 95       	lsr	r27
    3712:	a7 95       	ror	r26
    3714:	97 95       	ror	r25
    3716:	87 95       	ror	r24
    3718:	0a 94       	dec	r0
    371a:	d2 f7       	brpl	.-12     	; 0x3710 <layer_switch_get_action+0x46>
    371c:	80 ff       	sbrs	r24, 0
    371e:	10 c0       	rjmp	.+32     	; 0x3740 <layer_switch_get_action+0x76>
            action = action_for_key(i, key);
    3720:	b8 01       	movw	r22, r16
    3722:	8c 2f       	mov	r24, r28
    3724:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    3728:	81 30       	cpi	r24, 0x01	; 1
    372a:	91 05       	cpc	r25, r1
    372c:	49 f0       	breq	.+18     	; 0x3740 <layer_switch_get_action+0x76>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    372e:	df 91       	pop	r29
    3730:	cf 91       	pop	r28
    3732:	1f 91       	pop	r17
    3734:	0f 91       	pop	r16
    3736:	ff 90       	pop	r15
    3738:	ef 90       	pop	r14
    373a:	df 90       	pop	r13
    373c:	cf 90       	pop	r12
    373e:	08 95       	ret
    3740:	21 97       	sbiw	r28, 0x01	; 1
    3742:	10 f7       	brcc	.-60     	; 0x3708 <layer_switch_get_action+0x3e>
    action = action_for_key(0, key);
    3744:	b8 01       	movw	r22, r16
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <action_for_key>
    return action;
    374c:	f0 cf       	rjmp	.-32     	; 0x372e <layer_switch_get_action+0x64>

0000374e <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    374e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <keyboard_protocol>
    3752:	99 23       	and	r25, r25
    3754:	61 f1       	breq	.+88     	; 0x37ae <add_key+0x60>
    3756:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    375a:	99 23       	and	r25, r25
    375c:	41 f1       	breq	.+80     	; 0x37ae <add_key+0x60>
    375e:	98 2f       	mov	r25, r24
    3760:	96 95       	lsr	r25
    3762:	96 95       	lsr	r25
    3764:	96 95       	lsr	r25
    3766:	9f 31       	cpi	r25, 0x1F	; 31
    3768:	89 f0       	breq	.+34     	; 0x378c <add_key+0x3e>
    376a:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    376e:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3772:	e9 0f       	add	r30, r25
    3774:	f1 1d       	adc	r31, r1
    3776:	87 70       	andi	r24, 0x07	; 7
    3778:	21 e0       	ldi	r18, 0x01	; 1
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	01 c0       	rjmp	.+2      	; 0x3780 <add_key+0x32>
    377e:	22 0f       	add	r18, r18
    3780:	8a 95       	dec	r24
    3782:	ea f7       	brpl	.-6      	; 0x377e <add_key+0x30>
    3784:	81 81       	ldd	r24, Z+1	; 0x01
    3786:	82 2b       	or	r24, r18
    3788:	81 83       	std	Z+1, r24	; 0x01
    378a:	08 95       	ret
    378c:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <debug_config>
    3790:	90 ff       	sbrs	r25, 0
    3792:	22 c0       	rjmp	.+68     	; 0x37d8 <add_key+0x8a>
    3794:	1f 92       	push	r1
    3796:	8f 93       	push	r24
    3798:	85 e9       	ldi	r24, 0x95	; 149
    379a:	93 e0       	ldi	r25, 0x03	; 3
    379c:	9f 93       	push	r25
    379e:	8f 93       	push	r24
    37a0:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	0f 90       	pop	r0
    37aa:	0f 90       	pop	r0
    37ac:	08 95       	ret
    37ae:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    37b2:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    37b6:	f9 01       	movw	r30, r18
    37b8:	32 96       	adiw	r30, 0x02	; 2
    37ba:	9f ef       	ldi	r25, 0xFF	; 255
    37bc:	40 e0       	ldi	r20, 0x00	; 0
    37be:	51 91       	ld	r21, Z+
    37c0:	85 17       	cp	r24, r21
    37c2:	51 f0       	breq	.+20     	; 0x37d8 <add_key+0x8a>
    37c4:	9f 3f       	cpi	r25, 0xFF	; 255
    37c6:	19 f4       	brne	.+6      	; 0x37ce <add_key+0x80>
    37c8:	51 11       	cpse	r21, r1
    37ca:	01 c0       	rjmp	.+2      	; 0x37ce <add_key+0x80>
    37cc:	94 2f       	mov	r25, r20
    37ce:	4f 5f       	subi	r20, 0xFF	; 255
    37d0:	4e 31       	cpi	r20, 0x1E	; 30
    37d2:	a9 f7       	brne	.-22     	; 0x37be <add_key+0x70>
    37d4:	9f 3f       	cpi	r25, 0xFF	; 255
    37d6:	09 f4       	brne	.+2      	; 0x37da <add_key+0x8c>
    37d8:	08 95       	ret
    37da:	29 0f       	add	r18, r25
    37dc:	31 1d       	adc	r19, r1
    37de:	97 fd       	sbrc	r25, 7
    37e0:	3a 95       	dec	r19
    37e2:	f9 01       	movw	r30, r18
    37e4:	82 83       	std	Z+2, r24	; 0x02
    37e6:	08 95       	ret

000037e8 <del_key>:
    37e8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <keyboard_protocol>
    37ec:	99 23       	and	r25, r25
    37ee:	71 f1       	breq	.+92     	; 0x384c <del_key+0x64>
    37f0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    37f4:	99 23       	and	r25, r25
    37f6:	51 f1       	breq	.+84     	; 0x384c <del_key+0x64>
    37f8:	98 2f       	mov	r25, r24
    37fa:	96 95       	lsr	r25
    37fc:	96 95       	lsr	r25
    37fe:	96 95       	lsr	r25
    3800:	9f 31       	cpi	r25, 0x1F	; 31
    3802:	99 f0       	breq	.+38     	; 0x382a <del_key+0x42>
    3804:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3808:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    380c:	e9 0f       	add	r30, r25
    380e:	f1 1d       	adc	r31, r1
    3810:	28 2f       	mov	r18, r24
    3812:	27 70       	andi	r18, 0x07	; 7
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	01 c0       	rjmp	.+2      	; 0x381c <del_key+0x34>
    381a:	88 0f       	add	r24, r24
    381c:	2a 95       	dec	r18
    381e:	ea f7       	brpl	.-6      	; 0x381a <del_key+0x32>
    3820:	80 95       	com	r24
    3822:	91 81       	ldd	r25, Z+1	; 0x01
    3824:	89 23       	and	r24, r25
    3826:	81 83       	std	Z+1, r24	; 0x01
    3828:	08 95       	ret
    382a:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <debug_config>
    382e:	90 ff       	sbrs	r25, 0
    3830:	1d c0       	rjmp	.+58     	; 0x386c <del_key+0x84>
    3832:	1f 92       	push	r1
    3834:	8f 93       	push	r24
    3836:	87 e7       	ldi	r24, 0x77	; 119
    3838:	93 e0       	ldi	r25, 0x03	; 3
    383a:	9f 93       	push	r25
    383c:	8f 93       	push	r24
    383e:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	08 95       	ret
    384c:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    3850:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    3854:	f9 01       	movw	r30, r18
    3856:	32 96       	adiw	r30, 0x02	; 2
    3858:	20 5e       	subi	r18, 0xE0	; 224
    385a:	3f 4f       	sbci	r19, 0xFF	; 255
    385c:	90 81       	ld	r25, Z
    385e:	89 13       	cpse	r24, r25
    3860:	01 c0       	rjmp	.+2      	; 0x3864 <del_key+0x7c>
    3862:	10 82       	st	Z, r1
    3864:	31 96       	adiw	r30, 0x01	; 1
    3866:	e2 17       	cp	r30, r18
    3868:	f3 07       	cpc	r31, r19
    386a:	c1 f7       	brne	.-16     	; 0x385c <del_key+0x74>
    386c:	08 95       	ret

0000386e <clear_keys>:
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3876:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    387a:	e8 0f       	add	r30, r24
    387c:	f9 1f       	adc	r31, r25
    387e:	10 82       	st	Z, r1
    3880:	01 96       	adiw	r24, 0x01	; 1
    3882:	80 32       	cpi	r24, 0x20	; 32
    3884:	91 05       	cpc	r25, r1
    3886:	a9 f7       	brne	.-22     	; 0x3872 <clear_keys+0x4>
    3888:	08 95       	ret

0000388a <get_mods>:
    388a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <real_mods>
    388e:	08 95       	ret

00003890 <add_mods>:
    3890:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <real_mods>
    3894:	89 2b       	or	r24, r25
    3896:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <real_mods>
    389a:	08 95       	ret

0000389c <del_mods>:
    389c:	98 2f       	mov	r25, r24
    389e:	90 95       	com	r25
    38a0:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <real_mods>
    38a4:	89 23       	and	r24, r25
    38a6:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <real_mods>
    38aa:	08 95       	ret

000038ac <set_mods>:
    38ac:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <real_mods>
    38b0:	08 95       	ret

000038b2 <clear_mods>:
    38b2:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <real_mods>
    38b6:	08 95       	ret

000038b8 <add_weak_mods>:
    38b8:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <weak_mods>
    38bc:	89 2b       	or	r24, r25
    38be:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <weak_mods>
    38c2:	08 95       	ret

000038c4 <del_weak_mods>:
    38c4:	98 2f       	mov	r25, r24
    38c6:	90 95       	com	r25
    38c8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <weak_mods>
    38cc:	89 23       	and	r24, r25
    38ce:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <weak_mods>
    38d2:	08 95       	ret

000038d4 <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    38d4:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <weak_mods>
    38d8:	08 95       	ret

000038da <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    38da:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <oneshot_mods>
    38de:	08 95       	ret

000038e0 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    38e0:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <oneshot_mods>
    38e4:	08 95       	ret

000038e6 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    38e6:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    38ea:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    38ee:	f9 01       	movw	r30, r18
    38f0:	31 96       	adiw	r30, 0x01	; 1
    38f2:	20 5e       	subi	r18, 0xE0	; 224
    38f4:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t cnt = 0;
    38f6:	80 e0       	ldi	r24, 0x00	; 0
        if (keyboard_report->raw[i])
    38f8:	91 91       	ld	r25, Z+
    38fa:	91 11       	cpse	r25, r1
            cnt++;
    38fc:	8f 5f       	subi	r24, 0xFF	; 255
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    38fe:	e2 17       	cp	r30, r18
    3900:	f3 07       	cpc	r31, r19
    3902:	d1 f7       	brne	.-12     	; 0x38f8 <has_anykey+0x12>
    }
    return cnt;
}
    3904:	08 95       	ret

00003906 <send_keyboard_report>:
    keyboard_report->mods  = real_mods;
    3906:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    390a:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    390e:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <real_mods>
    3912:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3914:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3918:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    391c:	80 81       	ld	r24, Z
    391e:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <weak_mods>
    3922:	89 2b       	or	r24, r25
    3924:	80 83       	st	Z, r24
    if (oneshot_mods) {
    3926:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <oneshot_mods>
    392a:	99 23       	and	r25, r25
    392c:	61 f0       	breq	.+24     	; 0x3946 <send_keyboard_report+0x40>
        keyboard_report->mods |= oneshot_mods;
    392e:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3932:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3936:	80 81       	ld	r24, Z
    3938:	89 2b       	or	r24, r25
    393a:	80 83       	st	Z, r24
        if (has_anykey()) {
    393c:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <has_anykey>
    3940:	81 11       	cpse	r24, r1
    oneshot_mods = 0;
    3942:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <oneshot_mods>
    host_keyboard_send(keyboard_report);
    3946:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <keyboard_report>
    394a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <keyboard_report+0x1>
    394e:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <host_keyboard_send>

00003952 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3952:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
    3956:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
    395a:	08 95       	ret

0000395c <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    395c:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	9c 01       	movw	r18, r24
    3962:	22 0f       	add	r18, r18
    3964:	33 1f       	adc	r19, r19
    3966:	22 0f       	add	r18, r18
    3968:	33 1f       	adc	r19, r19
    396a:	2c 7c       	andi	r18, 0xCC	; 204
    396c:	95 95       	asr	r25
    396e:	87 95       	ror	r24
    3970:	95 95       	asr	r25
    3972:	87 95       	ror	r24
    3974:	83 73       	andi	r24, 0x33	; 51
    3976:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	c9 01       	movw	r24, r18
    397c:	88 0f       	add	r24, r24
    397e:	99 1f       	adc	r25, r25
    3980:	8a 7a       	andi	r24, 0xAA	; 170
    3982:	35 95       	asr	r19
    3984:	27 95       	ror	r18
    3986:	25 75       	andi	r18, 0x55	; 85
    return bits;
}
    3988:	82 2b       	or	r24, r18
    398a:	08 95       	ret

0000398c <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    398c:	cf 93       	push	r28
    398e:	df 93       	push	r29
    3990:	d9 2f       	mov	r29, r25
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3992:	0e 94 ae 1c 	call	0x395c	; 0x395c <bitrev>
    3996:	c8 2f       	mov	r28, r24
    3998:	8d 2f       	mov	r24, r29
    399a:	0e 94 ae 1c 	call	0x395c	; 0x395c <bitrev>
    399e:	2c 2f       	mov	r18, r28
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	32 2f       	mov	r19, r18
    39a4:	22 27       	eor	r18, r18
    return bits;
}
    39a6:	a9 01       	movw	r20, r18
    39a8:	48 2b       	or	r20, r24
    39aa:	ca 01       	movw	r24, r20
    39ac:	df 91       	pop	r29
    39ae:	cf 91       	pop	r28
    39b0:	08 95       	ret

000039b2 <hook_keyboard_loop>:
    39b2:	08 95       	ret

000039b4 <hook_matrix_change>:

__attribute__((weak))
void hook_keyboard_loop(void) {}

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	00 d0       	rcall	.+0      	; 0x39ba <hook_matrix_change+0x6>
    39ba:	00 d0       	rcall	.+0      	; 0x39bc <hook_matrix_change+0x8>
    39bc:	1f 92       	push	r1
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	08 95       	ret

000039d2 <hook_default_layer_change>:
    39d2:	08 95       	ret

000039d4 <hook_layer_change>:
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    39d4:	08 95       	ret

000039d6 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    39d6:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <keyboard_set_leds>

000039da <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    39da:	08 95       	ret

000039dc <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    39dc:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_DeviceState>
    39e0:	84 30       	cpi	r24, 0x04	; 4
    39e2:	21 f1       	breq	.+72     	; 0x3a2c <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    39e4:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    39e8:	20 e4       	ldi	r18, 0x40	; 64
    39ea:	88 e1       	ldi	r24, 0x18	; 24
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	f8 94       	cli
    39f2:	a8 95       	wdr
    39f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    39fe:	83 b7       	in	r24, 0x33	; 51
    3a00:	81 7f       	andi	r24, 0xF1	; 241
    3a02:	84 60       	ori	r24, 0x04	; 4
    3a04:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3a06:	83 b7       	in	r24, 0x33	; 51
    3a08:	81 60       	ori	r24, 0x01	; 1
    3a0a:	83 bf       	out	0x33, r24	; 51
    sei();
    3a0c:	78 94       	sei
    sleep_cpu();
    3a0e:	88 95       	sleep
    sleep_disable();
    3a10:	83 b7       	in	r24, 0x33	; 51
    3a12:	8e 7f       	andi	r24, 0xFE	; 254
    3a14:	83 bf       	out	0x33, r24	; 51
    3a16:	0f b6       	in	r0, 0x3f	; 63
    3a18:	f8 94       	cli
    3a1a:	a8 95       	wdr
    3a1c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a20:	88 61       	ori	r24, 0x18	; 24
    3a22:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a26:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a2a:	0f be       	out	0x3f, r0	; 63
    3a2c:	08 95       	ret

00003a2e <suspend_wakeup_condition>:
    power_down(WDTO_15MS);
#endif
}

bool suspend_wakeup_condition(void)
{
    3a2e:	cf 93       	push	r28
    matrix_power_up();
    3a30:	0e 94 84 11 	call	0x2308	; 0x2308 <matrix_power_up>
    matrix_scan();
    3a34:	0e 94 cc 06 	call	0xd98	; 0xd98 <matrix_scan>
    matrix_power_down();
    3a38:	0e 94 85 11 	call	0x230a	; 0x230a <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a3c:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3a3e:	8c 2f       	mov	r24, r28
    3a40:	0e 94 fa 07 	call	0xff4	; 0xff4 <matrix_get_row>
    3a44:	89 2b       	or	r24, r25
    3a46:	31 f4       	brne	.+12     	; 0x3a54 <suspend_wakeup_condition+0x26>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a48:	cf 5f       	subi	r28, 0xFF	; 255
    3a4a:	c5 30       	cpi	r28, 0x05	; 5
    3a4c:	c1 f7       	brne	.-16     	; 0x3a3e <suspend_wakeup_condition+0x10>
    }
    return false;
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
}
    3a50:	cf 91       	pop	r28
    3a52:	08 95       	ret
        if (matrix_get_row(r)) return true;
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	fc cf       	rjmp	.-8      	; 0x3a50 <suspend_wakeup_condition+0x22>

00003a58 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3a58:	0e 94 4e 11 	call	0x229c	; 0x229c <matrix_clear>
    clear_keyboard();
    3a5c:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <clear_keyboard>

00003a60 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3a60:	1f 92       	push	r1
    3a62:	0f 92       	push	r0
    3a64:	0f b6       	in	r0, 0x3f	; 63
    3a66:	0f 92       	push	r0
    3a68:	11 24       	eor	r1, r1
    3a6a:	8f 93       	push	r24
    3a6c:	9f 93       	push	r25
    3a6e:	af 93       	push	r26
    3a70:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3a72:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <wdt_timeout>
    3a76:	81 11       	cpse	r24, r1
    3a78:	13 c0       	rjmp	.+38     	; 0x3aa0 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3a7a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <timer_count>
    3a7e:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <timer_count+0x1>
    3a82:	a0 91 ee 01 	lds	r26, 0x01EE	; 0x8001ee <timer_count+0x2>
    3a86:	b0 91 ef 01 	lds	r27, 0x01EF	; 0x8001ef <timer_count+0x3>
    3a8a:	41 96       	adiw	r24, 0x11	; 17
    3a8c:	a1 1d       	adc	r26, r1
    3a8e:	b1 1d       	adc	r27, r1
    3a90:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <timer_count>
    3a94:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <timer_count+0x1>
    3a98:	a0 93 ee 01 	sts	0x01EE, r26	; 0x8001ee <timer_count+0x2>
    3a9c:	b0 93 ef 01 	sts	0x01EF, r27	; 0x8001ef <timer_count+0x3>
            break;
        default:
            ;
    }
}
    3aa0:	bf 91       	pop	r27
    3aa2:	af 91       	pop	r26
    3aa4:	9f 91       	pop	r25
    3aa6:	8f 91       	pop	r24
    3aa8:	0f 90       	pop	r0
    3aaa:	0f be       	out	0x3f, r0	; 63
    3aac:	0f 90       	pop	r0
    3aae:	1f 90       	pop	r1
    3ab0:	18 95       	reti

00003ab2 <timer_init>:
    uint8_t sreg = SREG;
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
    3ab2:	82 e0       	ldi	r24, 0x02	; 2
    3ab4:	84 bd       	out	0x24, r24	; 36
    3ab6:	93 e0       	ldi	r25, 0x03	; 3
    3ab8:	95 bd       	out	0x25, r25	; 37
    3aba:	9a ef       	ldi	r25, 0xFA	; 250
    3abc:	97 bd       	out	0x27, r25	; 39
    3abe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    3ac2:	08 95       	ret

00003ac4 <timer_read>:
    3ac4:	2f b7       	in	r18, 0x3f	; 63
    3ac6:	f8 94       	cli
    3ac8:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <timer_count>
    3acc:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <timer_count+0x1>
    3ad0:	a0 91 ee 01 	lds	r26, 0x01EE	; 0x8001ee <timer_count+0x2>
    3ad4:	b0 91 ef 01 	lds	r27, 0x01EF	; 0x8001ef <timer_count+0x3>
    3ad8:	2f bf       	out	0x3f, r18	; 63
    3ada:	08 95       	ret

00003adc <timer_read32>:
    3adc:	2f b7       	in	r18, 0x3f	; 63
    3ade:	f8 94       	cli
    3ae0:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <timer_count>
    3ae4:	70 91 ed 01 	lds	r23, 0x01ED	; 0x8001ed <timer_count+0x1>
    3ae8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <timer_count+0x2>
    3aec:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <timer_count+0x3>
    3af0:	2f bf       	out	0x3f, r18	; 63
    3af2:	08 95       	ret

00003af4 <timer_elapsed>:
    3af4:	cf 92       	push	r12
    3af6:	df 92       	push	r13
    3af8:	ef 92       	push	r14
    3afa:	ff 92       	push	r15
    3afc:	0f 93       	push	r16
    3afe:	1f 93       	push	r17
    3b00:	2f b7       	in	r18, 0x3f	; 63
    3b02:	f8 94       	cli
    3b04:	40 91 ec 01 	lds	r20, 0x01EC	; 0x8001ec <timer_count>
    3b08:	50 91 ed 01 	lds	r21, 0x01ED	; 0x8001ed <timer_count+0x1>
    3b0c:	60 91 ee 01 	lds	r22, 0x01EE	; 0x8001ee <timer_count+0x2>
    3b10:	70 91 ef 01 	lds	r23, 0x01EF	; 0x8001ef <timer_count+0x3>
    3b14:	2f bf       	out	0x3f, r18	; 63
    3b16:	6a 01       	movw	r12, r20
    3b18:	7b 01       	movw	r14, r22
    3b1a:	ee 24       	eor	r14, r14
    3b1c:	ff 24       	eor	r15, r15
    3b1e:	8c 01       	movw	r16, r24
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	c0 16       	cp	r12, r16
    3b26:	d1 06       	cpc	r13, r17
    3b28:	e2 06       	cpc	r14, r18
    3b2a:	f3 06       	cpc	r15, r19
    3b2c:	50 f0       	brcs	.+20     	; 0x3b42 <timer_elapsed+0x4e>
    3b2e:	48 1b       	sub	r20, r24
    3b30:	59 0b       	sbc	r21, r25
    3b32:	ca 01       	movw	r24, r20
    3b34:	1f 91       	pop	r17
    3b36:	0f 91       	pop	r16
    3b38:	ff 90       	pop	r15
    3b3a:	ef 90       	pop	r14
    3b3c:	df 90       	pop	r13
    3b3e:	cf 90       	pop	r12
    3b40:	08 95       	ret
    3b42:	41 50       	subi	r20, 0x01	; 1
    3b44:	51 09       	sbc	r21, r1
    3b46:	f3 cf       	rjmp	.-26     	; 0x3b2e <timer_elapsed+0x3a>

00003b48 <__vector_21>:
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3b48:	1f 92       	push	r1
    3b4a:	0f 92       	push	r0
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	0f 92       	push	r0
    3b50:	11 24       	eor	r1, r1
    3b52:	8f 93       	push	r24
    3b54:	9f 93       	push	r25
    3b56:	af 93       	push	r26
    3b58:	bf 93       	push	r27
    timer_count++;
    3b5a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <timer_count>
    3b5e:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <timer_count+0x1>
    3b62:	a0 91 ee 01 	lds	r26, 0x01EE	; 0x8001ee <timer_count+0x2>
    3b66:	b0 91 ef 01 	lds	r27, 0x01EF	; 0x8001ef <timer_count+0x3>
    3b6a:	01 96       	adiw	r24, 0x01	; 1
    3b6c:	a1 1d       	adc	r26, r1
    3b6e:	b1 1d       	adc	r27, r1
    3b70:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <timer_count>
    3b74:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <timer_count+0x1>
    3b78:	a0 93 ee 01 	sts	0x01EE, r26	; 0x8001ee <timer_count+0x2>
    3b7c:	b0 93 ef 01 	sts	0x01EF, r27	; 0x8001ef <timer_count+0x3>
}
    3b80:	bf 91       	pop	r27
    3b82:	af 91       	pop	r26
    3b84:	9f 91       	pop	r25
    3b86:	8f 91       	pop	r24
    3b88:	0f 90       	pop	r0
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	0f 90       	pop	r0
    3b8e:	1f 90       	pop	r1
    3b90:	18 95       	reti

00003b92 <bootloader_jump>:
    USB_Disable();
    3b92:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <USB_Disable>
    cli();
    3b96:	f8 94       	cli
    3b98:	2f ef       	ldi	r18, 0xFF	; 255
    3b9a:	87 ea       	ldi	r24, 0xA7	; 167
    3b9c:	91 e6       	ldi	r25, 0x61	; 97
    3b9e:	21 50       	subi	r18, 0x01	; 1
    3ba0:	80 40       	sbci	r24, 0x00	; 0
    3ba2:	90 40       	sbci	r25, 0x00	; 0
    3ba4:	e1 f7       	brne	.-8      	; 0x3b9e <bootloader_jump+0xc>
    3ba6:	00 c0       	rjmp	.+0      	; 0x3ba8 <bootloader_jump+0x16>
    3ba8:	00 00       	nop
    reset_key = BOOTLOADER_RESET_KEY;
    3baa:	87 e0       	ldi	r24, 0x07	; 7
    3bac:	90 eb       	ldi	r25, 0xB0	; 176
    3bae:	dc 01       	movw	r26, r24
    3bb0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <__bss_end>
    3bb4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <__bss_end+0x1>
    3bb8:	a0 93 0b 02 	sts	0x020B, r26	; 0x80020b <__bss_end+0x2>
    3bbc:	b0 93 0c 02 	sts	0x020C, r27	; 0x80020c <__bss_end+0x3>
		__asm__ __volatile__ (
    3bc0:	9c e0       	ldi	r25, 0x0C	; 12
    3bc2:	88 e1       	ldi	r24, 0x18	; 24
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	a8 95       	wdr
    3bca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3bd4:	ff cf       	rjmp	.-2      	; 0x3bd4 <bootloader_jump+0x42>

00003bd6 <keycode_to_action>:


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3bd6:	8d 3b       	cpi	r24, 0xBD	; 189
    3bd8:	60 f4       	brcc	.+24     	; 0x3bf2 <keycode_to_action+0x1c>
    3bda:	88 3a       	cpi	r24, 0xA8	; 168
    3bdc:	90 f5       	brcc	.+100    	; 0x3c42 <keycode_to_action+0x6c>
    3bde:	85 3a       	cpi	r24, 0xA5	; 165
    3be0:	18 f5       	brcc	.+70     	; 0x3c28 <keycode_to_action+0x52>
    3be2:	84 30       	cpi	r24, 0x04	; 4
    3be4:	f8 f4       	brcc	.+62     	; 0x3c24 <keycode_to_action+0x4e>
    3be6:	81 30       	cpi	r24, 0x01	; 1
    3be8:	09 f4       	brne	.+2      	; 0x3bec <keycode_to_action+0x16>
    3bea:	84 c0       	rjmp	.+264    	; 0x3cf4 <keycode_to_action+0x11e>
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            return (action_t)ACTION_NO;
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	90 e0       	ldi	r25, 0x00	; 0
            break;
    }
    return (action_t)ACTION_NO;
}
    3bf0:	08 95       	ret
    switch (keycode) {
    3bf2:	88 3e       	cpi	r24, 0xE8	; 232
    3bf4:	90 f4       	brcc	.+36     	; 0x3c1a <keycode_to_action+0x44>
    3bf6:	80 3e       	cpi	r24, 0xE0	; 224
    3bf8:	a8 f4       	brcc	.+42     	; 0x3c24 <keycode_to_action+0x4e>
    3bfa:	8f 3b       	cpi	r24, 0xBF	; 191
    3bfc:	b9 f7       	brne	.-18     	; 0x3bec <keycode_to_action+0x16>
            clear_keyboard();
    3bfe:	0e 94 57 16 	call	0x2cae	; 0x2cae <clear_keyboard>
    3c02:	2f ef       	ldi	r18, 0xFF	; 255
    3c04:	80 e7       	ldi	r24, 0x70	; 112
    3c06:	92 e0       	ldi	r25, 0x02	; 2
    3c08:	21 50       	subi	r18, 0x01	; 1
    3c0a:	80 40       	sbci	r24, 0x00	; 0
    3c0c:	90 40       	sbci	r25, 0x00	; 0
    3c0e:	e1 f7       	brne	.-8      	; 0x3c08 <keycode_to_action+0x32>
    3c10:	00 c0       	rjmp	.+0      	; 0x3c12 <keycode_to_action+0x3c>
    3c12:	00 00       	nop
            bootloader_jump(); // not return
    3c14:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <bootloader_jump>
    3c18:	e9 cf       	rjmp	.-46     	; 0x3bec <keycode_to_action+0x16>
    switch (keycode) {
    3c1a:	80 3f       	cpi	r24, 0xF0	; 240
    3c1c:	38 f3       	brcs	.-50     	; 0x3bec <keycode_to_action+0x16>
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
            return (action_t)ACTION_MOUSEKEY(keycode);
    3c20:	90 65       	ori	r25, 0x50	; 80
    3c22:	08 95       	ret
            return (action_t)ACTION_KEY(keycode);
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	08 95       	ret
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c28:	85 3a       	cpi	r24, 0xA5	; 165
    3c2a:	39 f0       	breq	.+14     	; 0x3c3a <keycode_to_action+0x64>
    3c2c:	86 3a       	cpi	r24, 0xA6	; 166
    3c2e:	39 f0       	breq	.+14     	; 0x3c3e <keycode_to_action+0x68>
    3c30:	33 e8       	ldi	r19, 0x83	; 131
    3c32:	20 e4       	ldi	r18, 0x40	; 64
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3c34:	83 2f       	mov	r24, r19
    3c36:	92 2f       	mov	r25, r18
    3c38:	08 95       	ret
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c3a:	31 e8       	ldi	r19, 0x81	; 129
    3c3c:	fa cf       	rjmp	.-12     	; 0x3c32 <keycode_to_action+0x5c>
    3c3e:	32 e8       	ldi	r19, 0x82	; 130
    3c40:	f8 cf       	rjmp	.-16     	; 0x3c32 <keycode_to_action+0x5c>
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3c42:	88 3a       	cpi	r24, 0xA8	; 168
    3c44:	59 f1       	breq	.+86     	; 0x3c9c <keycode_to_action+0xc6>
    3c46:	89 3a       	cpi	r24, 0xA9	; 169
    3c48:	59 f1       	breq	.+86     	; 0x3ca0 <keycode_to_action+0xca>
    3c4a:	8a 3a       	cpi	r24, 0xAA	; 170
    3c4c:	59 f1       	breq	.+86     	; 0x3ca4 <keycode_to_action+0xce>
    3c4e:	8b 3a       	cpi	r24, 0xAB	; 171
    3c50:	59 f1       	breq	.+86     	; 0x3ca8 <keycode_to_action+0xd2>
    3c52:	8c 3a       	cpi	r24, 0xAC	; 172
    3c54:	59 f1       	breq	.+86     	; 0x3cac <keycode_to_action+0xd6>
    3c56:	8d 3a       	cpi	r24, 0xAD	; 173
    3c58:	59 f1       	breq	.+86     	; 0x3cb0 <keycode_to_action+0xda>
    3c5a:	8e 3a       	cpi	r24, 0xAE	; 174
    3c5c:	59 f1       	breq	.+86     	; 0x3cb4 <keycode_to_action+0xde>
    3c5e:	8f 3a       	cpi	r24, 0xAF	; 175
    3c60:	59 f1       	breq	.+86     	; 0x3cb8 <keycode_to_action+0xe2>
    3c62:	81 3b       	cpi	r24, 0xB1	; 177
    3c64:	59 f1       	breq	.+86     	; 0x3cbc <keycode_to_action+0xe6>
    3c66:	80 3b       	cpi	r24, 0xB0	; 176
    3c68:	59 f1       	breq	.+86     	; 0x3cc0 <keycode_to_action+0xea>
    3c6a:	82 3b       	cpi	r24, 0xB2	; 178
    3c6c:	59 f1       	breq	.+86     	; 0x3cc4 <keycode_to_action+0xee>
    3c6e:	83 3b       	cpi	r24, 0xB3	; 179
    3c70:	61 f1       	breq	.+88     	; 0x3cca <keycode_to_action+0xf4>
    3c72:	84 3b       	cpi	r24, 0xB4	; 180
    3c74:	61 f1       	breq	.+88     	; 0x3cce <keycode_to_action+0xf8>
    3c76:	85 3b       	cpi	r24, 0xB5	; 181
    3c78:	61 f1       	breq	.+88     	; 0x3cd2 <keycode_to_action+0xfc>
    3c7a:	86 3b       	cpi	r24, 0xB6	; 182
    3c7c:	61 f1       	breq	.+88     	; 0x3cd6 <keycode_to_action+0x100>
    3c7e:	87 3b       	cpi	r24, 0xB7	; 183
    3c80:	69 f1       	breq	.+90     	; 0x3cdc <keycode_to_action+0x106>
    3c82:	88 3b       	cpi	r24, 0xB8	; 184
    3c84:	69 f1       	breq	.+90     	; 0x3ce0 <keycode_to_action+0x10a>
    3c86:	89 3b       	cpi	r24, 0xB9	; 185
    3c88:	69 f1       	breq	.+90     	; 0x3ce4 <keycode_to_action+0x10e>
    3c8a:	8a 3b       	cpi	r24, 0xBA	; 186
    3c8c:	69 f1       	breq	.+90     	; 0x3ce8 <keycode_to_action+0x112>
    3c8e:	8b 3b       	cpi	r24, 0xBB	; 187
    3c90:	69 f1       	breq	.+90     	; 0x3cec <keycode_to_action+0x116>
    3c92:	8c 3b       	cpi	r24, 0xBC	; 188
    3c94:	69 f1       	breq	.+90     	; 0x3cf0 <keycode_to_action+0x11a>
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	24 e4       	ldi	r18, 0x44	; 68
    3c9a:	cc cf       	rjmp	.-104    	; 0x3c34 <keycode_to_action+0x5e>
    3c9c:	32 ee       	ldi	r19, 0xE2	; 226
    3c9e:	fc cf       	rjmp	.-8      	; 0x3c98 <keycode_to_action+0xc2>
    3ca0:	39 ee       	ldi	r19, 0xE9	; 233
    3ca2:	fa cf       	rjmp	.-12     	; 0x3c98 <keycode_to_action+0xc2>
    3ca4:	3a ee       	ldi	r19, 0xEA	; 234
    3ca6:	f8 cf       	rjmp	.-16     	; 0x3c98 <keycode_to_action+0xc2>
    3ca8:	35 eb       	ldi	r19, 0xB5	; 181
    3caa:	f6 cf       	rjmp	.-20     	; 0x3c98 <keycode_to_action+0xc2>
    3cac:	36 eb       	ldi	r19, 0xB6	; 182
    3cae:	f4 cf       	rjmp	.-24     	; 0x3c98 <keycode_to_action+0xc2>
    3cb0:	33 eb       	ldi	r19, 0xB3	; 179
    3cb2:	f2 cf       	rjmp	.-28     	; 0x3c98 <keycode_to_action+0xc2>
    3cb4:	34 eb       	ldi	r19, 0xB4	; 180
    3cb6:	f0 cf       	rjmp	.-32     	; 0x3c98 <keycode_to_action+0xc2>
    3cb8:	37 eb       	ldi	r19, 0xB7	; 183
    3cba:	ee cf       	rjmp	.-36     	; 0x3c98 <keycode_to_action+0xc2>
    3cbc:	3c ec       	ldi	r19, 0xCC	; 204
    3cbe:	ec cf       	rjmp	.-40     	; 0x3c98 <keycode_to_action+0xc2>
    3cc0:	3d ec       	ldi	r19, 0xCD	; 205
    3cc2:	ea cf       	rjmp	.-44     	; 0x3c98 <keycode_to_action+0xc2>
    3cc4:	33 e8       	ldi	r19, 0x83	; 131
    3cc6:	25 e4       	ldi	r18, 0x45	; 69
    3cc8:	b5 cf       	rjmp	.-150    	; 0x3c34 <keycode_to_action+0x5e>
    3cca:	3a e8       	ldi	r19, 0x8A	; 138
    3ccc:	fc cf       	rjmp	.-8      	; 0x3cc6 <keycode_to_action+0xf0>
    3cce:	32 e9       	ldi	r19, 0x92	; 146
    3cd0:	fa cf       	rjmp	.-12     	; 0x3cc6 <keycode_to_action+0xf0>
    3cd2:	34 e9       	ldi	r19, 0x94	; 148
    3cd4:	f8 cf       	rjmp	.-16     	; 0x3cc6 <keycode_to_action+0xf0>
    3cd6:	31 e2       	ldi	r19, 0x21	; 33
    3cd8:	26 e4       	ldi	r18, 0x46	; 70
    3cda:	ac cf       	rjmp	.-168    	; 0x3c34 <keycode_to_action+0x5e>
    3cdc:	33 e2       	ldi	r19, 0x23	; 35
    3cde:	fc cf       	rjmp	.-8      	; 0x3cd8 <keycode_to_action+0x102>
    3ce0:	34 e2       	ldi	r19, 0x24	; 36
    3ce2:	fa cf       	rjmp	.-12     	; 0x3cd8 <keycode_to_action+0x102>
    3ce4:	35 e2       	ldi	r19, 0x25	; 37
    3ce6:	f8 cf       	rjmp	.-16     	; 0x3cd8 <keycode_to_action+0x102>
    3ce8:	36 e2       	ldi	r19, 0x26	; 38
    3cea:	f6 cf       	rjmp	.-20     	; 0x3cd8 <keycode_to_action+0x102>
    3cec:	37 e2       	ldi	r19, 0x27	; 39
    3cee:	f4 cf       	rjmp	.-24     	; 0x3cd8 <keycode_to_action+0x102>
    3cf0:	3a e2       	ldi	r19, 0x2A	; 42
    3cf2:	f2 cf       	rjmp	.-28     	; 0x3cd8 <keycode_to_action+0x102>
            return (action_t)ACTION_TRANSPARENT;
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	08 95       	ret

00003cfa <action_get_macro>:
}
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	08 95       	ret

00003d00 <action_function>:
{
    3d00:	08 95       	ret

00003d02 <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    3d02:	e6 2f       	mov	r30, r22
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	9e e0       	ldi	r25, 0x0E	; 14
    3d08:	79 9f       	mul	r23, r25
    3d0a:	e0 0d       	add	r30, r0
    3d0c:	f1 1d       	adc	r31, r1
    3d0e:	11 24       	eor	r1, r1
    3d10:	96 e4       	ldi	r25, 0x46	; 70
    3d12:	89 9f       	mul	r24, r25
    3d14:	e0 0d       	add	r30, r0
    3d16:	f1 1d       	adc	r31, r1
    3d18:	11 24       	eor	r1, r1
    3d1a:	e4 55       	subi	r30, 0x54	; 84
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    3d20:	08 95       	ret

00003d22 <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    3d22:	e8 2f       	mov	r30, r24
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	ee 0f       	add	r30, r30
    3d28:	ff 1f       	adc	r31, r31
    3d2a:	e4 5d       	subi	r30, 0xD4	; 212
    3d2c:	f0 40       	sbci	r31, 0x00	; 0
    3d2e:	85 91       	lpm	r24, Z+
    3d30:	94 91       	lpm	r25, Z
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    3d32:	08 95       	ret

00003d34 <action_for_key>:
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3d34:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <keymap_key_to_keycode>
    switch (keycode) {
    3d38:	80 3e       	cpi	r24, 0xE0	; 224
    3d3a:	d8 f4       	brcc	.+54     	; 0x3d72 <action_for_key+0x3e>
    3d3c:	80 3c       	cpi	r24, 0xC0	; 192
    3d3e:	90 f5       	brcc	.+100    	; 0x3da4 <action_for_key+0x70>
    3d40:	81 33       	cpi	r24, 0x31	; 49
    3d42:	09 f4       	brne	.+2      	; 0x3d46 <action_for_key+0x12>
    3d44:	54 c0       	rjmp	.+168    	; 0x3dee <action_for_key+0xba>
    3d46:	48 f4       	brcc	.+18     	; 0x3d5a <action_for_key+0x26>
    3d48:	89 32       	cpi	r24, 0x29	; 41
    3d4a:	09 f4       	brne	.+2      	; 0x3d4e <action_for_key+0x1a>
    3d4c:	4a c0       	rjmp	.+148    	; 0x3de2 <action_for_key+0xae>
    3d4e:	8a 32       	cpi	r24, 0x2A	; 42
    3d50:	09 f4       	brne	.+2      	; 0x3d54 <action_for_key+0x20>
    3d52:	53 c0       	rjmp	.+166    	; 0x3dfa <action_for_key+0xc6>
            return keycode_to_action(keycode);
    3d54:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <keycode_to_action>
}
    3d58:	08 95       	ret
    switch (keycode) {
    3d5a:	89 33       	cpi	r24, 0x39	; 57
    3d5c:	31 f1       	breq	.+76     	; 0x3daa <action_for_key+0x76>
    3d5e:	82 38       	cpi	r24, 0x82	; 130
    3d60:	21 f1       	breq	.+72     	; 0x3daa <action_for_key+0x76>
    3d62:	85 33       	cpi	r24, 0x35	; 53
    3d64:	b9 f7       	brne	.-18     	; 0x3d54 <action_for_key+0x20>
            if (keymap_config.swap_grave_esc) {
    3d66:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3d6a:	85 ff       	sbrs	r24, 5
    3d6c:	3e c0       	rjmp	.+124    	; 0x3dea <action_for_key+0xb6>
                return keycode_to_action(KC_ESC);
    3d6e:	89 e2       	ldi	r24, 0x29	; 41
    3d70:	f1 cf       	rjmp	.-30     	; 0x3d54 <action_for_key+0x20>
    switch (keycode) {
    3d72:	83 3e       	cpi	r24, 0xE3	; 227
    3d74:	41 f1       	breq	.+80     	; 0x3dc6 <action_for_key+0x92>
    3d76:	60 f4       	brcc	.+24     	; 0x3d90 <action_for_key+0x5c>
    3d78:	80 3e       	cpi	r24, 0xE0	; 224
    3d7a:	e9 f0       	breq	.+58     	; 0x3db6 <action_for_key+0x82>
    3d7c:	82 3e       	cpi	r24, 0xE2	; 226
    3d7e:	51 f7       	brne	.-44     	; 0x3d54 <action_for_key+0x20>
            if (keymap_config.swap_lalt_lgui) {
    3d80:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3d84:	82 ff       	sbrs	r24, 2
    3d86:	23 c0       	rjmp	.+70     	; 0x3dce <action_for_key+0x9a>
                if (keymap_config.no_gui) {
    3d88:	84 ff       	sbrs	r24, 4
    3d8a:	1b c0       	rjmp	.+54     	; 0x3dc2 <action_for_key+0x8e>
                    return keycode_to_action(KC_NO);
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	e2 cf       	rjmp	.-60     	; 0x3d54 <action_for_key+0x20>
    switch (keycode) {
    3d90:	86 3e       	cpi	r24, 0xE6	; 230
    3d92:	f9 f0       	breq	.+62     	; 0x3dd2 <action_for_key+0x9e>
    3d94:	87 3e       	cpi	r24, 0xE7	; 231
    3d96:	f1 f6       	brne	.-68     	; 0x3d54 <action_for_key+0x20>
            if (keymap_config.swap_ralt_rgui) {
    3d98:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3d9c:	83 ff       	sbrs	r24, 3
    3d9e:	1d c0       	rjmp	.+58     	; 0x3dda <action_for_key+0xa6>
            return keycode_to_action(KC_RALT);
    3da0:	86 ee       	ldi	r24, 0xE6	; 230
    3da2:	d8 cf       	rjmp	.-80     	; 0x3d54 <action_for_key+0x20>
            return keymap_fn_to_action(keycode);
    3da4:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <keymap_fn_to_action>
    3da8:	08 95       	ret
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3daa:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <keymap_config>
    3dae:	93 70       	andi	r25, 0x03	; 3
    3db0:	89 f2       	breq	.-94     	; 0x3d54 <action_for_key+0x20>
                return keycode_to_action(KC_LCTL);
    3db2:	80 ee       	ldi	r24, 0xE0	; 224
    3db4:	cf cf       	rjmp	.-98     	; 0x3d54 <action_for_key+0x20>
            if (keymap_config.swap_control_capslock) {
    3db6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3dba:	80 ff       	sbrs	r24, 0
    3dbc:	fa cf       	rjmp	.-12     	; 0x3db2 <action_for_key+0x7e>
                return keycode_to_action(KC_CAPSLOCK);
    3dbe:	89 e3       	ldi	r24, 0x39	; 57
    3dc0:	c9 cf       	rjmp	.-110    	; 0x3d54 <action_for_key+0x20>
                return keycode_to_action(KC_LGUI);
    3dc2:	83 ee       	ldi	r24, 0xE3	; 227
    3dc4:	c7 cf       	rjmp	.-114    	; 0x3d54 <action_for_key+0x20>
            if (keymap_config.swap_lalt_lgui) {
    3dc6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3dca:	82 ff       	sbrs	r24, 2
    3dcc:	dd cf       	rjmp	.-70     	; 0x3d88 <action_for_key+0x54>
            return keycode_to_action(KC_LALT);
    3dce:	82 ee       	ldi	r24, 0xE2	; 226
    3dd0:	c1 cf       	rjmp	.-126    	; 0x3d54 <action_for_key+0x20>
            if (keymap_config.swap_ralt_rgui) {
    3dd2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3dd6:	83 ff       	sbrs	r24, 3
    3dd8:	e3 cf       	rjmp	.-58     	; 0x3da0 <action_for_key+0x6c>
            if (keymap_config.no_gui) {
    3dda:	84 fd       	sbrc	r24, 4
    3ddc:	d7 cf       	rjmp	.-82     	; 0x3d8c <action_for_key+0x58>
                return keycode_to_action(KC_RGUI);
    3dde:	87 ee       	ldi	r24, 0xE7	; 231
    3de0:	b9 cf       	rjmp	.-142    	; 0x3d54 <action_for_key+0x20>
            if (keymap_config.swap_grave_esc) {
    3de2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3de6:	85 ff       	sbrs	r24, 5
    3de8:	c2 cf       	rjmp	.-124    	; 0x3d6e <action_for_key+0x3a>
            return keycode_to_action(KC_GRAVE);
    3dea:	85 e3       	ldi	r24, 0x35	; 53
    3dec:	b3 cf       	rjmp	.-154    	; 0x3d54 <action_for_key+0x20>
            if (keymap_config.swap_backslash_backspace) {
    3dee:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3df2:	86 ff       	sbrs	r24, 6
    3df4:	06 c0       	rjmp	.+12     	; 0x3e02 <action_for_key+0xce>
                return keycode_to_action(KC_BSPACE);
    3df6:	8a e2       	ldi	r24, 0x2A	; 42
    3df8:	ad cf       	rjmp	.-166    	; 0x3d54 <action_for_key+0x20>
            if (keymap_config.swap_backslash_backspace) {
    3dfa:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3dfe:	86 ff       	sbrs	r24, 6
    3e00:	fa cf       	rjmp	.-12     	; 0x3df6 <action_for_key+0xc2>
            return keycode_to_action(KC_BSLASH);
    3e02:	81 e3       	ldi	r24, 0x31	; 49
    3e04:	a7 cf       	rjmp	.-178    	; 0x3d54 <action_for_key+0x20>

00003e06 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3e06:	bf 92       	push	r11
    3e08:	cf 92       	push	r12
    3e0a:	df 92       	push	r13
    3e0c:	ef 92       	push	r14
    3e0e:	ff 92       	push	r15
    3e10:	0f 93       	push	r16
    3e12:	1f 93       	push	r17
    3e14:	cf 93       	push	r28
    3e16:	df 93       	push	r29
    3e18:	ec 01       	movw	r28, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e1a:	b1 2c       	mov	r11, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3e1c:	01 e0       	ldi	r16, 0x01	; 1
    3e1e:	10 e0       	ldi	r17, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    3e20:	8b 2d       	mov	r24, r11
    3e22:	0e 94 fa 07 	call	0xff4	; 0xff4 <matrix_get_row>
    3e26:	7c 01       	movw	r14, r24
    3e28:	c1 2c       	mov	r12, r1
    3e2a:	d1 2c       	mov	r13, r1
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3e2c:	c8 01       	movw	r24, r16
    3e2e:	0c 2c       	mov	r0, r12
    3e30:	02 c0       	rjmp	.+4      	; 0x3e36 <scan_key+0x30>
    3e32:	88 0f       	add	r24, r24
    3e34:	99 1f       	adc	r25, r25
    3e36:	0a 94       	dec	r0
    3e38:	e2 f7       	brpl	.-8      	; 0x3e32 <scan_key+0x2c>
    3e3a:	8e 21       	and	r24, r14
    3e3c:	9f 21       	and	r25, r15
    3e3e:	89 2b       	or	r24, r25
    3e40:	f1 f0       	breq	.+60     	; 0x3e7e <scan_key+0x78>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3e42:	6c 2d       	mov	r22, r12
    3e44:	7b 2d       	mov	r23, r11
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <action_for_key>
                if (action.code == code ||
    3e4c:	8c 17       	cp	r24, r28
    3e4e:	9d 07       	cpc	r25, r29
    3e50:	59 f0       	breq	.+22     	; 0x3e68 <scan_key+0x62>
    3e52:	29 2f       	mov	r18, r25
    3e54:	20 7e       	andi	r18, 0xE0	; 224
    3e56:	39 2f       	mov	r19, r25
    3e58:	30 7c       	andi	r19, 0xC0	; 192
    3e5a:	11 f0       	breq	.+4      	; 0x3e60 <scan_key+0x5a>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3e5c:	20 3a       	cpi	r18, 0xA0	; 160
    3e5e:	79 f4       	brne	.+30     	; 0x3e7e <scan_key+0x78>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    3e60:	90 e0       	ldi	r25, 0x00	; 0
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3e62:	c8 17       	cp	r28, r24
    3e64:	d9 07       	cpc	r29, r25
    3e66:	59 f4       	brne	.+22     	; 0x3e7e <scan_key+0x78>
                    return true;
    3e68:	81 e0       	ldi	r24, 0x01	; 1
                }
            }
        }
    }
    return false;
}
    3e6a:	df 91       	pop	r29
    3e6c:	cf 91       	pop	r28
    3e6e:	1f 91       	pop	r17
    3e70:	0f 91       	pop	r16
    3e72:	ff 90       	pop	r15
    3e74:	ef 90       	pop	r14
    3e76:	df 90       	pop	r13
    3e78:	cf 90       	pop	r12
    3e7a:	bf 90       	pop	r11
    3e7c:	08 95       	ret
    3e7e:	8f ef       	ldi	r24, 0xFF	; 255
    3e80:	c8 1a       	sub	r12, r24
    3e82:	d8 0a       	sbc	r13, r24
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3e84:	8e e0       	ldi	r24, 0x0E	; 14
    3e86:	c8 16       	cp	r12, r24
    3e88:	d1 04       	cpc	r13, r1
    3e8a:	81 f6       	brne	.-96     	; 0x3e2c <scan_key+0x26>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e8c:	b3 94       	inc	r11
    3e8e:	85 e0       	ldi	r24, 0x05	; 5
    3e90:	b8 12       	cpse	r11, r24
    3e92:	c6 cf       	rjmp	.-116    	; 0x3e20 <scan_key+0x1a>
    return false;
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	e9 cf       	rjmp	.-46     	; 0x3e6a <scan_key+0x64>

00003e98 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3e98:	cf 93       	push	r28
    3e9a:	df 93       	push	r29
    3e9c:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3e9e:	8c e2       	ldi	r24, 0x2C	; 44
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <scan_key>
    3ea6:	88 23       	and	r24, r24
    3ea8:	29 f0       	breq	.+10     	; 0x3eb4 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3eaa:	ce 01       	movw	r24, r28
}
    3eac:	df 91       	pop	r29
    3eae:	cf 91       	pop	r28
    return scan_key(code);
    3eb0:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <scan_key>
}
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	df 91       	pop	r29
    3eb8:	cf 91       	pop	r28
    3eba:	08 95       	ret

00003ebc <bootmagic>:
{
    3ebc:	cf 93       	push	r28
    if (!eeconfig_is_enabled()) {
    3ebe:	0e 94 c7 20 	call	0x418e	; 0x418e <eeconfig_is_enabled>
    3ec2:	81 11       	cpse	r24, r1
    3ec4:	02 c0       	rjmp	.+4      	; 0x3eca <bootmagic+0xe>
        eeconfig_init();
    3ec6:	0e 94 ad 20 	call	0x415a	; 0x415a <eeconfig_init>
    print("bootmagic scan: ... ");
    3eca:	8a eb       	ldi	r24, 0xBA	; 186
    3ecc:	93 e0       	ldi	r25, 0x03	; 3
    3ece:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    while (scan--) { matrix_scan(); wait_ms(10); }
    3ed2:	c5 e6       	ldi	r28, 0x65	; 101
    3ed4:	c1 50       	subi	r28, 0x01	; 1
    3ed6:	09 f0       	breq	.+2      	; 0x3eda <bootmagic+0x1e>
    3ed8:	08 c1       	rjmp	.+528    	; 0x40ea <bootmagic+0x22e>
    print("done.\n");
    3eda:	83 eb       	ldi	r24, 0xB3	; 179
    3edc:	93 e0       	ldi	r25, 0x03	; 3
    3ede:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3ee2:	89 e2       	ldi	r24, 0x29	; 41
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    3eea:	81 11       	cpse	r24, r1
    3eec:	34 c1       	rjmp	.+616    	; 0x4156 <bootmagic+0x29a>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3eee:	8a e2       	ldi	r24, 0x2A	; 42
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    3ef6:	81 11       	cpse	r24, r1
        eeconfig_init();
    3ef8:	0e 94 ad 20 	call	0x415a	; 0x415a <eeconfig_init>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3efc:	85 e0       	ldi	r24, 0x05	; 5
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    3f04:	81 11       	cpse	r24, r1
        bootloader_jump();
    3f06:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <bootloader_jump>
    hook_bootmagic();
    3f0a:	0e 94 ed 1c 	call	0x39da	; 0x39da <hook_bootmagic>
    debug_config.raw = eeconfig_read_debug();
    3f0e:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <eeconfig_read_debug>
    3f12:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <debug_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3f16:	87 e0       	ldi	r24, 0x07	; 7
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    3f1e:	88 23       	and	r24, r24
    3f20:	91 f0       	breq	.+36     	; 0x3f46 <bootmagic+0x8a>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3f22:	8b e1       	ldi	r24, 0x1B	; 27
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    3f2a:	88 23       	and	r24, r24
    3f2c:	09 f4       	brne	.+2      	; 0x3f30 <bootmagic+0x74>
    3f2e:	e6 c0       	rjmp	.+460    	; 0x40fc <bootmagic+0x240>
            debug_config.matrix = !debug_config.matrix;
    3f30:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    3f34:	81 fb       	bst	r24, 1
    3f36:	99 27       	eor	r25, r25
    3f38:	90 f9       	bld	r25, 0
    3f3a:	21 e0       	ldi	r18, 0x01	; 1
    3f3c:	92 27       	eor	r25, r18
    3f3e:	90 fb       	bst	r25, 0
    3f40:	81 f9       	bld	r24, 1
            debug_config.keyboard = !debug_config.keyboard;
    3f42:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <debug_config>
    eeconfig_write_debug(debug_config.raw);
    3f46:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    3f4a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <eeconfig_write_debug>
    keymap_config.raw = eeconfig_read_keymap();
    3f4e:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <eeconfig_read_keymap>
    3f52:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3f56:	80 ee       	ldi	r24, 0xE0	; 224
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    3f5e:	88 23       	and	r24, r24
    3f60:	41 f0       	breq	.+16     	; 0x3f72 <bootmagic+0xb6>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3f62:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3f66:	98 2f       	mov	r25, r24
    3f68:	90 95       	com	r25
    3f6a:	90 fb       	bst	r25, 0
    3f6c:	80 f9       	bld	r24, 0
    3f6e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3f72:	89 e3       	ldi	r24, 0x39	; 57
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    3f7a:	88 23       	and	r24, r24
    3f7c:	59 f0       	breq	.+22     	; 0x3f94 <bootmagic+0xd8>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3f7e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3f82:	81 fb       	bst	r24, 1
    3f84:	99 27       	eor	r25, r25
    3f86:	90 f9       	bld	r25, 0
    3f88:	21 e0       	ldi	r18, 0x01	; 1
    3f8a:	92 27       	eor	r25, r18
    3f8c:	90 fb       	bst	r25, 0
    3f8e:	81 f9       	bld	r24, 1
    3f90:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3f94:	82 ee       	ldi	r24, 0xE2	; 226
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    3f9c:	88 23       	and	r24, r24
    3f9e:	59 f0       	breq	.+22     	; 0x3fb6 <bootmagic+0xfa>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3fa0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3fa4:	82 fb       	bst	r24, 2
    3fa6:	99 27       	eor	r25, r25
    3fa8:	90 f9       	bld	r25, 0
    3faa:	21 e0       	ldi	r18, 0x01	; 1
    3fac:	92 27       	eor	r25, r18
    3fae:	90 fb       	bst	r25, 0
    3fb0:	82 f9       	bld	r24, 2
    3fb2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3fb6:	86 ee       	ldi	r24, 0xE6	; 230
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    3fbe:	88 23       	and	r24, r24
    3fc0:	59 f0       	breq	.+22     	; 0x3fd8 <bootmagic+0x11c>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3fc2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3fc6:	83 fb       	bst	r24, 3
    3fc8:	99 27       	eor	r25, r25
    3fca:	90 f9       	bld	r25, 0
    3fcc:	21 e0       	ldi	r18, 0x01	; 1
    3fce:	92 27       	eor	r25, r18
    3fd0:	90 fb       	bst	r25, 0
    3fd2:	83 f9       	bld	r24, 3
    3fd4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    3fd8:	83 ee       	ldi	r24, 0xE3	; 227
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    3fe0:	88 23       	and	r24, r24
    3fe2:	59 f0       	breq	.+22     	; 0x3ffa <bootmagic+0x13e>
        keymap_config.no_gui = !keymap_config.no_gui;
    3fe4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    3fe8:	84 fb       	bst	r24, 4
    3fea:	99 27       	eor	r25, r25
    3fec:	90 f9       	bld	r25, 0
    3fee:	21 e0       	ldi	r18, 0x01	; 1
    3ff0:	92 27       	eor	r25, r18
    3ff2:	90 fb       	bst	r25, 0
    3ff4:	84 f9       	bld	r24, 4
    3ff6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    3ffa:	85 e3       	ldi	r24, 0x35	; 53
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    4002:	88 23       	and	r24, r24
    4004:	59 f0       	breq	.+22     	; 0x401c <bootmagic+0x160>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    4006:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    400a:	85 fb       	bst	r24, 5
    400c:	99 27       	eor	r25, r25
    400e:	90 f9       	bld	r25, 0
    4010:	21 e0       	ldi	r18, 0x01	; 1
    4012:	92 27       	eor	r25, r18
    4014:	90 fb       	bst	r25, 0
    4016:	85 f9       	bld	r24, 5
    4018:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    401c:	81 e3       	ldi	r24, 0x31	; 49
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    4024:	88 23       	and	r24, r24
    4026:	59 f0       	breq	.+22     	; 0x403e <bootmagic+0x182>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4028:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    402c:	86 fb       	bst	r24, 6
    402e:	99 27       	eor	r25, r25
    4030:	90 f9       	bld	r25, 0
    4032:	21 e0       	ldi	r18, 0x01	; 1
    4034:	92 27       	eor	r25, r18
    4036:	90 fb       	bst	r25, 0
    4038:	86 f9       	bld	r24, 6
    403a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    403e:	81 e1       	ldi	r24, 0x11	; 17
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    4046:	88 23       	and	r24, r24
    4048:	59 f0       	breq	.+22     	; 0x4060 <bootmagic+0x1a4>
        keymap_config.nkro = !keymap_config.nkro;
    404a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    404e:	87 fb       	bst	r24, 7
    4050:	99 27       	eor	r25, r25
    4052:	90 f9       	bld	r25, 0
    4054:	21 e0       	ldi	r18, 0x01	; 1
    4056:	92 27       	eor	r25, r18
    4058:	90 fb       	bst	r25, 0
    405a:	87 f9       	bld	r24, 7
    405c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <keymap_config>
    eeconfig_write_keymap(keymap_config.raw);
    4060:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    4064:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <eeconfig_write_keymap>
    keyboard_nkro = keymap_config.nkro;
    4068:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <keymap_config>
    406c:	87 fb       	bst	r24, 7
    406e:	88 27       	eor	r24, r24
    4070:	80 f9       	bld	r24, 0
    4072:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <keyboard_nkro>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4076:	87 e2       	ldi	r24, 0x27	; 39
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    407e:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4080:	8e e1       	ldi	r24, 0x1E	; 30
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    4088:	81 11       	cpse	r24, r1
    408a:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    408c:	8f e1       	ldi	r24, 0x1F	; 31
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    4094:	81 11       	cpse	r24, r1
    4096:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4098:	80 e2       	ldi	r24, 0x20	; 32
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    40a0:	81 11       	cpse	r24, r1
    40a2:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    40a4:	81 e2       	ldi	r24, 0x21	; 33
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    40ac:	81 11       	cpse	r24, r1
    40ae:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    40b0:	82 e2       	ldi	r24, 0x22	; 34
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    40b8:	81 11       	cpse	r24, r1
    40ba:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    40bc:	83 e2       	ldi	r24, 0x23	; 35
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    40c4:	81 11       	cpse	r24, r1
    40c6:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    40c8:	84 e2       	ldi	r24, 0x24	; 36
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    40d0:	88 23       	and	r24, r24
    40d2:	d9 f1       	breq	.+118    	; 0x414a <bootmagic+0x28e>
    40d4:	c0 68       	ori	r28, 0x80	; 128
        eeconfig_write_default_layer(default_layer);
    40d6:	8c 2f       	mov	r24, r28
    40d8:	0e 94 df 20 	call	0x41be	; 0x41be <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    40dc:	6c 2f       	mov	r22, r28
        default_layer_set((uint32_t)default_layer);
    40de:	70 e0       	ldi	r23, 0x00	; 0
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	90 e0       	ldi	r25, 0x00	; 0
}
    40e4:	cf 91       	pop	r28
        default_layer_set((uint32_t)default_layer);
    40e6:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <default_layer_set>
    while (scan--) { matrix_scan(); wait_ms(10); }
    40ea:	0e 94 cc 06 	call	0xd98	; 0xd98 <matrix_scan>
    40ee:	8f e3       	ldi	r24, 0x3F	; 63
    40f0:	9c e9       	ldi	r25, 0x9C	; 156
    40f2:	01 97       	sbiw	r24, 0x01	; 1
    40f4:	f1 f7       	brne	.-4      	; 0x40f2 <bootmagic+0x236>
    40f6:	00 c0       	rjmp	.+0      	; 0x40f8 <bootmagic+0x23c>
    40f8:	00 00       	nop
    40fa:	ec ce       	rjmp	.-552    	; 0x3ed4 <bootmagic+0x18>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    40fc:	8e e0       	ldi	r24, 0x0E	; 14
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    4104:	88 23       	and	r24, r24
    4106:	51 f0       	breq	.+20     	; 0x411c <bootmagic+0x260>
            debug_config.keyboard = !debug_config.keyboard;
    4108:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    410c:	82 fb       	bst	r24, 2
    410e:	99 27       	eor	r25, r25
    4110:	90 f9       	bld	r25, 0
    4112:	21 e0       	ldi	r18, 0x01	; 1
    4114:	92 27       	eor	r25, r18
    4116:	90 fb       	bst	r25, 0
    4118:	82 f9       	bld	r24, 2
    411a:	13 cf       	rjmp	.-474    	; 0x3f42 <bootmagic+0x86>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    411c:	80 e1       	ldi	r24, 0x10	; 16
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <bootmagic_scan_key>
    4124:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <debug_config>
    4128:	88 23       	and	r24, r24
    412a:	51 f0       	breq	.+20     	; 0x4140 <bootmagic+0x284>
            debug_config.mouse = !debug_config.mouse;
    412c:	93 fb       	bst	r25, 3
    412e:	88 27       	eor	r24, r24
    4130:	80 f9       	bld	r24, 0
    4132:	21 e0       	ldi	r18, 0x01	; 1
    4134:	82 27       	eor	r24, r18
    4136:	80 fb       	bst	r24, 0
    4138:	93 f9       	bld	r25, 3
            debug_config.enable = !debug_config.enable;
    413a:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <debug_config>
    413e:	03 cf       	rjmp	.-506    	; 0x3f46 <bootmagic+0x8a>
    4140:	89 2f       	mov	r24, r25
    4142:	80 95       	com	r24
    4144:	80 fb       	bst	r24, 0
    4146:	90 f9       	bld	r25, 0
    4148:	f8 cf       	rjmp	.-16     	; 0x413a <bootmagic+0x27e>
    if (default_layer) {
    414a:	c1 11       	cpse	r28, r1
    414c:	c4 cf       	rjmp	.-120    	; 0x40d6 <bootmagic+0x21a>
        default_layer = eeconfig_read_default_layer();
    414e:	0e 94 db 20 	call	0x41b6	; 0x41b6 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4152:	68 2f       	mov	r22, r24
    4154:	c4 cf       	rjmp	.-120    	; 0x40de <bootmagic+0x222>
}
    4156:	cf 91       	pop	r28
    4158:	08 95       	ret

0000415a <eeconfig_init>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    415a:	6d ee       	ldi	r22, 0xED	; 237
    415c:	7e ef       	ldi	r23, 0xFE	; 254
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	0e 94 20 2a 	call	0x5440	; 0x5440 <eeprom_write_word>
    4166:	60 e0       	ldi	r22, 0x00	; 0
    4168:	82 e0       	ldi	r24, 0x02	; 2
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	0e 94 12 2a 	call	0x5424	; 0x5424 <eeprom_write_byte>
    4170:	60 e0       	ldi	r22, 0x00	; 0
    4172:	83 e0       	ldi	r24, 0x03	; 3
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	0e 94 12 2a 	call	0x5424	; 0x5424 <eeprom_write_byte>
    417a:	60 e0       	ldi	r22, 0x00	; 0
    417c:	84 e0       	ldi	r24, 0x04	; 4
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	0e 94 12 2a 	call	0x5424	; 0x5424 <eeprom_write_byte>
    4184:	60 e0       	ldi	r22, 0x00	; 0
    4186:	85 e0       	ldi	r24, 0x05	; 5
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	0c 94 12 2a 	jmp	0x5424	; 0x5424 <eeprom_write_byte>

0000418e <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0e 94 0c 2a 	call	0x5418	; 0x5418 <eeprom_read_word>
    4196:	21 e0       	ldi	r18, 0x01	; 1
    4198:	8d 3e       	cpi	r24, 0xED	; 237
    419a:	9e 4f       	sbci	r25, 0xFE	; 254
    419c:	09 f0       	breq	.+2      	; 0x41a0 <eeconfig_is_enabled+0x12>
    419e:	20 e0       	ldi	r18, 0x00	; 0
}
    41a0:	82 2f       	mov	r24, r18
    41a2:	08 95       	ret

000041a4 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    41a4:	82 e0       	ldi	r24, 0x02	; 2
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <eeprom_read_byte>

000041ac <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    41ac:	68 2f       	mov	r22, r24
    41ae:	82 e0       	ldi	r24, 0x02	; 2
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	0c 94 12 2a 	jmp	0x5424	; 0x5424 <eeprom_write_byte>

000041b6 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    41b6:	83 e0       	ldi	r24, 0x03	; 3
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <eeprom_read_byte>

000041be <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    41be:	68 2f       	mov	r22, r24
    41c0:	83 e0       	ldi	r24, 0x03	; 3
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	0c 94 12 2a 	jmp	0x5424	; 0x5424 <eeprom_write_byte>

000041c8 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    41c8:	84 e0       	ldi	r24, 0x04	; 4
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <eeprom_read_byte>

000041d0 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    41d0:	68 2f       	mov	r22, r24
    41d2:	84 e0       	ldi	r24, 0x04	; 4
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	0c 94 12 2a 	jmp	0x5424	; 0x5424 <eeprom_write_byte>

000041da <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    41da:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mousekey_accel>
    41de:	80 ff       	sbrs	r24, 0
    41e0:	12 c0       	rjmp	.+36     	; 0x4206 <move_unit+0x2c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    41e2:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    41e6:	85 e0       	ldi	r24, 0x05	; 5
    41e8:	68 9f       	mul	r22, r24
    41ea:	b0 01       	movw	r22, r0
    41ec:	11 24       	eor	r1, r1
    41ee:	75 95       	asr	r23
    41f0:	67 95       	ror	r22
    41f2:	75 95       	asr	r23
    41f4:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    41f6:	60 38       	cpi	r22, 0x80	; 128
    41f8:	71 05       	cpc	r23, r1
    41fa:	a8 f5       	brcc	.+106    	; 0x4266 <move_unit+0x8c>
    41fc:	61 15       	cp	r22, r1
    41fe:	71 05       	cpc	r23, r1
    4200:	81 f5       	brne	.+96     	; 0x4262 <move_unit+0x88>
    4202:	81 e0       	ldi	r24, 0x01	; 1
}
    4204:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    4206:	81 ff       	sbrs	r24, 1
    4208:	09 c0       	rjmp	.+18     	; 0x421c <move_unit+0x42>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    420a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    420e:	85 e0       	ldi	r24, 0x05	; 5
    4210:	68 9f       	mul	r22, r24
    4212:	b0 01       	movw	r22, r0
    4214:	11 24       	eor	r1, r1
    4216:	75 95       	asr	r23
    4218:	67 95       	ror	r22
    421a:	ed cf       	rjmp	.-38     	; 0x41f6 <move_unit+0x1c>
    } else if (mousekey_accel & (1<<2)) {
    421c:	82 ff       	sbrs	r24, 2
    421e:	07 c0       	rjmp	.+14     	; 0x422e <move_unit+0x54>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4220:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    4224:	85 e0       	ldi	r24, 0x05	; 5
    4226:	68 9f       	mul	r22, r24
    4228:	b0 01       	movw	r22, r0
    422a:	11 24       	eor	r1, r1
    422c:	e4 cf       	rjmp	.-56     	; 0x41f6 <move_unit+0x1c>
    } else if (mousekey_repeat == 0) {
    422e:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <mousekey_repeat>
    4232:	99 23       	and	r25, r25
    4234:	a1 f0       	breq	.+40     	; 0x425e <move_unit+0x84>
    } else if (mousekey_repeat >= mk_time_to_max) {
    4236:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <mk_time_to_max>
    423a:	96 17       	cp	r25, r22
    423c:	88 f7       	brcc	.-30     	; 0x4220 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    423e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <mk_max_speed>
    4242:	85 e0       	ldi	r24, 0x05	; 5
    4244:	28 9f       	mul	r18, r24
    4246:	90 01       	movw	r18, r0
    4248:	11 24       	eor	r1, r1
    424a:	92 9f       	mul	r25, r18
    424c:	a0 01       	movw	r20, r0
    424e:	93 9f       	mul	r25, r19
    4250:	50 0d       	add	r21, r0
    4252:	11 24       	eor	r1, r1
    4254:	70 e0       	ldi	r23, 0x00	; 0
    4256:	ca 01       	movw	r24, r20
    4258:	0e 94 d6 29 	call	0x53ac	; 0x53ac <__divmodhi4>
    425c:	cc cf       	rjmp	.-104    	; 0x41f6 <move_unit+0x1c>
        unit = MOUSEKEY_MOVE_DELTA;
    425e:	65 e0       	ldi	r22, 0x05	; 5
    4260:	70 e0       	ldi	r23, 0x00	; 0
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4262:	86 2f       	mov	r24, r22
    4264:	08 95       	ret
    4266:	8f e7       	ldi	r24, 0x7F	; 127
    4268:	08 95       	ret

0000426a <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    426a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mousekey_accel>
    426e:	80 ff       	sbrs	r24, 0
    4270:	0c c0       	rjmp	.+24     	; 0x428a <wheel_unit+0x20>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4272:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4276:	70 e0       	ldi	r23, 0x00	; 0
    4278:	75 95       	asr	r23
    427a:	67 95       	ror	r22
    427c:	75 95       	asr	r23
    427e:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4280:	61 15       	cp	r22, r1
    4282:	71 05       	cpc	r23, r1
    4284:	39 f5       	brne	.+78     	; 0x42d4 <wheel_unit+0x6a>
    4286:	81 e0       	ldi	r24, 0x01	; 1
}
    4288:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    428a:	81 ff       	sbrs	r24, 1
    428c:	06 c0       	rjmp	.+12     	; 0x429a <wheel_unit+0x30>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    428e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4292:	70 e0       	ldi	r23, 0x00	; 0
    4294:	75 95       	asr	r23
    4296:	67 95       	ror	r22
    4298:	f3 cf       	rjmp	.-26     	; 0x4280 <wheel_unit+0x16>
    } else if (mousekey_accel & (1<<2)) {
    429a:	82 ff       	sbrs	r24, 2
    429c:	08 c0       	rjmp	.+16     	; 0x42ae <wheel_unit+0x44>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    429e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_max_speed>
    42a2:	70 e0       	ldi	r23, 0x00	; 0
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    42a4:	60 38       	cpi	r22, 0x80	; 128
    42a6:	71 05       	cpc	r23, r1
    42a8:	58 f3       	brcs	.-42     	; 0x4280 <wheel_unit+0x16>
    42aa:	8f e7       	ldi	r24, 0x7F	; 127
    42ac:	08 95       	ret
    } else if (mousekey_repeat == 0) {
    42ae:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <mousekey_repeat>
    42b2:	88 23       	and	r24, r24
    42b4:	69 f0       	breq	.+26     	; 0x42d0 <wheel_unit+0x66>
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    42b6:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    42ba:	86 17       	cp	r24, r22
    42bc:	80 f7       	brcc	.-32     	; 0x429e <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    42be:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <mk_wheel_max_speed>
    42c2:	89 9f       	mul	r24, r25
    42c4:	c0 01       	movw	r24, r0
    42c6:	11 24       	eor	r1, r1
    42c8:	70 e0       	ldi	r23, 0x00	; 0
    42ca:	0e 94 d6 29 	call	0x53ac	; 0x53ac <__divmodhi4>
    42ce:	ea cf       	rjmp	.-44     	; 0x42a4 <wheel_unit+0x3a>
        unit = MOUSEKEY_WHEEL_DELTA;
    42d0:	61 e0       	ldi	r22, 0x01	; 1
    42d2:	70 e0       	ldi	r23, 0x00	; 0
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    42d4:	86 2f       	mov	r24, r22
    42d6:	08 95       	ret

000042d8 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    42d8:	80 3f       	cpi	r24, 0xF0	; 240
    42da:	31 f4       	brne	.+12     	; 0x42e8 <mousekey_on+0x10>
    42dc:	0e 94 ed 20 	call	0x41da	; 0x41da <move_unit>
    42e0:	81 95       	neg	r24
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    42e2:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <mouse_report+0x2>
    42e6:	08 95       	ret
    42e8:	81 3f       	cpi	r24, 0xF1	; 241
    42ea:	19 f4       	brne	.+6      	; 0x42f2 <mousekey_on+0x1a>
    42ec:	0e 94 ed 20 	call	0x41da	; 0x41da <move_unit>
    42f0:	f8 cf       	rjmp	.-16     	; 0x42e2 <mousekey_on+0xa>
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    42f2:	82 3f       	cpi	r24, 0xF2	; 242
    42f4:	31 f4       	brne	.+12     	; 0x4302 <mousekey_on+0x2a>
    42f6:	0e 94 ed 20 	call	0x41da	; 0x41da <move_unit>
    42fa:	81 95       	neg	r24
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    42fc:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <mouse_report+0x1>
    4300:	08 95       	ret
    4302:	83 3f       	cpi	r24, 0xF3	; 243
    4304:	19 f4       	brne	.+6      	; 0x430c <mousekey_on+0x34>
    4306:	0e 94 ed 20 	call	0x41da	; 0x41da <move_unit>
    430a:	f8 cf       	rjmp	.-16     	; 0x42fc <mousekey_on+0x24>
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    430c:	89 3f       	cpi	r24, 0xF9	; 249
    430e:	29 f4       	brne	.+10     	; 0x431a <mousekey_on+0x42>
    4310:	0e 94 35 21 	call	0x426a	; 0x426a <wheel_unit>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4314:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <mouse_report+0x3>
    4318:	08 95       	ret
    431a:	8a 3f       	cpi	r24, 0xFA	; 250
    431c:	21 f4       	brne	.+8      	; 0x4326 <mousekey_on+0x4e>
    431e:	0e 94 35 21 	call	0x426a	; 0x426a <wheel_unit>
    4322:	81 95       	neg	r24
    4324:	f7 cf       	rjmp	.-18     	; 0x4314 <mousekey_on+0x3c>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4326:	8b 3f       	cpi	r24, 0xFB	; 251
    4328:	31 f4       	brne	.+12     	; 0x4336 <mousekey_on+0x5e>
    432a:	0e 94 35 21 	call	0x426a	; 0x426a <wheel_unit>
    432e:	81 95       	neg	r24
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4330:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <mouse_report+0x4>
    4334:	08 95       	ret
    4336:	8c 3f       	cpi	r24, 0xFC	; 252
    4338:	19 f4       	brne	.+6      	; 0x4340 <mousekey_on+0x68>
    433a:	0e 94 35 21 	call	0x426a	; 0x426a <wheel_unit>
    433e:	f8 cf       	rjmp	.-16     	; 0x4330 <mousekey_on+0x58>
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4340:	84 3f       	cpi	r24, 0xF4	; 244
    4342:	31 f4       	brne	.+12     	; 0x4350 <mousekey_on+0x78>
    4344:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report>
    4348:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    434a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <mouse_report>
    434e:	08 95       	ret
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4350:	85 3f       	cpi	r24, 0xF5	; 245
    4352:	21 f4       	brne	.+8      	; 0x435c <mousekey_on+0x84>
    4354:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report>
    4358:	82 60       	ori	r24, 0x02	; 2
    435a:	f7 cf       	rjmp	.-18     	; 0x434a <mousekey_on+0x72>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    435c:	86 3f       	cpi	r24, 0xF6	; 246
    435e:	21 f4       	brne	.+8      	; 0x4368 <mousekey_on+0x90>
    4360:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report>
    4364:	84 60       	ori	r24, 0x04	; 4
    4366:	f1 cf       	rjmp	.-30     	; 0x434a <mousekey_on+0x72>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4368:	87 3f       	cpi	r24, 0xF7	; 247
    436a:	21 f4       	brne	.+8      	; 0x4374 <mousekey_on+0x9c>
    436c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report>
    4370:	88 60       	ori	r24, 0x08	; 8
    4372:	eb cf       	rjmp	.-42     	; 0x434a <mousekey_on+0x72>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4374:	88 3f       	cpi	r24, 0xF8	; 248
    4376:	21 f4       	brne	.+8      	; 0x4380 <mousekey_on+0xa8>
    4378:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report>
    437c:	80 61       	ori	r24, 0x10	; 16
    437e:	e5 cf       	rjmp	.-54     	; 0x434a <mousekey_on+0x72>
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4380:	8d 3f       	cpi	r24, 0xFD	; 253
    4382:	31 f4       	brne	.+12     	; 0x4390 <mousekey_on+0xb8>
    4384:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mousekey_accel>
    4388:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    438a:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <mousekey_accel>
    438e:	08 95       	ret
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4390:	8e 3f       	cpi	r24, 0xFE	; 254
    4392:	21 f4       	brne	.+8      	; 0x439c <mousekey_on+0xc4>
    4394:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mousekey_accel>
    4398:	82 60       	ori	r24, 0x02	; 2
    439a:	f7 cf       	rjmp	.-18     	; 0x438a <mousekey_on+0xb2>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    439c:	8f 3f       	cpi	r24, 0xFF	; 255
    439e:	b9 f7       	brne	.-18     	; 0x438e <mousekey_on+0xb6>
    43a0:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mousekey_accel>
    43a4:	84 60       	ori	r24, 0x04	; 4
    43a6:	f1 cf       	rjmp	.-30     	; 0x438a <mousekey_on+0xb2>

000043a8 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    43a8:	80 3f       	cpi	r24, 0xF0	; 240
    43aa:	c1 f4       	brne	.+48     	; 0x43dc <mousekey_off+0x34>
    43ac:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mouse_report+0x2>
    43b0:	87 fd       	sbrc	r24, 7
    43b2:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <mouse_report+0x2>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    43b6:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <mouse_report+0x1>
    43ba:	81 11       	cpse	r24, r1
    43bc:	0e c0       	rjmp	.+28     	; 0x43da <mousekey_off+0x32>
    43be:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mouse_report+0x2>
    43c2:	81 11       	cpse	r24, r1
    43c4:	0a c0       	rjmp	.+20     	; 0x43da <mousekey_off+0x32>
    43c6:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <mouse_report+0x3>
    43ca:	81 11       	cpse	r24, r1
    43cc:	06 c0       	rjmp	.+12     	; 0x43da <mousekey_off+0x32>
    43ce:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report+0x4>
    43d2:	81 11       	cpse	r24, r1
    43d4:	02 c0       	rjmp	.+4      	; 0x43da <mousekey_off+0x32>
        mousekey_repeat = 0;
    43d6:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <mousekey_repeat>
    43da:	08 95       	ret
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    43dc:	81 3f       	cpi	r24, 0xF1	; 241
    43de:	29 f4       	brne	.+10     	; 0x43ea <mousekey_off+0x42>
    43e0:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mouse_report+0x2>
    43e4:	18 16       	cp	r1, r24
    43e6:	2c f3       	brlt	.-54     	; 0x43b2 <mousekey_off+0xa>
    43e8:	e6 cf       	rjmp	.-52     	; 0x43b6 <mousekey_off+0xe>
    43ea:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <mouse_report+0x1>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    43ee:	82 3f       	cpi	r24, 0xF2	; 242
    43f0:	29 f4       	brne	.+10     	; 0x43fc <mousekey_off+0x54>
    43f2:	97 ff       	sbrs	r25, 7
    43f4:	e0 cf       	rjmp	.-64     	; 0x43b6 <mousekey_off+0xe>
    43f6:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <mouse_report+0x1>
    43fa:	dd cf       	rjmp	.-70     	; 0x43b6 <mousekey_off+0xe>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    43fc:	83 3f       	cpi	r24, 0xF3	; 243
    43fe:	19 f4       	brne	.+6      	; 0x4406 <mousekey_off+0x5e>
    4400:	19 16       	cp	r1, r25
    4402:	cc f3       	brlt	.-14     	; 0x43f6 <mousekey_off+0x4e>
    4404:	d8 cf       	rjmp	.-80     	; 0x43b6 <mousekey_off+0xe>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4406:	89 3f       	cpi	r24, 0xF9	; 249
    4408:	39 f4       	brne	.+14     	; 0x4418 <mousekey_off+0x70>
    440a:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <mouse_report+0x3>
    440e:	18 16       	cp	r1, r24
    4410:	94 f6       	brge	.-92     	; 0x43b6 <mousekey_off+0xe>
    4412:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <mouse_report+0x3>
    4416:	cf cf       	rjmp	.-98     	; 0x43b6 <mousekey_off+0xe>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4418:	8a 3f       	cpi	r24, 0xFA	; 250
    441a:	29 f4       	brne	.+10     	; 0x4426 <mousekey_off+0x7e>
    441c:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <mouse_report+0x3>
    4420:	87 ff       	sbrs	r24, 7
    4422:	c9 cf       	rjmp	.-110    	; 0x43b6 <mousekey_off+0xe>
    4424:	f6 cf       	rjmp	.-20     	; 0x4412 <mousekey_off+0x6a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4426:	8b 3f       	cpi	r24, 0xFB	; 251
    4428:	39 f4       	brne	.+14     	; 0x4438 <mousekey_off+0x90>
    442a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report+0x4>
    442e:	87 ff       	sbrs	r24, 7
    4430:	c2 cf       	rjmp	.-124    	; 0x43b6 <mousekey_off+0xe>
    4432:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <mouse_report+0x4>
    4436:	bf cf       	rjmp	.-130    	; 0x43b6 <mousekey_off+0xe>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4438:	8c 3f       	cpi	r24, 0xFC	; 252
    443a:	29 f4       	brne	.+10     	; 0x4446 <mousekey_off+0x9e>
    443c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report+0x4>
    4440:	18 16       	cp	r1, r24
    4442:	bc f3       	brlt	.-18     	; 0x4432 <mousekey_off+0x8a>
    4444:	b8 cf       	rjmp	.-144    	; 0x43b6 <mousekey_off+0xe>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4446:	84 3f       	cpi	r24, 0xF4	; 244
    4448:	31 f4       	brne	.+12     	; 0x4456 <mousekey_off+0xae>
    444a:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report>
    444e:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4450:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <mouse_report>
    4454:	b0 cf       	rjmp	.-160    	; 0x43b6 <mousekey_off+0xe>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4456:	85 3f       	cpi	r24, 0xF5	; 245
    4458:	21 f4       	brne	.+8      	; 0x4462 <mousekey_off+0xba>
    445a:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report>
    445e:	8d 7f       	andi	r24, 0xFD	; 253
    4460:	f7 cf       	rjmp	.-18     	; 0x4450 <mousekey_off+0xa8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4462:	86 3f       	cpi	r24, 0xF6	; 246
    4464:	21 f4       	brne	.+8      	; 0x446e <mousekey_off+0xc6>
    4466:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report>
    446a:	8b 7f       	andi	r24, 0xFB	; 251
    446c:	f1 cf       	rjmp	.-30     	; 0x4450 <mousekey_off+0xa8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    446e:	87 3f       	cpi	r24, 0xF7	; 247
    4470:	21 f4       	brne	.+8      	; 0x447a <mousekey_off+0xd2>
    4472:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report>
    4476:	87 7f       	andi	r24, 0xF7	; 247
    4478:	eb cf       	rjmp	.-42     	; 0x4450 <mousekey_off+0xa8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    447a:	88 3f       	cpi	r24, 0xF8	; 248
    447c:	21 f4       	brne	.+8      	; 0x4486 <mousekey_off+0xde>
    447e:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report>
    4482:	8f 7e       	andi	r24, 0xEF	; 239
    4484:	e5 cf       	rjmp	.-54     	; 0x4450 <mousekey_off+0xa8>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4486:	8d 3f       	cpi	r24, 0xFD	; 253
    4488:	31 f4       	brne	.+12     	; 0x4496 <mousekey_off+0xee>
    448a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mousekey_accel>
    448e:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4490:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <mousekey_accel>
    4494:	90 cf       	rjmp	.-224    	; 0x43b6 <mousekey_off+0xe>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4496:	8e 3f       	cpi	r24, 0xFE	; 254
    4498:	21 f4       	brne	.+8      	; 0x44a2 <mousekey_off+0xfa>
    449a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mousekey_accel>
    449e:	8d 7f       	andi	r24, 0xFD	; 253
    44a0:	f7 cf       	rjmp	.-18     	; 0x4490 <mousekey_off+0xe8>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    44a2:	8f 3f       	cpi	r24, 0xFF	; 255
    44a4:	09 f0       	breq	.+2      	; 0x44a8 <mousekey_off+0x100>
    44a6:	87 cf       	rjmp	.-242    	; 0x43b6 <mousekey_off+0xe>
    44a8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mousekey_accel>
    44ac:	8b 7f       	andi	r24, 0xFB	; 251
    44ae:	f0 cf       	rjmp	.-32     	; 0x4490 <mousekey_off+0xe8>

000044b0 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    44b0:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    44b4:	83 ff       	sbrs	r24, 3
    44b6:	7e c0       	rjmp	.+252    	; 0x45b4 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    44b8:	86 ef       	ldi	r24, 0xF6	; 246
    44ba:	93 e0       	ldi	r25, 0x03	; 3
    44bc:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    phex(mouse_report.buttons); print("|");
    44c0:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report>
    44c4:	1f 92       	push	r1
    44c6:	8f 93       	push	r24
    44c8:	81 ef       	ldi	r24, 0xF1	; 241
    44ca:	93 e0       	ldi	r25, 0x03	; 3
    44cc:	9f 93       	push	r25
    44ce:	8f 93       	push	r24
    44d0:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    44d4:	8f ee       	ldi	r24, 0xEF	; 239
    44d6:	93 e0       	ldi	r25, 0x03	; 3
    44d8:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print_decs(mouse_report.x); print(" ");
    44dc:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <mouse_report+0x1>
    44e0:	28 2f       	mov	r18, r24
    44e2:	08 2e       	mov	r0, r24
    44e4:	00 0c       	add	r0, r0
    44e6:	33 0b       	sbc	r19, r19
    44e8:	3f 93       	push	r19
    44ea:	8f 93       	push	r24
    44ec:	8c ee       	ldi	r24, 0xEC	; 236
    44ee:	93 e0       	ldi	r25, 0x03	; 3
    44f0:	9f 93       	push	r25
    44f2:	8f 93       	push	r24
    44f4:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    44f8:	8a ee       	ldi	r24, 0xEA	; 234
    44fa:	93 e0       	ldi	r25, 0x03	; 3
    44fc:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print_decs(mouse_report.y); print(" ");
    4500:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mouse_report+0x2>
    4504:	28 2f       	mov	r18, r24
    4506:	08 2e       	mov	r0, r24
    4508:	00 0c       	add	r0, r0
    450a:	33 0b       	sbc	r19, r19
    450c:	3f 93       	push	r19
    450e:	8f 93       	push	r24
    4510:	87 ee       	ldi	r24, 0xE7	; 231
    4512:	93 e0       	ldi	r25, 0x03	; 3
    4514:	9f 93       	push	r25
    4516:	8f 93       	push	r24
    4518:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    451c:	85 ee       	ldi	r24, 0xE5	; 229
    451e:	93 e0       	ldi	r25, 0x03	; 3
    4520:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print_decs(mouse_report.v); print(" ");
    4524:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <mouse_report+0x3>
    4528:	28 2f       	mov	r18, r24
    452a:	08 2e       	mov	r0, r24
    452c:	00 0c       	add	r0, r0
    452e:	33 0b       	sbc	r19, r19
    4530:	3f 93       	push	r19
    4532:	8f 93       	push	r24
    4534:	82 ee       	ldi	r24, 0xE2	; 226
    4536:	93 e0       	ldi	r25, 0x03	; 3
    4538:	9f 93       	push	r25
    453a:	8f 93       	push	r24
    453c:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4540:	80 ee       	ldi	r24, 0xE0	; 224
    4542:	93 e0       	ldi	r25, 0x03	; 3
    4544:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print_decs(mouse_report.h); print("](");
    4548:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report+0x4>
    454c:	28 2f       	mov	r18, r24
    454e:	08 2e       	mov	r0, r24
    4550:	00 0c       	add	r0, r0
    4552:	33 0b       	sbc	r19, r19
    4554:	3f 93       	push	r19
    4556:	8f 93       	push	r24
    4558:	8d ed       	ldi	r24, 0xDD	; 221
    455a:	93 e0       	ldi	r25, 0x03	; 3
    455c:	9f 93       	push	r25
    455e:	8f 93       	push	r24
    4560:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4564:	8a ed       	ldi	r24, 0xDA	; 218
    4566:	93 e0       	ldi	r25, 0x03	; 3
    4568:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print_dec(mousekey_repeat); print("/");
    456c:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <mousekey_repeat>
    4570:	1f 92       	push	r1
    4572:	8f 93       	push	r24
    4574:	87 ed       	ldi	r24, 0xD7	; 215
    4576:	93 e0       	ldi	r25, 0x03	; 3
    4578:	9f 93       	push	r25
    457a:	8f 93       	push	r24
    457c:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4580:	85 ed       	ldi	r24, 0xD5	; 213
    4582:	93 e0       	ldi	r25, 0x03	; 3
    4584:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4588:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mousekey_accel>
    458c:	1f 92       	push	r1
    458e:	8f 93       	push	r24
    4590:	82 ed       	ldi	r24, 0xD2	; 210
    4592:	93 e0       	ldi	r25, 0x03	; 3
    4594:	9f 93       	push	r25
    4596:	8f 93       	push	r24
    4598:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    459c:	8f ec       	ldi	r24, 0xCF	; 207
    459e:	93 e0       	ldi	r25, 0x03	; 3
    45a0:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    45a4:	8d b7       	in	r24, 0x3d	; 61
    45a6:	9e b7       	in	r25, 0x3e	; 62
    45a8:	4c 96       	adiw	r24, 0x1c	; 28
    45aa:	0f b6       	in	r0, 0x3f	; 63
    45ac:	f8 94       	cli
    45ae:	9e bf       	out	0x3e, r25	; 62
    45b0:	0f be       	out	0x3f, r0	; 63
    45b2:	8d bf       	out	0x3d, r24	; 61
    host_mouse_send(&mouse_report);
    45b4:	84 ef       	ldi	r24, 0xF4	; 244
    45b6:	91 e0       	ldi	r25, 0x01	; 1
    45b8:	0e 94 14 10 	call	0x2028	; 0x2028 <host_mouse_send>
    last_timer = timer_read();
    45bc:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <timer_read>
    45c0:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <last_timer+0x1>
    45c4:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <last_timer>
    45c8:	08 95       	ret

000045ca <mousekey_task>:
{
    45ca:	1f 93       	push	r17
    45cc:	cf 93       	push	r28
    45ce:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    45d0:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <last_timer>
    45d4:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <last_timer+0x1>
    45d8:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <timer_elapsed>
    45dc:	ac 01       	movw	r20, r24
    45de:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <mousekey_repeat>
    45e2:	99 23       	and	r25, r25
    45e4:	d1 f0       	breq	.+52     	; 0x461a <mousekey_task+0x50>
    45e6:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <mk_interval>
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	42 17       	cp	r20, r18
    45ee:	53 07       	cpc	r21, r19
    45f0:	80 f0       	brcs	.+32     	; 0x4612 <mousekey_task+0x48>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    45f2:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <mouse_report+0x1>
    45f6:	c0 91 f6 01 	lds	r28, 0x01F6	; 0x8001f6 <mouse_report+0x2>
    45fa:	d0 91 f7 01 	lds	r29, 0x01F7	; 0x8001f7 <mouse_report+0x3>
    45fe:	10 91 f8 01 	lds	r17, 0x01F8	; 0x8001f8 <mouse_report+0x4>
    4602:	81 11       	cpse	r24, r1
    4604:	11 c0       	rjmp	.+34     	; 0x4628 <mousekey_task+0x5e>
    4606:	c1 11       	cpse	r28, r1
    4608:	7f c0       	rjmp	.+254    	; 0x4708 <mousekey_task+0x13e>
    460a:	d1 11       	cpse	r29, r1
    460c:	7d c0       	rjmp	.+250    	; 0x4708 <mousekey_task+0x13e>
    460e:	11 11       	cpse	r17, r1
    4610:	7b c0       	rjmp	.+246    	; 0x4708 <mousekey_task+0x13e>
}
    4612:	df 91       	pop	r29
    4614:	cf 91       	pop	r28
    4616:	1f 91       	pop	r17
    4618:	08 95       	ret
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    461a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <mk_delay>
    461e:	8a e0       	ldi	r24, 0x0A	; 10
    4620:	28 9f       	mul	r18, r24
    4622:	90 01       	movw	r18, r0
    4624:	11 24       	eor	r1, r1
    4626:	e2 cf       	rjmp	.-60     	; 0x45ec <mousekey_task+0x22>
    if (mousekey_repeat != UINT8_MAX)
    4628:	9f 3f       	cpi	r25, 0xFF	; 255
    462a:	19 f0       	breq	.+6      	; 0x4632 <mousekey_task+0x68>
        mousekey_repeat++;
    462c:	9f 5f       	subi	r25, 0xFF	; 255
    462e:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <mousekey_repeat>
    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4632:	18 16       	cp	r1, r24
    4634:	24 f4       	brge	.+8      	; 0x463e <mousekey_task+0x74>
    4636:	0e 94 ed 20 	call	0x41da	; 0x41da <move_unit>
    463a:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    463e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <mouse_report+0x1>
    4642:	87 ff       	sbrs	r24, 7
    4644:	05 c0       	rjmp	.+10     	; 0x4650 <mousekey_task+0x86>
    4646:	0e 94 ed 20 	call	0x41da	; 0x41da <move_unit>
    464a:	81 95       	neg	r24
    464c:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4650:	1c 16       	cp	r1, r28
    4652:	24 f4       	brge	.+8      	; 0x465c <mousekey_task+0x92>
    4654:	0e 94 ed 20 	call	0x41da	; 0x41da <move_unit>
    4658:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    465c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mouse_report+0x2>
    4660:	87 ff       	sbrs	r24, 7
    4662:	05 c0       	rjmp	.+10     	; 0x466e <mousekey_task+0xa4>
    4664:	0e 94 ed 20 	call	0x41da	; 0x41da <move_unit>
    4668:	81 95       	neg	r24
    466a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <mouse_report+0x2>
    if (mouse_report.x && mouse_report.y) {
    466e:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <mouse_report+0x1>
    4672:	66 23       	and	r22, r22
    4674:	31 f1       	breq	.+76     	; 0x46c2 <mousekey_task+0xf8>
    4676:	c0 91 f6 01 	lds	r28, 0x01F6	; 0x8001f6 <mouse_report+0x2>
    467a:	cc 23       	and	r28, r28
    467c:	11 f1       	breq	.+68     	; 0x46c2 <mousekey_task+0xf8>
        mouse_report.x *= 0.7;
    467e:	06 2e       	mov	r0, r22
    4680:	00 0c       	add	r0, r0
    4682:	77 0b       	sbc	r23, r23
    4684:	88 0b       	sbc	r24, r24
    4686:	99 0b       	sbc	r25, r25
    4688:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__floatsisf>
    468c:	23 e3       	ldi	r18, 0x33	; 51
    468e:	33 e3       	ldi	r19, 0x33	; 51
    4690:	43 e3       	ldi	r20, 0x33	; 51
    4692:	5f e3       	ldi	r21, 0x3F	; 63
    4694:	0e 94 35 29 	call	0x526a	; 0x526a <__mulsf3>
    4698:	0e 94 99 28 	call	0x5132	; 0x5132 <__fixsfsi>
    469c:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <mouse_report+0x1>
        mouse_report.y *= 0.7;
    46a0:	6c 2f       	mov	r22, r28
    46a2:	cc 0f       	add	r28, r28
    46a4:	77 0b       	sbc	r23, r23
    46a6:	88 0b       	sbc	r24, r24
    46a8:	99 0b       	sbc	r25, r25
    46aa:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__floatsisf>
    46ae:	23 e3       	ldi	r18, 0x33	; 51
    46b0:	33 e3       	ldi	r19, 0x33	; 51
    46b2:	43 e3       	ldi	r20, 0x33	; 51
    46b4:	5f e3       	ldi	r21, 0x3F	; 63
    46b6:	0e 94 35 29 	call	0x526a	; 0x526a <__mulsf3>
    46ba:	0e 94 99 28 	call	0x5132	; 0x5132 <__fixsfsi>
    46be:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <mouse_report+0x2>
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    46c2:	1d 16       	cp	r1, r29
    46c4:	24 f4       	brge	.+8      	; 0x46ce <mousekey_task+0x104>
    46c6:	0e 94 35 21 	call	0x426a	; 0x426a <wheel_unit>
    46ca:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    46ce:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <mouse_report+0x3>
    46d2:	87 ff       	sbrs	r24, 7
    46d4:	05 c0       	rjmp	.+10     	; 0x46e0 <mousekey_task+0x116>
    46d6:	0e 94 35 21 	call	0x426a	; 0x426a <wheel_unit>
    46da:	81 95       	neg	r24
    46dc:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    46e0:	11 16       	cp	r1, r17
    46e2:	24 f4       	brge	.+8      	; 0x46ec <mousekey_task+0x122>
    46e4:	0e 94 35 21 	call	0x426a	; 0x426a <wheel_unit>
    46e8:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    46ec:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report+0x4>
    46f0:	87 ff       	sbrs	r24, 7
    46f2:	05 c0       	rjmp	.+10     	; 0x46fe <mousekey_task+0x134>
    46f4:	0e 94 35 21 	call	0x426a	; 0x426a <wheel_unit>
    46f8:	81 95       	neg	r24
    46fa:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <mouse_report+0x4>
}
    46fe:	df 91       	pop	r29
    4700:	cf 91       	pop	r28
    4702:	1f 91       	pop	r17
    mousekey_send();
    4704:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <mousekey_send>
    if (mousekey_repeat != UINT8_MAX)
    4708:	9f 3f       	cpi	r25, 0xFF	; 255
    470a:	09 f0       	breq	.+2      	; 0x470e <mousekey_task+0x144>
    470c:	8f cf       	rjmp	.-226    	; 0x462c <mousekey_task+0x62>
    470e:	a0 cf       	rjmp	.-192    	; 0x4650 <mousekey_task+0x86>

00004710 <mousekey_clear>:
    mouse_report = (report_mouse_t){};
    4710:	e4 ef       	ldi	r30, 0xF4	; 244
    4712:	f1 e0       	ldi	r31, 0x01	; 1
    4714:	85 e0       	ldi	r24, 0x05	; 5
    4716:	df 01       	movw	r26, r30
    4718:	1d 92       	st	X+, r1
    471a:	8a 95       	dec	r24
    471c:	e9 f7       	brne	.-6      	; 0x4718 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    471e:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <mousekey_repeat>
    mousekey_accel = 0;
    4722:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <mousekey_accel>
    4726:	08 95       	ret

00004728 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4728:	89 e1       	ldi	r24, 0x19	; 25
    472a:	96 e0       	ldi	r25, 0x06	; 6
    472c:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4730:	1f 92       	push	r1
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	8f 93       	push	r24
    4736:	1f 92       	push	r1
    4738:	85 e0       	ldi	r24, 0x05	; 5
    473a:	8f 93       	push	r24
    473c:	8b ec       	ldi	r24, 0xCB	; 203
    473e:	95 e0       	ldi	r25, 0x05	; 5
    4740:	9f 93       	push	r25
    4742:	8f 93       	push	r24
    4744:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    4748:	0f 90       	pop	r0
    474a:	0f 90       	pop	r0
    474c:	0f 90       	pop	r0
    474e:	0f 90       	pop	r0
    4750:	0f 90       	pop	r0
    4752:	0f 90       	pop	r0
    4754:	08 95       	ret

00004756 <mousekey_param_inc>:
    switch (param) {
    4756:	83 30       	cpi	r24, 0x03	; 3
    4758:	09 f4       	brne	.+2      	; 0x475c <mousekey_param_inc+0x6>
    475a:	45 c0       	rjmp	.+138    	; 0x47e6 <mousekey_param_inc+0x90>
    475c:	28 f4       	brcc	.+10     	; 0x4768 <mousekey_param_inc+0x12>
    475e:	81 30       	cpi	r24, 0x01	; 1
    4760:	61 f0       	breq	.+24     	; 0x477a <mousekey_param_inc+0x24>
    4762:	82 30       	cpi	r24, 0x02	; 2
    4764:	49 f1       	breq	.+82     	; 0x47b8 <mousekey_param_inc+0x62>
    4766:	08 95       	ret
    4768:	85 30       	cpi	r24, 0x05	; 5
    476a:	09 f4       	brne	.+2      	; 0x476e <mousekey_param_inc+0x18>
    476c:	6a c0       	rjmp	.+212    	; 0x4842 <mousekey_param_inc+0xec>
    476e:	08 f4       	brcc	.+2      	; 0x4772 <mousekey_param_inc+0x1c>
    4770:	51 c0       	rjmp	.+162    	; 0x4814 <mousekey_param_inc+0xbe>
    4772:	86 30       	cpi	r24, 0x06	; 6
    4774:	09 f4       	brne	.+2      	; 0x4778 <mousekey_param_inc+0x22>
    4776:	7c c0       	rjmp	.+248    	; 0x4870 <mousekey_param_inc+0x11a>
    4778:	08 95       	ret
            if (mk_delay + inc < UINT8_MAX)
    477a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    477e:	26 2f       	mov	r18, r22
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	28 0f       	add	r18, r24
    4784:	31 1d       	adc	r19, r1
    4786:	2f 3f       	cpi	r18, 0xFF	; 255
    4788:	31 05       	cpc	r19, r1
    478a:	94 f4       	brge	.+36     	; 0x47b0 <mousekey_param_inc+0x5a>
                mk_delay += inc;
    478c:	68 0f       	add	r22, r24
    478e:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4792:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    4796:	1f 92       	push	r1
    4798:	8f 93       	push	r24
    479a:	84 e0       	ldi	r24, 0x04	; 4
    479c:	95 e0       	ldi	r25, 0x05	; 5
            PRINT_SET_VAL(mk_wheel_time_to_max);
    479e:	9f 93       	push	r25
    47a0:	8f 93       	push	r24
    47a2:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
            break;
    47a6:	0f 90       	pop	r0
    47a8:	0f 90       	pop	r0
    47aa:	0f 90       	pop	r0
    47ac:	0f 90       	pop	r0
    47ae:	08 95       	ret
                mk_delay = UINT8_MAX;
    47b0:	8f ef       	ldi	r24, 0xFF	; 255
    47b2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_delay>
    47b6:	ed cf       	rjmp	.-38     	; 0x4792 <mousekey_param_inc+0x3c>
            if (mk_interval + inc < UINT8_MAX)
    47b8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    47bc:	26 2f       	mov	r18, r22
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	28 0f       	add	r18, r24
    47c2:	31 1d       	adc	r19, r1
    47c4:	2f 3f       	cpi	r18, 0xFF	; 255
    47c6:	31 05       	cpc	r19, r1
    47c8:	54 f4       	brge	.+20     	; 0x47de <mousekey_param_inc+0x88>
                mk_interval += inc;
    47ca:	68 0f       	add	r22, r24
    47cc:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    47d0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    47d4:	1f 92       	push	r1
    47d6:	8f 93       	push	r24
    47d8:	82 ef       	ldi	r24, 0xF2	; 242
    47da:	94 e0       	ldi	r25, 0x04	; 4
    47dc:	e0 cf       	rjmp	.-64     	; 0x479e <mousekey_param_inc+0x48>
                mk_interval = UINT8_MAX;
    47de:	8f ef       	ldi	r24, 0xFF	; 255
    47e0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_interval>
    47e4:	f5 cf       	rjmp	.-22     	; 0x47d0 <mousekey_param_inc+0x7a>
            if (mk_max_speed + inc < UINT8_MAX)
    47e6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    47ea:	26 2f       	mov	r18, r22
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	28 0f       	add	r18, r24
    47f0:	31 1d       	adc	r19, r1
    47f2:	2f 3f       	cpi	r18, 0xFF	; 255
    47f4:	31 05       	cpc	r19, r1
    47f6:	54 f4       	brge	.+20     	; 0x480c <mousekey_param_inc+0xb6>
                mk_max_speed += inc;
    47f8:	68 0f       	add	r22, r24
    47fa:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    47fe:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4802:	1f 92       	push	r1
    4804:	8f 93       	push	r24
    4806:	8f ed       	ldi	r24, 0xDF	; 223
    4808:	94 e0       	ldi	r25, 0x04	; 4
    480a:	c9 cf       	rjmp	.-110    	; 0x479e <mousekey_param_inc+0x48>
                mk_max_speed = UINT8_MAX;
    480c:	8f ef       	ldi	r24, 0xFF	; 255
    480e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_max_speed>
    4812:	f5 cf       	rjmp	.-22     	; 0x47fe <mousekey_param_inc+0xa8>
            if (mk_time_to_max + inc < UINT8_MAX)
    4814:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4818:	26 2f       	mov	r18, r22
    481a:	30 e0       	ldi	r19, 0x00	; 0
    481c:	28 0f       	add	r18, r24
    481e:	31 1d       	adc	r19, r1
    4820:	2f 3f       	cpi	r18, 0xFF	; 255
    4822:	31 05       	cpc	r19, r1
    4824:	54 f4       	brge	.+20     	; 0x483a <mousekey_param_inc+0xe4>
                mk_time_to_max += inc;
    4826:	68 0f       	add	r22, r24
    4828:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    482c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4830:	1f 92       	push	r1
    4832:	8f 93       	push	r24
    4834:	8a ec       	ldi	r24, 0xCA	; 202
    4836:	94 e0       	ldi	r25, 0x04	; 4
    4838:	b2 cf       	rjmp	.-156    	; 0x479e <mousekey_param_inc+0x48>
                mk_time_to_max = UINT8_MAX;
    483a:	8f ef       	ldi	r24, 0xFF	; 255
    483c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_time_to_max>
    4840:	f5 cf       	rjmp	.-22     	; 0x482c <mousekey_param_inc+0xd6>
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4842:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4846:	26 2f       	mov	r18, r22
    4848:	30 e0       	ldi	r19, 0x00	; 0
    484a:	28 0f       	add	r18, r24
    484c:	31 1d       	adc	r19, r1
    484e:	2f 3f       	cpi	r18, 0xFF	; 255
    4850:	31 05       	cpc	r19, r1
    4852:	54 f4       	brge	.+20     	; 0x4868 <mousekey_param_inc+0x112>
                mk_wheel_max_speed += inc;
    4854:	68 0f       	add	r22, r24
    4856:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    485a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    485e:	1f 92       	push	r1
    4860:	8f 93       	push	r24
    4862:	81 eb       	ldi	r24, 0xB1	; 177
    4864:	94 e0       	ldi	r25, 0x04	; 4
    4866:	9b cf       	rjmp	.-202    	; 0x479e <mousekey_param_inc+0x48>
                mk_wheel_max_speed = UINT8_MAX;
    4868:	8f ef       	ldi	r24, 0xFF	; 255
    486a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_max_speed>
    486e:	f5 cf       	rjmp	.-22     	; 0x485a <mousekey_param_inc+0x104>
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4870:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4874:	86 2f       	mov	r24, r22
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	82 0f       	add	r24, r18
    487a:	91 1d       	adc	r25, r1
    487c:	8f 3f       	cpi	r24, 0xFF	; 255
    487e:	91 05       	cpc	r25, r1
    4880:	54 f4       	brge	.+20     	; 0x4896 <mousekey_param_inc+0x140>
                mk_wheel_time_to_max += inc;
    4882:	62 0f       	add	r22, r18
    4884:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4888:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    488c:	1f 92       	push	r1
    488e:	8f 93       	push	r24
    4890:	86 e9       	ldi	r24, 0x96	; 150
    4892:	94 e0       	ldi	r25, 0x04	; 4
    4894:	84 cf       	rjmp	.-248    	; 0x479e <mousekey_param_inc+0x48>
                mk_wheel_time_to_max = UINT8_MAX;
    4896:	8f ef       	ldi	r24, 0xFF	; 255
    4898:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_time_to_max>
    489c:	f5 cf       	rjmp	.-22     	; 0x4888 <mousekey_param_inc+0x132>

0000489e <mousekey_param_dec>:
    switch (param) {
    489e:	83 30       	cpi	r24, 0x03	; 3
    48a0:	c9 f1       	breq	.+114    	; 0x4914 <mousekey_param_dec+0x76>
    48a2:	28 f4       	brcc	.+10     	; 0x48ae <mousekey_param_dec+0x10>
    48a4:	81 30       	cpi	r24, 0x01	; 1
    48a6:	61 f0       	breq	.+24     	; 0x48c0 <mousekey_param_dec+0x22>
    48a8:	82 30       	cpi	r24, 0x02	; 2
    48aa:	19 f1       	breq	.+70     	; 0x48f2 <mousekey_param_dec+0x54>
    48ac:	08 95       	ret
    48ae:	85 30       	cpi	r24, 0x05	; 5
    48b0:	09 f4       	brne	.+2      	; 0x48b4 <mousekey_param_dec+0x16>
    48b2:	52 c0       	rjmp	.+164    	; 0x4958 <mousekey_param_dec+0xba>
    48b4:	08 f4       	brcc	.+2      	; 0x48b8 <mousekey_param_dec+0x1a>
    48b6:	3f c0       	rjmp	.+126    	; 0x4936 <mousekey_param_dec+0x98>
    48b8:	86 30       	cpi	r24, 0x06	; 6
    48ba:	09 f4       	brne	.+2      	; 0x48be <mousekey_param_dec+0x20>
    48bc:	5e c0       	rjmp	.+188    	; 0x497a <mousekey_param_dec+0xdc>
    48be:	08 95       	ret
            if (mk_delay > dec)
    48c0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    48c4:	68 17       	cp	r22, r24
    48c6:	90 f4       	brcc	.+36     	; 0x48ec <mousekey_param_dec+0x4e>
                mk_delay -= dec;
    48c8:	86 1b       	sub	r24, r22
    48ca:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    48ce:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    48d2:	1f 92       	push	r1
    48d4:	8f 93       	push	r24
    48d6:	87 e8       	ldi	r24, 0x87	; 135
    48d8:	94 e0       	ldi	r25, 0x04	; 4
            PRINT_SET_VAL(mk_wheel_time_to_max);
    48da:	9f 93       	push	r25
    48dc:	8f 93       	push	r24
    48de:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
            break;
    48e2:	0f 90       	pop	r0
    48e4:	0f 90       	pop	r0
    48e6:	0f 90       	pop	r0
    48e8:	0f 90       	pop	r0
    48ea:	08 95       	ret
                mk_delay = 0;
    48ec:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mk_delay>
    48f0:	ee cf       	rjmp	.-36     	; 0x48ce <mousekey_param_dec+0x30>
            if (mk_interval > dec)
    48f2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    48f6:	68 17       	cp	r22, r24
    48f8:	50 f4       	brcc	.+20     	; 0x490e <mousekey_param_dec+0x70>
                mk_interval -= dec;
    48fa:	86 1b       	sub	r24, r22
    48fc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4900:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    4904:	1f 92       	push	r1
    4906:	8f 93       	push	r24
    4908:	85 e7       	ldi	r24, 0x75	; 117
    490a:	94 e0       	ldi	r25, 0x04	; 4
    490c:	e6 cf       	rjmp	.-52     	; 0x48da <mousekey_param_dec+0x3c>
                mk_interval = 0;
    490e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mk_interval>
    4912:	f6 cf       	rjmp	.-20     	; 0x4900 <mousekey_param_dec+0x62>
            if (mk_max_speed > dec)
    4914:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4918:	68 17       	cp	r22, r24
    491a:	50 f4       	brcc	.+20     	; 0x4930 <mousekey_param_dec+0x92>
                mk_max_speed -= dec;
    491c:	86 1b       	sub	r24, r22
    491e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4922:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4926:	1f 92       	push	r1
    4928:	8f 93       	push	r24
    492a:	82 e6       	ldi	r24, 0x62	; 98
    492c:	94 e0       	ldi	r25, 0x04	; 4
    492e:	d5 cf       	rjmp	.-86     	; 0x48da <mousekey_param_dec+0x3c>
                mk_max_speed = 0;
    4930:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <mk_max_speed>
    4934:	f6 cf       	rjmp	.-20     	; 0x4922 <mousekey_param_dec+0x84>
            if (mk_time_to_max > dec)
    4936:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    493a:	68 17       	cp	r22, r24
    493c:	50 f4       	brcc	.+20     	; 0x4952 <mousekey_param_dec+0xb4>
                mk_time_to_max -= dec;
    493e:	86 1b       	sub	r24, r22
    4940:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4944:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4948:	1f 92       	push	r1
    494a:	8f 93       	push	r24
    494c:	8d e4       	ldi	r24, 0x4D	; 77
    494e:	94 e0       	ldi	r25, 0x04	; 4
    4950:	c4 cf       	rjmp	.-120    	; 0x48da <mousekey_param_dec+0x3c>
                mk_time_to_max = 0;
    4952:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <mk_time_to_max>
    4956:	f6 cf       	rjmp	.-20     	; 0x4944 <mousekey_param_dec+0xa6>
            if (mk_wheel_max_speed > dec)
    4958:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    495c:	68 17       	cp	r22, r24
    495e:	50 f4       	brcc	.+20     	; 0x4974 <mousekey_param_dec+0xd6>
                mk_wheel_max_speed -= dec;
    4960:	86 1b       	sub	r24, r22
    4962:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4966:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    496a:	1f 92       	push	r1
    496c:	8f 93       	push	r24
    496e:	84 e3       	ldi	r24, 0x34	; 52
    4970:	94 e0       	ldi	r25, 0x04	; 4
    4972:	b3 cf       	rjmp	.-154    	; 0x48da <mousekey_param_dec+0x3c>
                mk_wheel_max_speed = 0;
    4974:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <mk_wheel_max_speed>
    4978:	f6 cf       	rjmp	.-20     	; 0x4966 <mousekey_param_dec+0xc8>
            if (mk_wheel_time_to_max > dec)
    497a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    497e:	68 17       	cp	r22, r24
    4980:	50 f4       	brcc	.+20     	; 0x4996 <mousekey_param_dec+0xf8>
                mk_wheel_time_to_max -= dec;
    4982:	86 1b       	sub	r24, r22
    4984:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4988:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    498c:	1f 92       	push	r1
    498e:	8f 93       	push	r24
    4990:	89 e1       	ldi	r24, 0x19	; 25
    4992:	94 e0       	ldi	r25, 0x04	; 4
    4994:	a2 cf       	rjmp	.-188    	; 0x48da <mousekey_param_dec+0x3c>
                mk_wheel_time_to_max = 0;
    4996:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <mk_wheel_time_to_max>
    499a:	f6 cf       	rjmp	.-20     	; 0x4988 <mousekey_param_dec+0xea>

0000499c <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    499c:	cf 93       	push	r28
    499e:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    49a0:	1f 92       	push	r1
    49a2:	8f 93       	push	r24
    49a4:	8e e1       	ldi	r24, 0x1E	; 30
    49a6:	97 e0       	ldi	r25, 0x07	; 7
    49a8:	9f 93       	push	r25
    49aa:	8f 93       	push	r24
    49ac:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    default_layer_set(1UL<<layer);
    49b0:	61 e0       	ldi	r22, 0x01	; 1
    49b2:	70 e0       	ldi	r23, 0x00	; 0
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	04 c0       	rjmp	.+8      	; 0x49c2 <switch_default_layer+0x26>
    49ba:	66 0f       	add	r22, r22
    49bc:	77 1f       	adc	r23, r23
    49be:	88 1f       	adc	r24, r24
    49c0:	99 1f       	adc	r25, r25
    49c2:	ca 95       	dec	r28
    49c4:	d2 f7       	brpl	.-12     	; 0x49ba <switch_default_layer+0x1e>
    49c6:	0e 94 77 1a 	call	0x34ee	; 0x34ee <default_layer_set>
    clear_keyboard();
    49ca:	0f 90       	pop	r0
    49cc:	0f 90       	pop	r0
    49ce:	0f 90       	pop	r0
    49d0:	0f 90       	pop	r0
}
    49d2:	cf 91       	pop	r28
    clear_keyboard();
    49d4:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <clear_keyboard>

000049d8 <command_common>:
{
    49d8:	cf 93       	push	r28
    switch (code) {
    49da:	8b 31       	cpi	r24, 0x1B	; 27
    49dc:	09 f4       	brne	.+2      	; 0x49e0 <command_common+0x8>
    49de:	da c1       	rjmp	.+948    	; 0x4d94 <command_common+0x3bc>
    49e0:	08 f0       	brcs	.+2      	; 0x49e4 <command_common+0xc>
    49e2:	4d c0       	rjmp	.+154    	; 0x4a7e <command_common+0xa6>
    49e4:	8e 30       	cpi	r24, 0x0E	; 14
    49e6:	09 f4       	brne	.+2      	; 0x49ea <command_common+0x12>
    49e8:	e8 c1       	rjmp	.+976    	; 0x4dba <command_common+0x3e2>
    49ea:	b8 f4       	brcc	.+46     	; 0x4a1a <command_common+0x42>
    49ec:	87 30       	cpi	r24, 0x07	; 7
    49ee:	09 f4       	brne	.+2      	; 0x49f2 <command_common+0x1a>
    49f0:	ba c1       	rjmp	.+884    	; 0x4d66 <command_common+0x38e>
    49f2:	48 f4       	brcc	.+18     	; 0x4a06 <command_common+0x2e>
    49f4:	86 30       	cpi	r24, 0x06	; 6
    49f6:	09 f4       	brne	.+2      	; 0x49fa <command_common+0x22>
    49f8:	a4 c1       	rjmp	.+840    	; 0x4d42 <command_common+0x36a>
            print("?");
    49fa:	82 e3       	ldi	r24, 0x32	; 50
    49fc:	99 e0       	ldi	r25, 0x09	; 9
    49fe:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
            return false;
    4a02:	c0 e0       	ldi	r28, 0x00	; 0
    4a04:	3f c2       	rjmp	.+1150   	; 0x4e84 <command_common+0x4ac>
    switch (code) {
    4a06:	88 30       	cpi	r24, 0x08	; 8
    4a08:	09 f4       	brne	.+2      	; 0x4a0c <command_common+0x34>
    4a0a:	6b c0       	rjmp	.+214    	; 0x4ae2 <command_common+0x10a>
    4a0c:	8b 30       	cpi	r24, 0x0B	; 11
    4a0e:	a9 f7       	brne	.-22     	; 0x49fa <command_common+0x22>
    print("\n\t- Magic -\n"
    4a10:	8a e4       	ldi	r24, 0x4A	; 74
    4a12:	97 e0       	ldi	r25, 0x07	; 7
                print("NKRO: off\n");
    4a14:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4a18:	92 c1       	rjmp	.+804    	; 0x4d3e <command_common+0x366>
    switch (code) {
    4a1a:	81 31       	cpi	r24, 0x11	; 17
    4a1c:	09 f4       	brne	.+2      	; 0x4a20 <command_common+0x48>
    4a1e:	24 c2       	rjmp	.+1096   	; 0x4e68 <command_common+0x490>
    4a20:	90 f4       	brcc	.+36     	; 0x4a46 <command_common+0x6e>
    4a22:	80 31       	cpi	r24, 0x10	; 16
    4a24:	51 f7       	brne	.-44     	; 0x49fa <command_common+0x22>
            debug_mouse = !debug_mouse;
    4a26:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    4a2a:	83 fb       	bst	r24, 3
    4a2c:	99 27       	eor	r25, r25
    4a2e:	90 f9       	bld	r25, 0
    4a30:	21 e0       	ldi	r18, 0x01	; 1
    4a32:	92 27       	eor	r25, r18
    4a34:	90 fb       	bst	r25, 0
    4a36:	83 f9       	bld	r24, 3
    4a38:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <debug_config>
            if (debug_mouse) {
    4a3c:	83 ff       	sbrs	r24, 3
    4a3e:	d0 c1       	rjmp	.+928    	; 0x4de0 <command_common+0x408>
                print("\nmouse: on\n");
    4a40:	86 ed       	ldi	r24, 0xD6	; 214
    4a42:	9a e0       	ldi	r25, 0x0A	; 10
    4a44:	a1 c1       	rjmp	.+834    	; 0x4d88 <command_common+0x3b0>
    switch (code) {
    4a46:	86 31       	cpi	r24, 0x16	; 22
    4a48:	09 f4       	brne	.+2      	; 0x4a4c <command_common+0x74>
    4a4a:	cd c1       	rjmp	.+922    	; 0x4de6 <command_common+0x40e>
    4a4c:	89 31       	cpi	r24, 0x19	; 25
    4a4e:	a9 f6       	brne	.-86     	; 0x49fa <command_common+0x22>
            print("\n\t- Version -\n");
    4a50:	8a eb       	ldi	r24, 0xBA	; 186
    4a52:	9a e0       	ldi	r25, 0x0A	; 10
    4a54:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4a58:	81 e9       	ldi	r24, 0x91	; 145
    4a5a:	9a e0       	ldi	r25, 0x0A	; 10
    4a5c:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4a60:	8c e5       	ldi	r24, 0x5C	; 92
    4a62:	9a e0       	ldi	r25, 0x0A	; 10
    4a64:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4a68:	85 e3       	ldi	r24, 0x35	; 53
    4a6a:	9a e0       	ldi	r25, 0x0A	; 10
    4a6c:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
            print("OPTIONS:"
    4a70:	80 ef       	ldi	r24, 0xF0	; 240
    4a72:	99 e0       	ldi	r25, 0x09	; 9
    4a74:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4a78:	85 ec       	ldi	r24, 0xC5	; 197
    4a7a:	99 e0       	ldi	r25, 0x09	; 9
    4a7c:	cb cf       	rjmp	.-106    	; 0x4a14 <command_common+0x3c>
    switch (code) {
    4a7e:	85 33       	cpi	r24, 0x35	; 53
    4a80:	61 f0       	breq	.+24     	; 0x4a9a <command_common+0xc2>
    4a82:	78 f4       	brcc	.+30     	; 0x4aa2 <command_common+0xca>
    4a84:	87 32       	cpi	r24, 0x27	; 39
    4a86:	49 f0       	breq	.+18     	; 0x4a9a <command_common+0xc2>
    4a88:	28 f4       	brcc	.+10     	; 0x4a94 <command_common+0xbc>
    4a8a:	8e 31       	cpi	r24, 0x1E	; 30
    4a8c:	08 f4       	brcc	.+2      	; 0x4a90 <command_common+0xb8>
    4a8e:	b5 cf       	rjmp	.-150    	; 0x49fa <command_common+0x22>
            switch_default_layer((code - KC_1) + 1);
    4a90:	8d 51       	subi	r24, 0x1D	; 29
    4a92:	04 c0       	rjmp	.+8      	; 0x4a9c <command_common+0xc4>
    switch (code) {
    4a94:	89 32       	cpi	r24, 0x29	; 41
    4a96:	09 f0       	breq	.+2      	; 0x4a9a <command_common+0xc2>
    4a98:	b0 cf       	rjmp	.-160    	; 0x49fa <command_common+0x22>
            switch_default_layer(0);
    4a9a:	80 e0       	ldi	r24, 0x00	; 0
            switch_default_layer((code - KC_F1) + 1);
    4a9c:	0e 94 ce 24 	call	0x499c	; 0x499c <switch_default_layer>
    4aa0:	4e c1       	rjmp	.+668    	; 0x4d3e <command_common+0x366>
    switch (code) {
    4aa2:	83 34       	cpi	r24, 0x43	; 67
    4aa4:	38 f4       	brcc	.+14     	; 0x4ab4 <command_common+0xdc>
    4aa6:	8a 33       	cpi	r24, 0x3A	; 58
    4aa8:	08 f0       	brcs	.+2      	; 0x4aac <command_common+0xd4>
    4aaa:	f2 c1       	rjmp	.+996    	; 0x4e90 <command_common+0x4b8>
    4aac:	88 33       	cpi	r24, 0x38	; 56
    4aae:	09 f4       	brne	.+2      	; 0x4ab2 <command_common+0xda>
    4ab0:	af cf       	rjmp	.-162    	; 0x4a10 <command_common+0x38>
    4ab2:	a3 cf       	rjmp	.-186    	; 0x49fa <command_common+0x22>
    4ab4:	83 34       	cpi	r24, 0x43	; 67
    4ab6:	89 f3       	breq	.-30     	; 0x4a9a <command_common+0xc2>
    4ab8:	88 34       	cpi	r24, 0x48	; 72
    4aba:	09 f0       	breq	.+2      	; 0x4abe <command_common+0xe6>
    4abc:	9e cf       	rjmp	.-196    	; 0x49fa <command_common+0x22>
            clear_keyboard();
    4abe:	0e 94 57 16 	call	0x2cae	; 0x2cae <clear_keyboard>
            print("\n\nbootloader... ");
    4ac2:	85 e3       	ldi	r24, 0x35	; 53
    4ac4:	9b e0       	ldi	r25, 0x0B	; 11
    4ac6:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4aca:	9f ef       	ldi	r25, 0xFF	; 255
    4acc:	23 ed       	ldi	r18, 0xD3	; 211
    4ace:	80 e3       	ldi	r24, 0x30	; 48
    4ad0:	91 50       	subi	r25, 0x01	; 1
    4ad2:	20 40       	sbci	r18, 0x00	; 0
    4ad4:	80 40       	sbci	r24, 0x00	; 0
    4ad6:	e1 f7       	brne	.-8      	; 0x4ad0 <command_common+0xf8>
    4ad8:	00 c0       	rjmp	.+0      	; 0x4ada <command_common+0x102>
    4ada:	00 00       	nop
            bootloader_jump(); // not return
    4adc:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <bootloader_jump>
    4ae0:	2e c1       	rjmp	.+604    	; 0x4d3e <command_common+0x366>
            print("eeconfig:\n");
    4ae2:	8a e4       	ldi	r24, 0x4A	; 74
    4ae4:	9b e0       	ldi	r25, 0x0B	; 11
    4ae6:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4aea:	82 e2       	ldi	r24, 0x22	; 34
    4aec:	99 e0       	ldi	r25, 0x09	; 9
    4aee:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4af2:	0e 94 db 20 	call	0x41b6	; 0x41b6 <eeconfig_read_default_layer>
    4af6:	1f 92       	push	r1
    4af8:	8f 93       	push	r24
    4afa:	8f e1       	ldi	r24, 0x1F	; 31
    4afc:	99 e0       	ldi	r25, 0x09	; 9
    4afe:	9f 93       	push	r25
    4b00:	8f 93       	push	r24
    4b02:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4b06:	8d e1       	ldi	r24, 0x1D	; 29
    4b08:	99 e0       	ldi	r25, 0x09	; 9
    4b0a:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    dc.raw = eeconfig_read_debug();
    4b0e:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <eeconfig_read_debug>
    4b12:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4b14:	8a e0       	ldi	r24, 0x0A	; 10
    4b16:	99 e0       	ldi	r25, 0x09	; 9
    4b18:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4b1c:	1f 92       	push	r1
    4b1e:	cf 93       	push	r28
    4b20:	85 e0       	ldi	r24, 0x05	; 5
    4b22:	99 e0       	ldi	r25, 0x09	; 9
    4b24:	9f 93       	push	r25
    4b26:	8f 93       	push	r24
    4b28:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4b2c:	83 e0       	ldi	r24, 0x03	; 3
    4b2e:	99 e0       	ldi	r25, 0x09	; 9
    4b30:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4b34:	89 ef       	ldi	r24, 0xF9	; 249
    4b36:	98 e0       	ldi	r25, 0x08	; 8
    4b38:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4b3c:	8c 2f       	mov	r24, r28
    4b3e:	81 70       	andi	r24, 0x01	; 1
    4b40:	1f 92       	push	r1
    4b42:	8f 93       	push	r24
    4b44:	86 ef       	ldi	r24, 0xF6	; 246
    4b46:	98 e0       	ldi	r25, 0x08	; 8
    4b48:	9f 93       	push	r25
    4b4a:	8f 93       	push	r24
    4b4c:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4b50:	84 ef       	ldi	r24, 0xF4	; 244
    4b52:	98 e0       	ldi	r25, 0x08	; 8
    4b54:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4b58:	8a ee       	ldi	r24, 0xEA	; 234
    4b5a:	98 e0       	ldi	r25, 0x08	; 8
    4b5c:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4b60:	c1 fb       	bst	r28, 1
    4b62:	88 27       	eor	r24, r24
    4b64:	80 f9       	bld	r24, 0
    4b66:	1f 92       	push	r1
    4b68:	8f 93       	push	r24
    4b6a:	87 ee       	ldi	r24, 0xE7	; 231
    4b6c:	98 e0       	ldi	r25, 0x08	; 8
    4b6e:	9f 93       	push	r25
    4b70:	8f 93       	push	r24
    4b72:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4b76:	85 ee       	ldi	r24, 0xE5	; 229
    4b78:	98 e0       	ldi	r25, 0x08	; 8
    4b7a:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4b7e:	89 ed       	ldi	r24, 0xD9	; 217
    4b80:	98 e0       	ldi	r25, 0x08	; 8
    4b82:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4b86:	c2 fb       	bst	r28, 2
    4b88:	88 27       	eor	r24, r24
    4b8a:	80 f9       	bld	r24, 0
    4b8c:	1f 92       	push	r1
    4b8e:	8f 93       	push	r24
    4b90:	86 ed       	ldi	r24, 0xD6	; 214
    4b92:	98 e0       	ldi	r25, 0x08	; 8
    4b94:	9f 93       	push	r25
    4b96:	8f 93       	push	r24
    4b98:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4b9c:	84 ed       	ldi	r24, 0xD4	; 212
    4b9e:	98 e0       	ldi	r25, 0x08	; 8
    4ba0:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4ba4:	8b ec       	ldi	r24, 0xCB	; 203
    4ba6:	98 e0       	ldi	r25, 0x08	; 8
    4ba8:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4bac:	c3 fb       	bst	r28, 3
    4bae:	cc 27       	eor	r28, r28
    4bb0:	c0 f9       	bld	r28, 0
    4bb2:	1f 92       	push	r1
    4bb4:	cf 93       	push	r28
    4bb6:	88 ec       	ldi	r24, 0xC8	; 200
    4bb8:	98 e0       	ldi	r25, 0x08	; 8
    4bba:	9f 93       	push	r25
    4bbc:	8f 93       	push	r24
    4bbe:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4bc2:	86 ec       	ldi	r24, 0xC6	; 198
    4bc4:	98 e0       	ldi	r25, 0x08	; 8
    4bc6:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    kc.raw = eeconfig_read_keymap();
    4bca:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <eeconfig_read_keymap>
    4bce:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4bd0:	82 eb       	ldi	r24, 0xB2	; 178
    4bd2:	98 e0       	ldi	r25, 0x08	; 8
    4bd4:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4bd8:	1f 92       	push	r1
    4bda:	cf 93       	push	r28
    4bdc:	8d ea       	ldi	r24, 0xAD	; 173
    4bde:	98 e0       	ldi	r25, 0x08	; 8
    4be0:	9f 93       	push	r25
    4be2:	8f 93       	push	r24
    4be4:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4be8:	8b ea       	ldi	r24, 0xAB	; 171
    4bea:	98 e0       	ldi	r25, 0x08	; 8
    4bec:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4bf0:	82 e9       	ldi	r24, 0x92	; 146
    4bf2:	98 e0       	ldi	r25, 0x08	; 8
    4bf4:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4bf8:	8c 2f       	mov	r24, r28
    4bfa:	81 70       	andi	r24, 0x01	; 1
    4bfc:	1f 92       	push	r1
    4bfe:	8f 93       	push	r24
    4c00:	8f e8       	ldi	r24, 0x8F	; 143
    4c02:	98 e0       	ldi	r25, 0x08	; 8
    4c04:	9f 93       	push	r25
    4c06:	8f 93       	push	r24
    4c08:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4c0c:	8d b7       	in	r24, 0x3d	; 61
    4c0e:	9e b7       	in	r25, 0x3e	; 62
    4c10:	80 96       	adiw	r24, 0x20	; 32
    4c12:	0f b6       	in	r0, 0x3f	; 63
    4c14:	f8 94       	cli
    4c16:	9e bf       	out	0x3e, r25	; 62
    4c18:	0f be       	out	0x3f, r0	; 63
    4c1a:	8d bf       	out	0x3d, r24	; 61
    4c1c:	8d e8       	ldi	r24, 0x8D	; 141
    4c1e:	98 e0       	ldi	r25, 0x08	; 8
    4c20:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4c24:	86 e7       	ldi	r24, 0x76	; 118
    4c26:	98 e0       	ldi	r25, 0x08	; 8
    4c28:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4c2c:	c1 fb       	bst	r28, 1
    4c2e:	88 27       	eor	r24, r24
    4c30:	80 f9       	bld	r24, 0
    4c32:	1f 92       	push	r1
    4c34:	8f 93       	push	r24
    4c36:	83 e7       	ldi	r24, 0x73	; 115
    4c38:	98 e0       	ldi	r25, 0x08	; 8
    4c3a:	9f 93       	push	r25
    4c3c:	8f 93       	push	r24
    4c3e:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4c42:	81 e7       	ldi	r24, 0x71	; 113
    4c44:	98 e0       	ldi	r25, 0x08	; 8
    4c46:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4c4a:	8f e5       	ldi	r24, 0x5F	; 95
    4c4c:	98 e0       	ldi	r25, 0x08	; 8
    4c4e:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4c52:	c2 fb       	bst	r28, 2
    4c54:	88 27       	eor	r24, r24
    4c56:	80 f9       	bld	r24, 0
    4c58:	1f 92       	push	r1
    4c5a:	8f 93       	push	r24
    4c5c:	8c e5       	ldi	r24, 0x5C	; 92
    4c5e:	98 e0       	ldi	r25, 0x08	; 8
    4c60:	9f 93       	push	r25
    4c62:	8f 93       	push	r24
    4c64:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4c68:	8a e5       	ldi	r24, 0x5A	; 90
    4c6a:	98 e0       	ldi	r25, 0x08	; 8
    4c6c:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4c70:	88 e4       	ldi	r24, 0x48	; 72
    4c72:	98 e0       	ldi	r25, 0x08	; 8
    4c74:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4c78:	c3 fb       	bst	r28, 3
    4c7a:	88 27       	eor	r24, r24
    4c7c:	80 f9       	bld	r24, 0
    4c7e:	1f 92       	push	r1
    4c80:	8f 93       	push	r24
    4c82:	85 e4       	ldi	r24, 0x45	; 69
    4c84:	98 e0       	ldi	r25, 0x08	; 8
    4c86:	9f 93       	push	r25
    4c88:	8f 93       	push	r24
    4c8a:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4c8e:	83 e4       	ldi	r24, 0x43	; 67
    4c90:	98 e0       	ldi	r25, 0x08	; 8
    4c92:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4c96:	89 e3       	ldi	r24, 0x39	; 57
    4c98:	98 e0       	ldi	r25, 0x08	; 8
    4c9a:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4c9e:	c4 fb       	bst	r28, 4
    4ca0:	88 27       	eor	r24, r24
    4ca2:	80 f9       	bld	r24, 0
    4ca4:	1f 92       	push	r1
    4ca6:	8f 93       	push	r24
    4ca8:	86 e3       	ldi	r24, 0x36	; 54
    4caa:	98 e0       	ldi	r25, 0x08	; 8
    4cac:	9f 93       	push	r25
    4cae:	8f 93       	push	r24
    4cb0:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4cb4:	84 e3       	ldi	r24, 0x34	; 52
    4cb6:	98 e0       	ldi	r25, 0x08	; 8
    4cb8:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4cbc:	82 e2       	ldi	r24, 0x22	; 34
    4cbe:	98 e0       	ldi	r25, 0x08	; 8
    4cc0:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4cc4:	c5 fb       	bst	r28, 5
    4cc6:	88 27       	eor	r24, r24
    4cc8:	80 f9       	bld	r24, 0
    4cca:	1f 92       	push	r1
    4ccc:	8f 93       	push	r24
    4cce:	8f e1       	ldi	r24, 0x1F	; 31
    4cd0:	98 e0       	ldi	r25, 0x08	; 8
    4cd2:	9f 93       	push	r25
    4cd4:	8f 93       	push	r24
    4cd6:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4cda:	8d e1       	ldi	r24, 0x1D	; 29
    4cdc:	98 e0       	ldi	r25, 0x08	; 8
    4cde:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4ce2:	81 e0       	ldi	r24, 0x01	; 1
    4ce4:	98 e0       	ldi	r25, 0x08	; 8
    4ce6:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4cea:	c6 fb       	bst	r28, 6
    4cec:	88 27       	eor	r24, r24
    4cee:	80 f9       	bld	r24, 0
    4cf0:	1f 92       	push	r1
    4cf2:	8f 93       	push	r24
    4cf4:	8e ef       	ldi	r24, 0xFE	; 254
    4cf6:	97 e0       	ldi	r25, 0x07	; 7
    4cf8:	9f 93       	push	r25
    4cfa:	8f 93       	push	r24
    4cfc:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4d00:	8c ef       	ldi	r24, 0xFC	; 252
    4d02:	97 e0       	ldi	r25, 0x07	; 7
    4d04:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4d08:	84 ef       	ldi	r24, 0xF4	; 244
    4d0a:	97 e0       	ldi	r25, 0x07	; 7
    4d0c:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4d10:	c7 fb       	bst	r28, 7
    4d12:	cc 27       	eor	r28, r28
    4d14:	c0 f9       	bld	r28, 0
    4d16:	1f 92       	push	r1
    4d18:	cf 93       	push	r28
    4d1a:	81 ef       	ldi	r24, 0xF1	; 241
    4d1c:	97 e0       	ldi	r25, 0x07	; 7
    4d1e:	9f 93       	push	r25
    4d20:	8f 93       	push	r24
    4d22:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4d26:	8f ee       	ldi	r24, 0xEF	; 239
    4d28:	97 e0       	ldi	r25, 0x07	; 7
    4d2a:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4d2e:	8d b7       	in	r24, 0x3d	; 61
    4d30:	9e b7       	in	r25, 0x3e	; 62
    4d32:	4c 96       	adiw	r24, 0x1c	; 28
    4d34:	0f b6       	in	r0, 0x3f	; 63
    4d36:	f8 94       	cli
    4d38:	9e bf       	out	0x3e, r25	; 62
    4d3a:	0f be       	out	0x3f, r0	; 63
    4d3c:	8d bf       	out	0x3d, r24	; 61
    return true;
    4d3e:	c1 e0       	ldi	r28, 0x01	; 1
            break;
    4d40:	a1 c0       	rjmp	.+322    	; 0x4e84 <command_common+0x4ac>
            debug_matrix   = false;
    4d42:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
            debug_enable   = false;
    4d46:	81 7f       	andi	r24, 0xF1	; 241
    4d48:	8e 7f       	andi	r24, 0xFE	; 254
    4d4a:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <debug_config>
    print("\n\t- Console -\n"
    4d4e:	83 e2       	ldi	r24, 0x23	; 35
    4d50:	97 e0       	ldi	r25, 0x07	; 7
    4d52:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
            print("C> ");
    4d56:	86 e4       	ldi	r24, 0x46	; 70
    4d58:	9b e0       	ldi	r25, 0x0B	; 11
    4d5a:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
            command_state = CONSOLE;
    4d5e:	81 e0       	ldi	r24, 0x01	; 1
    4d60:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <command_state>
    4d64:	ec cf       	rjmp	.-40     	; 0x4d3e <command_common+0x366>
            if (debug_enable) {
    4d66:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    4d6a:	80 ff       	sbrs	r24, 0
    4d6c:	0b c0       	rjmp	.+22     	; 0x4d84 <command_common+0x3ac>
                print("\ndebug: off\n");
    4d6e:	88 e2       	ldi	r24, 0x28	; 40
    4d70:	9b e0       	ldi	r25, 0x0B	; 11
    4d72:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
                debug_matrix   = false;
    4d76:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
                debug_enable   = false;
    4d7a:	81 7f       	andi	r24, 0xF1	; 241
    4d7c:	8e 7f       	andi	r24, 0xFE	; 254
                debug_enable = true;
    4d7e:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <debug_config>
    4d82:	dd cf       	rjmp	.-70     	; 0x4d3e <command_common+0x366>
                print("\ndebug: on\n");
    4d84:	8c e1       	ldi	r24, 0x1C	; 28
    4d86:	9b e0       	ldi	r25, 0x0B	; 11
                print("\nmouse: on\n");
    4d88:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
                debug_enable = true;
    4d8c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    4d90:	81 60       	ori	r24, 0x01	; 1
    4d92:	f5 cf       	rjmp	.-22     	; 0x4d7e <command_common+0x3a6>
            debug_matrix = !debug_matrix;
    4d94:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    4d98:	81 fb       	bst	r24, 1
    4d9a:	99 27       	eor	r25, r25
    4d9c:	90 f9       	bld	r25, 0
    4d9e:	21 e0       	ldi	r18, 0x01	; 1
    4da0:	92 27       	eor	r25, r18
    4da2:	90 fb       	bst	r25, 0
    4da4:	81 f9       	bld	r24, 1
    4da6:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <debug_config>
            if (debug_matrix) {
    4daa:	81 ff       	sbrs	r24, 1
    4dac:	03 c0       	rjmp	.+6      	; 0x4db4 <command_common+0x3dc>
                print("\nmatrix: on\n");
    4dae:	8f e0       	ldi	r24, 0x0F	; 15
    4db0:	9b e0       	ldi	r25, 0x0B	; 11
    4db2:	ea cf       	rjmp	.-44     	; 0x4d88 <command_common+0x3b0>
                print("\nmatrix: off\n");
    4db4:	81 e0       	ldi	r24, 0x01	; 1
    4db6:	9b e0       	ldi	r25, 0x0B	; 11
    4db8:	2d ce       	rjmp	.-934    	; 0x4a14 <command_common+0x3c>
            debug_keyboard = !debug_keyboard;
    4dba:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <debug_config>
    4dbe:	82 fb       	bst	r24, 2
    4dc0:	99 27       	eor	r25, r25
    4dc2:	90 f9       	bld	r25, 0
    4dc4:	21 e0       	ldi	r18, 0x01	; 1
    4dc6:	92 27       	eor	r25, r18
    4dc8:	90 fb       	bst	r25, 0
    4dca:	82 f9       	bld	r24, 2
    4dcc:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <debug_config>
            if (debug_keyboard) {
    4dd0:	82 ff       	sbrs	r24, 2
    4dd2:	03 c0       	rjmp	.+6      	; 0x4dda <command_common+0x402>
                print("\nkeyboard: on\n");
    4dd4:	82 ef       	ldi	r24, 0xF2	; 242
    4dd6:	9a e0       	ldi	r25, 0x0A	; 10
    4dd8:	d7 cf       	rjmp	.-82     	; 0x4d88 <command_common+0x3b0>
                print("\nkeyboard: off\n");
    4dda:	82 ee       	ldi	r24, 0xE2	; 226
    4ddc:	9a e0       	ldi	r25, 0x0A	; 10
    4dde:	1a ce       	rjmp	.-972    	; 0x4a14 <command_common+0x3c>
                print("\nmouse: off\n");
    4de0:	89 ec       	ldi	r24, 0xC9	; 201
    4de2:	9a e0       	ldi	r25, 0x0A	; 10
    4de4:	17 ce       	rjmp	.-978    	; 0x4a14 <command_common+0x3c>
            print("\n\t- Status -\n");
    4de6:	87 eb       	ldi	r24, 0xB7	; 183
    4de8:	99 e0       	ldi	r25, 0x09	; 9
    4dea:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
            print_val_hex8(host_keyboard_leds());
    4dee:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <host_keyboard_leds>
    4df2:	1f 92       	push	r1
    4df4:	8f 93       	push	r24
    4df6:	8d e9       	ldi	r24, 0x9D	; 157
    4df8:	99 e0       	ldi	r25, 0x09	; 9
    4dfa:	9f 93       	push	r25
    4dfc:	8f 93       	push	r24
    4dfe:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4e02:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
    4e06:	1f 92       	push	r1
    4e08:	8f 93       	push	r24
    4e0a:	86 e8       	ldi	r24, 0x86	; 134
    4e0c:	99 e0       	ldi	r25, 0x09	; 9
    4e0e:	9f 93       	push	r25
    4e10:	8f 93       	push	r24
    4e12:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
            print_val_hex8(keyboard_idle);
    4e16:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <keyboard_idle>
    4e1a:	1f 92       	push	r1
    4e1c:	8f 93       	push	r24
    4e1e:	83 e7       	ldi	r24, 0x73	; 115
    4e20:	99 e0       	ldi	r25, 0x09	; 9
    4e22:	9f 93       	push	r25
    4e24:	8f 93       	push	r24
    4e26:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
            print_val_hex8(keyboard_nkro);
    4e2a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_nkro>
    4e2e:	1f 92       	push	r1
    4e30:	8f 93       	push	r24
    4e32:	80 e6       	ldi	r24, 0x60	; 96
    4e34:	99 e0       	ldi	r25, 0x09	; 9
    4e36:	9f 93       	push	r25
    4e38:	8f 93       	push	r24
    4e3a:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
            print_val_hex32(timer_read32());
    4e3e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <timer_read32>
    4e42:	9f 93       	push	r25
    4e44:	8f 93       	push	r24
    4e46:	7f 93       	push	r23
    4e48:	6f 93       	push	r22
    4e4a:	89 e4       	ldi	r24, 0x49	; 73
    4e4c:	99 e0       	ldi	r25, 0x09	; 9
    4e4e:	9f 93       	push	r25
    4e50:	8f 93       	push	r24
    4e52:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
            break;
    4e56:	8d b7       	in	r24, 0x3d	; 61
    4e58:	9e b7       	in	r25, 0x3e	; 62
    4e5a:	46 96       	adiw	r24, 0x16	; 22
    4e5c:	0f b6       	in	r0, 0x3f	; 63
    4e5e:	f8 94       	cli
    4e60:	9e bf       	out	0x3e, r25	; 62
    4e62:	0f be       	out	0x3f, r0	; 63
    4e64:	8d bf       	out	0x3d, r24	; 61
    4e66:	6b cf       	rjmp	.-298    	; 0x4d3e <command_common+0x366>
            clear_keyboard(); //Prevents stuck keys.
    4e68:	0e 94 57 16 	call	0x2cae	; 0x2cae <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4e6c:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <keyboard_nkro>
    4e70:	81 e0       	ldi	r24, 0x01	; 1
    4e72:	c8 27       	eor	r28, r24
    4e74:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <keyboard_nkro>
            if (keyboard_nkro) {
    4e78:	cc 23       	and	r28, r28
    4e7a:	39 f0       	breq	.+14     	; 0x4e8a <command_common+0x4b2>
                print("NKRO: on\n");
    4e7c:	8f e3       	ldi	r24, 0x3F	; 63
    4e7e:	99 e0       	ldi	r25, 0x09	; 9
    4e80:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
}
    4e84:	8c 2f       	mov	r24, r28
    4e86:	cf 91       	pop	r28
    4e88:	08 95       	ret
                print("NKRO: off\n");
    4e8a:	84 e3       	ldi	r24, 0x34	; 52
    4e8c:	99 e0       	ldi	r25, 0x09	; 9
    4e8e:	c2 cd       	rjmp	.-1148   	; 0x4a14 <command_common+0x3c>
            switch_default_layer((code - KC_F1) + 1);
    4e90:	89 53       	subi	r24, 0x39	; 57
    4e92:	04 ce       	rjmp	.-1016   	; 0x4a9c <command_common+0xc4>

00004e94 <command_console_extra>:
}
    4e94:	80 e0       	ldi	r24, 0x00	; 0
    4e96:	08 95       	ret

00004e98 <command_extra>:
    4e98:	0c 94 4a 27 	jmp	0x4e94	; 0x4e94 <command_console_extra>

00004e9c <command_proc>:
{
    4e9c:	cf 93       	push	r28
    4e9e:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4ea0:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <command_state>
    4ea4:	81 30       	cpi	r24, 0x01	; 1
    4ea6:	d1 f0       	breq	.+52     	; 0x4edc <command_proc+0x40>
    4ea8:	38 f0       	brcs	.+14     	; 0x4eb8 <command_proc+0x1c>
    4eaa:	82 30       	cpi	r24, 0x02	; 2
    4eac:	09 f4       	brne	.+2      	; 0x4eb0 <command_proc+0x14>
    4eae:	4d c0       	rjmp	.+154    	; 0x4f4a <command_proc+0xae>
            command_state = ONESHOT;
    4eb0:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <command_state>
                return false;
    4eb4:	80 e0       	ldi	r24, 0x00	; 0
    4eb6:	10 c0       	rjmp	.+32     	; 0x4ed8 <command_proc+0x3c>
            if (!IS_COMMAND())
    4eb8:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    4ebc:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    4ec0:	80 81       	ld	r24, Z
    4ec2:	82 32       	cpi	r24, 0x22	; 34
    4ec4:	b9 f7       	brne	.-18     	; 0x4eb4 <command_proc+0x18>
                return (command_extra(code) || command_common(code));
    4ec6:	8c 2f       	mov	r24, r28
    4ec8:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <command_extra>
    4ecc:	81 11       	cpse	r24, r1
    4ece:	1e c0       	rjmp	.+60     	; 0x4f0c <command_proc+0x70>
    4ed0:	8c 2f       	mov	r24, r28
    4ed2:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <command_common>
                return (command_console_extra(code) || command_console(code));
    4ed6:	81 70       	andi	r24, 0x01	; 1
}
    4ed8:	cf 91       	pop	r28
    4eda:	08 95       	ret
            if (IS_COMMAND())
    4edc:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    4ee0:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    4ee4:	80 81       	ld	r24, Z
    4ee6:	82 32       	cpi	r24, 0x22	; 34
    4ee8:	71 f3       	breq	.-36     	; 0x4ec6 <command_proc+0x2a>
                return (command_console_extra(code) || command_console(code));
    4eea:	8c 2f       	mov	r24, r28
    4eec:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <command_console_extra>
    4ef0:	81 11       	cpse	r24, r1
    4ef2:	1b c0       	rjmp	.+54     	; 0x4f2a <command_proc+0x8e>
    switch (code) {
    4ef4:	c4 31       	cpi	r28, 0x14	; 20
    4ef6:	d9 f0       	breq	.+54     	; 0x4f2e <command_proc+0x92>
    4ef8:	60 f4       	brcc	.+24     	; 0x4f12 <command_proc+0x76>
    4efa:	cb 30       	cpi	r28, 0x0B	; 11
    4efc:	71 f0       	breq	.+28     	; 0x4f1a <command_proc+0x7e>
    4efe:	c0 31       	cpi	r28, 0x10	; 16
    4f00:	d1 f0       	breq	.+52     	; 0x4f36 <command_proc+0x9a>
            print("?");
    4f02:	84 e1       	ldi	r24, 0x14	; 20
    4f04:	97 e0       	ldi	r25, 0x07	; 7
    4f06:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4f0a:	13 c0       	rjmp	.+38     	; 0x4f32 <command_proc+0x96>
                return (command_extra(code) || command_common(code));
    4f0c:	81 e0       	ldi	r24, 0x01	; 1
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	e2 cf       	rjmp	.-60     	; 0x4ed6 <command_proc+0x3a>
    switch (code) {
    4f12:	c9 32       	cpi	r28, 0x29	; 41
    4f14:	61 f0       	breq	.+24     	; 0x4f2e <command_proc+0x92>
    4f16:	c8 33       	cpi	r28, 0x38	; 56
    4f18:	a1 f7       	brne	.-24     	; 0x4f02 <command_proc+0x66>
    print("\n\t- Console -\n"
    4f1a:	83 e2       	ldi	r24, 0x23	; 35
    4f1c:	97 e0       	ldi	r25, 0x07	; 7
    4f1e:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print("C> ");
    4f22:	8a e1       	ldi	r24, 0x1A	; 26
    4f24:	97 e0       	ldi	r25, 0x07	; 7
    4f26:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
                return (command_console_extra(code) || command_console(code));
    4f2a:	81 e0       	ldi	r24, 0x01	; 1
    4f2c:	d4 cf       	rjmp	.-88     	; 0x4ed6 <command_proc+0x3a>
            command_state = ONESHOT;
    4f2e:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <command_state>
                return (command_console_extra(code) || command_console(code));
    4f32:	80 e0       	ldi	r24, 0x00	; 0
    4f34:	d0 cf       	rjmp	.-96     	; 0x4ed6 <command_proc+0x3a>
            mousekey_console_help();
    4f36:	0e 94 94 23 	call	0x4728	; 0x4728 <mousekey_console_help>
            print("M> ");
    4f3a:	86 e1       	ldi	r24, 0x16	; 22
    4f3c:	97 e0       	ldi	r25, 0x07	; 7
    4f3e:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
            command_state = MOUSEKEY;
    4f42:	82 e0       	ldi	r24, 0x02	; 2
    4f44:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <command_state>
    4f48:	f0 cf       	rjmp	.-32     	; 0x4f2a <command_proc+0x8e>
    switch (code) {
    4f4a:	c4 32       	cpi	r28, 0x24	; 36
    4f4c:	c8 f4       	brcc	.+50     	; 0x4f80 <command_proc+0xe4>
    4f4e:	ce 31       	cpi	r28, 0x1E	; 30
    4f50:	08 f0       	brcs	.+2      	; 0x4f54 <command_proc+0xb8>
    4f52:	be c0       	rjmp	.+380    	; 0x50d0 <command_proc+0x234>
    4f54:	cb 30       	cpi	r28, 0x0B	; 11
    4f56:	e1 f0       	breq	.+56     	; 0x4f90 <command_proc+0xf4>
    4f58:	40 f4       	brcc	.+16     	; 0x4f6a <command_proc+0xce>
    4f5a:	c7 30       	cpi	r28, 0x07	; 7
    4f5c:	09 f4       	brne	.+2      	; 0x4f60 <command_proc+0xc4>
    4f5e:	cf c0       	rjmp	.+414    	; 0x50fe <command_proc+0x262>
            print("?");
    4f60:	88 eb       	ldi	r24, 0xB8	; 184
    4f62:	95 e0       	ldi	r25, 0x05	; 5
        print("M>" );
    4f64:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4f68:	26 c0       	rjmp	.+76     	; 0x4fb6 <command_proc+0x11a>
    switch (code) {
    4f6a:	c3 31       	cpi	r28, 0x13	; 19
    4f6c:	c1 f1       	breq	.+112    	; 0x4fde <command_proc+0x142>
    4f6e:	c4 31       	cpi	r28, 0x14	; 20
    4f70:	b9 f7       	brne	.-18     	; 0x4f60 <command_proc+0xc4>
            if (mousekey_param) {
    4f72:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <mousekey_param>
    4f76:	88 23       	and	r24, r24
    4f78:	51 f1       	breq	.+84     	; 0x4fce <command_proc+0x132>
                mousekey_param = 0;
    4f7a:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <mousekey_param>
    4f7e:	0a c0       	rjmp	.+20     	; 0x4f94 <command_proc+0xf8>
    switch (code) {
    4f80:	cb 34       	cpi	r28, 0x4B	; 75
    4f82:	09 f4       	brne	.+2      	; 0x4f86 <command_proc+0xea>
    4f84:	ba c0       	rjmp	.+372    	; 0x50fa <command_proc+0x25e>
    4f86:	c8 f4       	brcc	.+50     	; 0x4fba <command_proc+0x11e>
    4f88:	c9 32       	cpi	r28, 0x29	; 41
    4f8a:	99 f3       	breq	.-26     	; 0x4f72 <command_proc+0xd6>
    4f8c:	c8 33       	cpi	r28, 0x38	; 56
    4f8e:	41 f7       	brne	.-48     	; 0x4f60 <command_proc+0xc4>
            mousekey_console_help();
    4f90:	0e 94 94 23 	call	0x4728	; 0x4728 <mousekey_console_help>
    if (mousekey_param) {
    4f94:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <mousekey_param>
    4f98:	88 23       	and	r24, r24
    4f9a:	09 f4       	brne	.+2      	; 0x4f9e <command_proc+0x102>
    4f9c:	c7 c0       	rjmp	.+398    	; 0x512c <command_proc+0x290>
        xprintf("M%d> ", mousekey_param);
    4f9e:	1f 92       	push	r1
    4fa0:	8f 93       	push	r24
    4fa2:	82 eb       	ldi	r24, 0xB2	; 178
    4fa4:	95 e0       	ldi	r25, 0x05	; 5
    4fa6:	9f 93       	push	r25
    4fa8:	8f 93       	push	r24
    4faa:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    4fae:	0f 90       	pop	r0
    4fb0:	0f 90       	pop	r0
    4fb2:	0f 90       	pop	r0
    4fb4:	0f 90       	pop	r0
    return true;
    4fb6:	81 e0       	ldi	r24, 0x01	; 1
    4fb8:	8f cf       	rjmp	.-226    	; 0x4ed8 <command_proc+0x3c>
    switch (code) {
    4fba:	c1 35       	cpi	r28, 0x51	; 81
    4fbc:	09 f4       	brne	.+2      	; 0x4fc0 <command_proc+0x124>
    4fbe:	97 c0       	rjmp	.+302    	; 0x50ee <command_proc+0x252>
    4fc0:	c2 35       	cpi	r28, 0x52	; 82
    4fc2:	09 f4       	brne	.+2      	; 0x4fc6 <command_proc+0x12a>
    4fc4:	8e c0       	rjmp	.+284    	; 0x50e2 <command_proc+0x246>
    4fc6:	ce 34       	cpi	r28, 0x4E	; 78
    4fc8:	59 f6       	brne	.-106    	; 0x4f60 <command_proc+0xc4>
            mousekey_param_dec(mousekey_param, 10);
    4fca:	6a e0       	ldi	r22, 0x0A	; 10
    4fcc:	91 c0       	rjmp	.+290    	; 0x50f0 <command_proc+0x254>
                print("C> ");
    4fce:	87 ec       	ldi	r24, 0xC7	; 199
    4fd0:	95 e0       	ldi	r25, 0x05	; 5
    4fd2:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
                command_state = CONSOLE;
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <command_state>
    4fdc:	7d cf       	rjmp	.-262    	; 0x4ed8 <command_proc+0x3c>
    print("\n\t- Values -\n");
    4fde:	81 ea       	ldi	r24, 0xA1	; 161
    4fe0:	95 e0       	ldi	r25, 0x05	; 5
    4fe2:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    4fe6:	8f e8       	ldi	r24, 0x8F	; 143
    4fe8:	95 e0       	ldi	r25, 0x05	; 5
    4fea:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    4fee:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    4ff2:	1f 92       	push	r1
    4ff4:	8f 93       	push	r24
    4ff6:	8c e8       	ldi	r24, 0x8C	; 140
    4ff8:	95 e0       	ldi	r25, 0x05	; 5
    4ffa:	9f 93       	push	r25
    4ffc:	8f 93       	push	r24
    4ffe:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    5002:	8a e8       	ldi	r24, 0x8A	; 138
    5004:	95 e0       	ldi	r25, 0x05	; 5
    5006:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    500a:	88 e7       	ldi	r24, 0x78	; 120
    500c:	95 e0       	ldi	r25, 0x05	; 5
    500e:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    5012:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    5016:	1f 92       	push	r1
    5018:	8f 93       	push	r24
    501a:	85 e7       	ldi	r24, 0x75	; 117
    501c:	95 e0       	ldi	r25, 0x05	; 5
    501e:	9f 93       	push	r25
    5020:	8f 93       	push	r24
    5022:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    5026:	83 e7       	ldi	r24, 0x73	; 115
    5028:	95 e0       	ldi	r25, 0x05	; 5
    502a:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    502e:	84 e6       	ldi	r24, 0x64	; 100
    5030:	95 e0       	ldi	r25, 0x05	; 5
    5032:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    5036:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    503a:	1f 92       	push	r1
    503c:	8f 93       	push	r24
    503e:	81 e6       	ldi	r24, 0x61	; 97
    5040:	95 e0       	ldi	r25, 0x05	; 5
    5042:	9f 93       	push	r25
    5044:	8f 93       	push	r24
    5046:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    504a:	8f e5       	ldi	r24, 0x5F	; 95
    504c:	95 e0       	ldi	r25, 0x05	; 5
    504e:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    5052:	8e e4       	ldi	r24, 0x4E	; 78
    5054:	95 e0       	ldi	r25, 0x05	; 5
    5056:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    505a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    505e:	1f 92       	push	r1
    5060:	8f 93       	push	r24
    5062:	8b e4       	ldi	r24, 0x4B	; 75
    5064:	95 e0       	ldi	r25, 0x05	; 5
    5066:	9f 93       	push	r25
    5068:	8f 93       	push	r24
    506a:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    506e:	89 e4       	ldi	r24, 0x49	; 73
    5070:	95 e0       	ldi	r25, 0x05	; 5
    5072:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5076:	84 e3       	ldi	r24, 0x34	; 52
    5078:	95 e0       	ldi	r25, 0x05	; 5
    507a:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    507e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    5082:	1f 92       	push	r1
    5084:	8f 93       	push	r24
    5086:	81 e3       	ldi	r24, 0x31	; 49
    5088:	95 e0       	ldi	r25, 0x05	; 5
    508a:	9f 93       	push	r25
    508c:	8f 93       	push	r24
    508e:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    5092:	8f e2       	ldi	r24, 0x2F	; 47
    5094:	95 e0       	ldi	r25, 0x05	; 5
    5096:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    509a:	88 e1       	ldi	r24, 0x18	; 24
    509c:	95 e0       	ldi	r25, 0x05	; 5
    509e:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    50a2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    50a6:	1f 92       	push	r1
    50a8:	8f 93       	push	r24
    50aa:	85 e1       	ldi	r24, 0x15	; 21
    50ac:	95 e0       	ldi	r25, 0x05	; 5
    50ae:	9f 93       	push	r25
    50b0:	8f 93       	push	r24
    50b2:	0e 94 99 06 	call	0xd32	; 0xd32 <__xprintf>
    50b6:	83 e1       	ldi	r24, 0x13	; 19
    50b8:	95 e0       	ldi	r25, 0x05	; 5
    50ba:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    50be:	8d b7       	in	r24, 0x3d	; 61
    50c0:	9e b7       	in	r25, 0x3e	; 62
    50c2:	48 96       	adiw	r24, 0x18	; 24
    50c4:	0f b6       	in	r0, 0x3f	; 63
    50c6:	f8 94       	cli
    50c8:	9e bf       	out	0x3e, r25	; 62
    50ca:	0f be       	out	0x3f, r0	; 63
    50cc:	8d bf       	out	0x3d, r24	; 61
    50ce:	62 cf       	rjmp	.-316    	; 0x4f94 <command_proc+0xf8>
            mousekey_param = numkey2num(code);
    50d0:	ce 51       	subi	r28, 0x1E	; 30
    50d2:	ec 2f       	mov	r30, r28
    50d4:	f0 e0       	ldi	r31, 0x00	; 0
    50d6:	e1 5d       	subi	r30, 0xD1	; 209
    50d8:	fe 4f       	sbci	r31, 0xFE	; 254
    50da:	80 81       	ld	r24, Z
    50dc:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <mousekey_param>
    50e0:	59 cf       	rjmp	.-334    	; 0x4f94 <command_proc+0xf8>
            mousekey_param_inc(mousekey_param, 1);
    50e2:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_inc(mousekey_param, 10);
    50e4:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <mousekey_param>
    50e8:	0e 94 ab 23 	call	0x4756	; 0x4756 <mousekey_param_inc>
    50ec:	53 cf       	rjmp	.-346    	; 0x4f94 <command_proc+0xf8>
            mousekey_param_dec(mousekey_param, 1);
    50ee:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_dec(mousekey_param, 10);
    50f0:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <mousekey_param>
    50f4:	0e 94 4f 24 	call	0x489e	; 0x489e <mousekey_param_dec>
    50f8:	4d cf       	rjmp	.-358    	; 0x4f94 <command_proc+0xf8>
            mousekey_param_inc(mousekey_param, 10);
    50fa:	6a e0       	ldi	r22, 0x0A	; 10
    50fc:	f3 cf       	rjmp	.-26     	; 0x50e4 <command_proc+0x248>
            mk_delay = MOUSEKEY_DELAY/10;
    50fe:	8e e1       	ldi	r24, 0x1E	; 30
    5100:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    5104:	82 e3       	ldi	r24, 0x32	; 50
    5106:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    510a:	8a e0       	ldi	r24, 0x0A	; 10
    510c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5110:	84 e1       	ldi	r24, 0x14	; 20
    5112:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5116:	88 e0       	ldi	r24, 0x08	; 8
    5118:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    511c:	88 e2       	ldi	r24, 0x28	; 40
    511e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_time_to_max>
            print("set default\n");
    5122:	8a eb       	ldi	r24, 0xBA	; 186
    5124:	95 e0       	ldi	r25, 0x05	; 5
    5126:	0e 94 00 06 	call	0xc00	; 0xc00 <xputs>
    512a:	34 cf       	rjmp	.-408    	; 0x4f94 <command_proc+0xf8>
        print("M>" );
    512c:	8f ea       	ldi	r24, 0xAF	; 175
    512e:	95 e0       	ldi	r25, 0x05	; 5
    5130:	19 cf       	rjmp	.-462    	; 0x4f64 <command_proc+0xc8>

00005132 <__fixsfsi>:
    5132:	0e 94 a0 28 	call	0x5140	; 0x5140 <__fixunssfsi>
    5136:	68 94       	set
    5138:	b1 11       	cpse	r27, r1
    513a:	0c 94 2f 29 	jmp	0x525e	; 0x525e <__fp_szero>
    513e:	08 95       	ret

00005140 <__fixunssfsi>:
    5140:	0e 94 14 29 	call	0x5228	; 0x5228 <__fp_splitA>
    5144:	88 f0       	brcs	.+34     	; 0x5168 <__fixunssfsi+0x28>
    5146:	9f 57       	subi	r25, 0x7F	; 127
    5148:	98 f0       	brcs	.+38     	; 0x5170 <__fixunssfsi+0x30>
    514a:	b9 2f       	mov	r27, r25
    514c:	99 27       	eor	r25, r25
    514e:	b7 51       	subi	r27, 0x17	; 23
    5150:	b0 f0       	brcs	.+44     	; 0x517e <__fixunssfsi+0x3e>
    5152:	e1 f0       	breq	.+56     	; 0x518c <__fixunssfsi+0x4c>
    5154:	66 0f       	add	r22, r22
    5156:	77 1f       	adc	r23, r23
    5158:	88 1f       	adc	r24, r24
    515a:	99 1f       	adc	r25, r25
    515c:	1a f0       	brmi	.+6      	; 0x5164 <__fixunssfsi+0x24>
    515e:	ba 95       	dec	r27
    5160:	c9 f7       	brne	.-14     	; 0x5154 <__fixunssfsi+0x14>
    5162:	14 c0       	rjmp	.+40     	; 0x518c <__fixunssfsi+0x4c>
    5164:	b1 30       	cpi	r27, 0x01	; 1
    5166:	91 f0       	breq	.+36     	; 0x518c <__fixunssfsi+0x4c>
    5168:	0e 94 2e 29 	call	0x525c	; 0x525c <__fp_zero>
    516c:	b1 e0       	ldi	r27, 0x01	; 1
    516e:	08 95       	ret
    5170:	0c 94 2e 29 	jmp	0x525c	; 0x525c <__fp_zero>
    5174:	67 2f       	mov	r22, r23
    5176:	78 2f       	mov	r23, r24
    5178:	88 27       	eor	r24, r24
    517a:	b8 5f       	subi	r27, 0xF8	; 248
    517c:	39 f0       	breq	.+14     	; 0x518c <__fixunssfsi+0x4c>
    517e:	b9 3f       	cpi	r27, 0xF9	; 249
    5180:	cc f3       	brlt	.-14     	; 0x5174 <__fixunssfsi+0x34>
    5182:	86 95       	lsr	r24
    5184:	77 95       	ror	r23
    5186:	67 95       	ror	r22
    5188:	b3 95       	inc	r27
    518a:	d9 f7       	brne	.-10     	; 0x5182 <__fixunssfsi+0x42>
    518c:	3e f4       	brtc	.+14     	; 0x519c <__fixunssfsi+0x5c>
    518e:	90 95       	com	r25
    5190:	80 95       	com	r24
    5192:	70 95       	com	r23
    5194:	61 95       	neg	r22
    5196:	7f 4f       	sbci	r23, 0xFF	; 255
    5198:	8f 4f       	sbci	r24, 0xFF	; 255
    519a:	9f 4f       	sbci	r25, 0xFF	; 255
    519c:	08 95       	ret

0000519e <__floatunsisf>:
    519e:	e8 94       	clt
    51a0:	09 c0       	rjmp	.+18     	; 0x51b4 <__floatsisf+0x12>

000051a2 <__floatsisf>:
    51a2:	97 fb       	bst	r25, 7
    51a4:	3e f4       	brtc	.+14     	; 0x51b4 <__floatsisf+0x12>
    51a6:	90 95       	com	r25
    51a8:	80 95       	com	r24
    51aa:	70 95       	com	r23
    51ac:	61 95       	neg	r22
    51ae:	7f 4f       	sbci	r23, 0xFF	; 255
    51b0:	8f 4f       	sbci	r24, 0xFF	; 255
    51b2:	9f 4f       	sbci	r25, 0xFF	; 255
    51b4:	99 23       	and	r25, r25
    51b6:	a9 f0       	breq	.+42     	; 0x51e2 <__floatsisf+0x40>
    51b8:	f9 2f       	mov	r31, r25
    51ba:	96 e9       	ldi	r25, 0x96	; 150
    51bc:	bb 27       	eor	r27, r27
    51be:	93 95       	inc	r25
    51c0:	f6 95       	lsr	r31
    51c2:	87 95       	ror	r24
    51c4:	77 95       	ror	r23
    51c6:	67 95       	ror	r22
    51c8:	b7 95       	ror	r27
    51ca:	f1 11       	cpse	r31, r1
    51cc:	f8 cf       	rjmp	.-16     	; 0x51be <__floatsisf+0x1c>
    51ce:	fa f4       	brpl	.+62     	; 0x520e <__floatsisf+0x6c>
    51d0:	bb 0f       	add	r27, r27
    51d2:	11 f4       	brne	.+4      	; 0x51d8 <__floatsisf+0x36>
    51d4:	60 ff       	sbrs	r22, 0
    51d6:	1b c0       	rjmp	.+54     	; 0x520e <__floatsisf+0x6c>
    51d8:	6f 5f       	subi	r22, 0xFF	; 255
    51da:	7f 4f       	sbci	r23, 0xFF	; 255
    51dc:	8f 4f       	sbci	r24, 0xFF	; 255
    51de:	9f 4f       	sbci	r25, 0xFF	; 255
    51e0:	16 c0       	rjmp	.+44     	; 0x520e <__floatsisf+0x6c>
    51e2:	88 23       	and	r24, r24
    51e4:	11 f0       	breq	.+4      	; 0x51ea <__floatsisf+0x48>
    51e6:	96 e9       	ldi	r25, 0x96	; 150
    51e8:	11 c0       	rjmp	.+34     	; 0x520c <__floatsisf+0x6a>
    51ea:	77 23       	and	r23, r23
    51ec:	21 f0       	breq	.+8      	; 0x51f6 <__floatsisf+0x54>
    51ee:	9e e8       	ldi	r25, 0x8E	; 142
    51f0:	87 2f       	mov	r24, r23
    51f2:	76 2f       	mov	r23, r22
    51f4:	05 c0       	rjmp	.+10     	; 0x5200 <__floatsisf+0x5e>
    51f6:	66 23       	and	r22, r22
    51f8:	71 f0       	breq	.+28     	; 0x5216 <__floatsisf+0x74>
    51fa:	96 e8       	ldi	r25, 0x86	; 134
    51fc:	86 2f       	mov	r24, r22
    51fe:	70 e0       	ldi	r23, 0x00	; 0
    5200:	60 e0       	ldi	r22, 0x00	; 0
    5202:	2a f0       	brmi	.+10     	; 0x520e <__floatsisf+0x6c>
    5204:	9a 95       	dec	r25
    5206:	66 0f       	add	r22, r22
    5208:	77 1f       	adc	r23, r23
    520a:	88 1f       	adc	r24, r24
    520c:	da f7       	brpl	.-10     	; 0x5204 <__floatsisf+0x62>
    520e:	88 0f       	add	r24, r24
    5210:	96 95       	lsr	r25
    5212:	87 95       	ror	r24
    5214:	97 f9       	bld	r25, 7
    5216:	08 95       	ret

00005218 <__fp_split3>:
    5218:	57 fd       	sbrc	r21, 7
    521a:	90 58       	subi	r25, 0x80	; 128
    521c:	44 0f       	add	r20, r20
    521e:	55 1f       	adc	r21, r21
    5220:	59 f0       	breq	.+22     	; 0x5238 <__fp_splitA+0x10>
    5222:	5f 3f       	cpi	r21, 0xFF	; 255
    5224:	71 f0       	breq	.+28     	; 0x5242 <__fp_splitA+0x1a>
    5226:	47 95       	ror	r20

00005228 <__fp_splitA>:
    5228:	88 0f       	add	r24, r24
    522a:	97 fb       	bst	r25, 7
    522c:	99 1f       	adc	r25, r25
    522e:	61 f0       	breq	.+24     	; 0x5248 <__fp_splitA+0x20>
    5230:	9f 3f       	cpi	r25, 0xFF	; 255
    5232:	79 f0       	breq	.+30     	; 0x5252 <__fp_splitA+0x2a>
    5234:	87 95       	ror	r24
    5236:	08 95       	ret
    5238:	12 16       	cp	r1, r18
    523a:	13 06       	cpc	r1, r19
    523c:	14 06       	cpc	r1, r20
    523e:	55 1f       	adc	r21, r21
    5240:	f2 cf       	rjmp	.-28     	; 0x5226 <__fp_split3+0xe>
    5242:	46 95       	lsr	r20
    5244:	f1 df       	rcall	.-30     	; 0x5228 <__fp_splitA>
    5246:	08 c0       	rjmp	.+16     	; 0x5258 <__fp_splitA+0x30>
    5248:	16 16       	cp	r1, r22
    524a:	17 06       	cpc	r1, r23
    524c:	18 06       	cpc	r1, r24
    524e:	99 1f       	adc	r25, r25
    5250:	f1 cf       	rjmp	.-30     	; 0x5234 <__fp_splitA+0xc>
    5252:	86 95       	lsr	r24
    5254:	71 05       	cpc	r23, r1
    5256:	61 05       	cpc	r22, r1
    5258:	08 94       	sec
    525a:	08 95       	ret

0000525c <__fp_zero>:
    525c:	e8 94       	clt

0000525e <__fp_szero>:
    525e:	bb 27       	eor	r27, r27
    5260:	66 27       	eor	r22, r22
    5262:	77 27       	eor	r23, r23
    5264:	cb 01       	movw	r24, r22
    5266:	97 f9       	bld	r25, 7
    5268:	08 95       	ret

0000526a <__mulsf3>:
    526a:	0e 94 48 29 	call	0x5290	; 0x5290 <__mulsf3x>
    526e:	0c 94 b9 29 	jmp	0x5372	; 0x5372 <__fp_round>
    5272:	0e 94 ab 29 	call	0x5356	; 0x5356 <__fp_pscA>
    5276:	38 f0       	brcs	.+14     	; 0x5286 <__mulsf3+0x1c>
    5278:	0e 94 b2 29 	call	0x5364	; 0x5364 <__fp_pscB>
    527c:	20 f0       	brcs	.+8      	; 0x5286 <__mulsf3+0x1c>
    527e:	95 23       	and	r25, r21
    5280:	11 f0       	breq	.+4      	; 0x5286 <__mulsf3+0x1c>
    5282:	0c 94 a2 29 	jmp	0x5344	; 0x5344 <__fp_inf>
    5286:	0c 94 a8 29 	jmp	0x5350	; 0x5350 <__fp_nan>
    528a:	11 24       	eor	r1, r1
    528c:	0c 94 2f 29 	jmp	0x525e	; 0x525e <__fp_szero>

00005290 <__mulsf3x>:
    5290:	0e 94 0c 29 	call	0x5218	; 0x5218 <__fp_split3>
    5294:	70 f3       	brcs	.-36     	; 0x5272 <__mulsf3+0x8>

00005296 <__mulsf3_pse>:
    5296:	95 9f       	mul	r25, r21
    5298:	c1 f3       	breq	.-16     	; 0x528a <__mulsf3+0x20>
    529a:	95 0f       	add	r25, r21
    529c:	50 e0       	ldi	r21, 0x00	; 0
    529e:	55 1f       	adc	r21, r21
    52a0:	62 9f       	mul	r22, r18
    52a2:	f0 01       	movw	r30, r0
    52a4:	72 9f       	mul	r23, r18
    52a6:	bb 27       	eor	r27, r27
    52a8:	f0 0d       	add	r31, r0
    52aa:	b1 1d       	adc	r27, r1
    52ac:	63 9f       	mul	r22, r19
    52ae:	aa 27       	eor	r26, r26
    52b0:	f0 0d       	add	r31, r0
    52b2:	b1 1d       	adc	r27, r1
    52b4:	aa 1f       	adc	r26, r26
    52b6:	64 9f       	mul	r22, r20
    52b8:	66 27       	eor	r22, r22
    52ba:	b0 0d       	add	r27, r0
    52bc:	a1 1d       	adc	r26, r1
    52be:	66 1f       	adc	r22, r22
    52c0:	82 9f       	mul	r24, r18
    52c2:	22 27       	eor	r18, r18
    52c4:	b0 0d       	add	r27, r0
    52c6:	a1 1d       	adc	r26, r1
    52c8:	62 1f       	adc	r22, r18
    52ca:	73 9f       	mul	r23, r19
    52cc:	b0 0d       	add	r27, r0
    52ce:	a1 1d       	adc	r26, r1
    52d0:	62 1f       	adc	r22, r18
    52d2:	83 9f       	mul	r24, r19
    52d4:	a0 0d       	add	r26, r0
    52d6:	61 1d       	adc	r22, r1
    52d8:	22 1f       	adc	r18, r18
    52da:	74 9f       	mul	r23, r20
    52dc:	33 27       	eor	r19, r19
    52de:	a0 0d       	add	r26, r0
    52e0:	61 1d       	adc	r22, r1
    52e2:	23 1f       	adc	r18, r19
    52e4:	84 9f       	mul	r24, r20
    52e6:	60 0d       	add	r22, r0
    52e8:	21 1d       	adc	r18, r1
    52ea:	82 2f       	mov	r24, r18
    52ec:	76 2f       	mov	r23, r22
    52ee:	6a 2f       	mov	r22, r26
    52f0:	11 24       	eor	r1, r1
    52f2:	9f 57       	subi	r25, 0x7F	; 127
    52f4:	50 40       	sbci	r21, 0x00	; 0
    52f6:	9a f0       	brmi	.+38     	; 0x531e <__mulsf3_pse+0x88>
    52f8:	f1 f0       	breq	.+60     	; 0x5336 <__mulsf3_pse+0xa0>
    52fa:	88 23       	and	r24, r24
    52fc:	4a f0       	brmi	.+18     	; 0x5310 <__mulsf3_pse+0x7a>
    52fe:	ee 0f       	add	r30, r30
    5300:	ff 1f       	adc	r31, r31
    5302:	bb 1f       	adc	r27, r27
    5304:	66 1f       	adc	r22, r22
    5306:	77 1f       	adc	r23, r23
    5308:	88 1f       	adc	r24, r24
    530a:	91 50       	subi	r25, 0x01	; 1
    530c:	50 40       	sbci	r21, 0x00	; 0
    530e:	a9 f7       	brne	.-22     	; 0x52fa <__mulsf3_pse+0x64>
    5310:	9e 3f       	cpi	r25, 0xFE	; 254
    5312:	51 05       	cpc	r21, r1
    5314:	80 f0       	brcs	.+32     	; 0x5336 <__mulsf3_pse+0xa0>
    5316:	0c 94 a2 29 	jmp	0x5344	; 0x5344 <__fp_inf>
    531a:	0c 94 2f 29 	jmp	0x525e	; 0x525e <__fp_szero>
    531e:	5f 3f       	cpi	r21, 0xFF	; 255
    5320:	e4 f3       	brlt	.-8      	; 0x531a <__mulsf3_pse+0x84>
    5322:	98 3e       	cpi	r25, 0xE8	; 232
    5324:	d4 f3       	brlt	.-12     	; 0x531a <__mulsf3_pse+0x84>
    5326:	86 95       	lsr	r24
    5328:	77 95       	ror	r23
    532a:	67 95       	ror	r22
    532c:	b7 95       	ror	r27
    532e:	f7 95       	ror	r31
    5330:	e7 95       	ror	r30
    5332:	9f 5f       	subi	r25, 0xFF	; 255
    5334:	c1 f7       	brne	.-16     	; 0x5326 <__mulsf3_pse+0x90>
    5336:	fe 2b       	or	r31, r30
    5338:	88 0f       	add	r24, r24
    533a:	91 1d       	adc	r25, r1
    533c:	96 95       	lsr	r25
    533e:	87 95       	ror	r24
    5340:	97 f9       	bld	r25, 7
    5342:	08 95       	ret

00005344 <__fp_inf>:
    5344:	97 f9       	bld	r25, 7
    5346:	9f 67       	ori	r25, 0x7F	; 127
    5348:	80 e8       	ldi	r24, 0x80	; 128
    534a:	70 e0       	ldi	r23, 0x00	; 0
    534c:	60 e0       	ldi	r22, 0x00	; 0
    534e:	08 95       	ret

00005350 <__fp_nan>:
    5350:	9f ef       	ldi	r25, 0xFF	; 255
    5352:	80 ec       	ldi	r24, 0xC0	; 192
    5354:	08 95       	ret

00005356 <__fp_pscA>:
    5356:	00 24       	eor	r0, r0
    5358:	0a 94       	dec	r0
    535a:	16 16       	cp	r1, r22
    535c:	17 06       	cpc	r1, r23
    535e:	18 06       	cpc	r1, r24
    5360:	09 06       	cpc	r0, r25
    5362:	08 95       	ret

00005364 <__fp_pscB>:
    5364:	00 24       	eor	r0, r0
    5366:	0a 94       	dec	r0
    5368:	12 16       	cp	r1, r18
    536a:	13 06       	cpc	r1, r19
    536c:	14 06       	cpc	r1, r20
    536e:	05 06       	cpc	r0, r21
    5370:	08 95       	ret

00005372 <__fp_round>:
    5372:	09 2e       	mov	r0, r25
    5374:	03 94       	inc	r0
    5376:	00 0c       	add	r0, r0
    5378:	11 f4       	brne	.+4      	; 0x537e <__fp_round+0xc>
    537a:	88 23       	and	r24, r24
    537c:	52 f0       	brmi	.+20     	; 0x5392 <__fp_round+0x20>
    537e:	bb 0f       	add	r27, r27
    5380:	40 f4       	brcc	.+16     	; 0x5392 <__fp_round+0x20>
    5382:	bf 2b       	or	r27, r31
    5384:	11 f4       	brne	.+4      	; 0x538a <__fp_round+0x18>
    5386:	60 ff       	sbrs	r22, 0
    5388:	04 c0       	rjmp	.+8      	; 0x5392 <__fp_round+0x20>
    538a:	6f 5f       	subi	r22, 0xFF	; 255
    538c:	7f 4f       	sbci	r23, 0xFF	; 255
    538e:	8f 4f       	sbci	r24, 0xFF	; 255
    5390:	9f 4f       	sbci	r25, 0xFF	; 255
    5392:	08 95       	ret

00005394 <__udivmodqi4>:
    5394:	99 1b       	sub	r25, r25
    5396:	79 e0       	ldi	r23, 0x09	; 9
    5398:	04 c0       	rjmp	.+8      	; 0x53a2 <__udivmodqi4_ep>

0000539a <__udivmodqi4_loop>:
    539a:	99 1f       	adc	r25, r25
    539c:	96 17       	cp	r25, r22
    539e:	08 f0       	brcs	.+2      	; 0x53a2 <__udivmodqi4_ep>
    53a0:	96 1b       	sub	r25, r22

000053a2 <__udivmodqi4_ep>:
    53a2:	88 1f       	adc	r24, r24
    53a4:	7a 95       	dec	r23
    53a6:	c9 f7       	brne	.-14     	; 0x539a <__udivmodqi4_loop>
    53a8:	80 95       	com	r24
    53aa:	08 95       	ret

000053ac <__divmodhi4>:
    53ac:	97 fb       	bst	r25, 7
    53ae:	07 2e       	mov	r0, r23
    53b0:	16 f4       	brtc	.+4      	; 0x53b6 <__divmodhi4+0xa>
    53b2:	00 94       	com	r0
    53b4:	07 d0       	rcall	.+14     	; 0x53c4 <__divmodhi4_neg1>
    53b6:	77 fd       	sbrc	r23, 7
    53b8:	09 d0       	rcall	.+18     	; 0x53cc <__divmodhi4_neg2>
    53ba:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__udivmodhi4>
    53be:	07 fc       	sbrc	r0, 7
    53c0:	05 d0       	rcall	.+10     	; 0x53cc <__divmodhi4_neg2>
    53c2:	3e f4       	brtc	.+14     	; 0x53d2 <__divmodhi4_exit>

000053c4 <__divmodhi4_neg1>:
    53c4:	90 95       	com	r25
    53c6:	81 95       	neg	r24
    53c8:	9f 4f       	sbci	r25, 0xFF	; 255
    53ca:	08 95       	ret

000053cc <__divmodhi4_neg2>:
    53cc:	70 95       	com	r23
    53ce:	61 95       	neg	r22
    53d0:	7f 4f       	sbci	r23, 0xFF	; 255

000053d2 <__divmodhi4_exit>:
    53d2:	08 95       	ret

000053d4 <__tablejump2__>:
    53d4:	ee 0f       	add	r30, r30
    53d6:	ff 1f       	adc	r31, r31
    53d8:	05 90       	lpm	r0, Z+
    53da:	f4 91       	lpm	r31, Z
    53dc:	e0 2d       	mov	r30, r0
    53de:	09 94       	ijmp

000053e0 <__udivmodhi4>:
    53e0:	aa 1b       	sub	r26, r26
    53e2:	bb 1b       	sub	r27, r27
    53e4:	51 e1       	ldi	r21, 0x11	; 17
    53e6:	07 c0       	rjmp	.+14     	; 0x53f6 <__udivmodhi4_ep>

000053e8 <__udivmodhi4_loop>:
    53e8:	aa 1f       	adc	r26, r26
    53ea:	bb 1f       	adc	r27, r27
    53ec:	a6 17       	cp	r26, r22
    53ee:	b7 07       	cpc	r27, r23
    53f0:	10 f0       	brcs	.+4      	; 0x53f6 <__udivmodhi4_ep>
    53f2:	a6 1b       	sub	r26, r22
    53f4:	b7 0b       	sbc	r27, r23

000053f6 <__udivmodhi4_ep>:
    53f6:	88 1f       	adc	r24, r24
    53f8:	99 1f       	adc	r25, r25
    53fa:	5a 95       	dec	r21
    53fc:	a9 f7       	brne	.-22     	; 0x53e8 <__udivmodhi4_loop>
    53fe:	80 95       	com	r24
    5400:	90 95       	com	r25
    5402:	bc 01       	movw	r22, r24
    5404:	cd 01       	movw	r24, r26
    5406:	08 95       	ret

00005408 <eeprom_read_byte>:
    5408:	f9 99       	sbic	0x1f, 1	; 31
    540a:	fe cf       	rjmp	.-4      	; 0x5408 <eeprom_read_byte>
    540c:	92 bd       	out	0x22, r25	; 34
    540e:	81 bd       	out	0x21, r24	; 33
    5410:	f8 9a       	sbi	0x1f, 0	; 31
    5412:	99 27       	eor	r25, r25
    5414:	80 b5       	in	r24, 0x20	; 32
    5416:	08 95       	ret

00005418 <eeprom_read_word>:
    5418:	a8 e1       	ldi	r26, 0x18	; 24
    541a:	b0 e0       	ldi	r27, 0x00	; 0
    541c:	42 e0       	ldi	r20, 0x02	; 2
    541e:	50 e0       	ldi	r21, 0x00	; 0
    5420:	0c 94 27 2a 	jmp	0x544e	; 0x544e <eeprom_read_blraw>

00005424 <eeprom_write_byte>:
    5424:	26 2f       	mov	r18, r22

00005426 <eeprom_write_r18>:
    5426:	f9 99       	sbic	0x1f, 1	; 31
    5428:	fe cf       	rjmp	.-4      	; 0x5426 <eeprom_write_r18>
    542a:	1f ba       	out	0x1f, r1	; 31
    542c:	92 bd       	out	0x22, r25	; 34
    542e:	81 bd       	out	0x21, r24	; 33
    5430:	20 bd       	out	0x20, r18	; 32
    5432:	0f b6       	in	r0, 0x3f	; 63
    5434:	f8 94       	cli
    5436:	fa 9a       	sbi	0x1f, 2	; 31
    5438:	f9 9a       	sbi	0x1f, 1	; 31
    543a:	0f be       	out	0x3f, r0	; 63
    543c:	01 96       	adiw	r24, 0x01	; 1
    543e:	08 95       	ret

00005440 <eeprom_write_word>:
    5440:	0e 94 12 2a 	call	0x5424	; 0x5424 <eeprom_write_byte>
    5444:	27 2f       	mov	r18, r23
    5446:	0c 94 13 2a 	jmp	0x5426	; 0x5426 <eeprom_write_r18>

0000544a <eeprom_read_block>:
    544a:	dc 01       	movw	r26, r24
    544c:	cb 01       	movw	r24, r22

0000544e <eeprom_read_blraw>:
    544e:	fc 01       	movw	r30, r24
    5450:	f9 99       	sbic	0x1f, 1	; 31
    5452:	fe cf       	rjmp	.-4      	; 0x5450 <eeprom_read_blraw+0x2>
    5454:	06 c0       	rjmp	.+12     	; 0x5462 <eeprom_read_blraw+0x14>
    5456:	f2 bd       	out	0x22, r31	; 34
    5458:	e1 bd       	out	0x21, r30	; 33
    545a:	f8 9a       	sbi	0x1f, 0	; 31
    545c:	31 96       	adiw	r30, 0x01	; 1
    545e:	00 b4       	in	r0, 0x20	; 32
    5460:	0d 92       	st	X+, r0
    5462:	41 50       	subi	r20, 0x01	; 1
    5464:	50 40       	sbci	r21, 0x00	; 0
    5466:	b8 f7       	brcc	.-18     	; 0x5456 <eeprom_read_blraw+0x8>
    5468:	08 95       	ret

0000546a <_exit>:
    546a:	f8 94       	cli

0000546c <__stop_program>:
    546c:	ff cf       	rjmp	.-2      	; 0x546c <__stop_program>
